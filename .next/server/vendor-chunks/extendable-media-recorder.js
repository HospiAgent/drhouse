/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/extendable-media-recorder";
exports.ids = ["vendor-chunks/extendable-media-recorder"];
exports.modules = {

/***/ "(ssr)/./node_modules/extendable-media-recorder/build/es5/bundle.js":
/*!********************************************************************!*\
  !*** ./node_modules/extendable-media-recorder/build/es5/bundle.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("(function (global, factory) {\n     true ? factory(exports, __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ \"(ssr)/./node_modules/@babel/runtime/helpers/asyncToGenerator.js\"), __webpack_require__(/*! @babel/runtime/regenerator */ \"(ssr)/./node_modules/@babel/runtime/regenerator/index.js\"), __webpack_require__(/*! media-encoder-host */ \"(ssr)/./node_modules/media-encoder-host/build/es5/bundle.js\"), __webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectWithoutProperties.js\"), __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \"(ssr)/./node_modules/@babel/runtime/helpers/classCallCheck.js\"), __webpack_require__(/*! @babel/runtime/helpers/createClass */ \"(ssr)/./node_modules/@babel/runtime/helpers/createClass.js\"), __webpack_require__(/*! @babel/runtime/helpers/assertThisInitialized */ \"(ssr)/./node_modules/@babel/runtime/helpers/assertThisInitialized.js\"), __webpack_require__(/*! @babel/runtime/helpers/inherits */ \"(ssr)/./node_modules/@babel/runtime/helpers/inherits.js\"), __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ \"(ssr)/./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js\"), __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ \"(ssr)/./node_modules/@babel/runtime/helpers/getPrototypeOf.js\"), __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ \"(ssr)/./node_modules/@babel/runtime/helpers/slicedToArray.js\"), __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ \"(ssr)/./node_modules/@babel/runtime/helpers/toConsumableArray.js\"), __webpack_require__(/*! recorder-audio-worklet */ \"(ssr)/./node_modules/recorder-audio-worklet/build/es5/bundle.js\"), __webpack_require__(/*! standardized-audio-context */ \"(ssr)/./node_modules/standardized-audio-context/build/es5/bundle.js\"), __webpack_require__(/*! multi-buffer-data-view */ \"(ssr)/./node_modules/multi-buffer-data-view/build/node/module.js\"), __webpack_require__(/*! subscribable-things */ \"(ssr)/./node_modules/subscribable-things/build/es5/bundle.js\")) :\n    0;\n})(this, (function (exports, _asyncToGenerator, _regeneratorRuntime, mediaEncoderHost, _objectWithoutProperties, _classCallCheck, _createClass, _assertThisInitialized, _inherits, _possibleConstructorReturn, _getPrototypeOf, _slicedToArray, _toConsumableArray, recorderAudioWorklet, standardizedAudioContext, multiBufferDataView, subscribableThings) { 'use strict';\n\n    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\n    var _asyncToGenerator__default = /*#__PURE__*/_interopDefaultLegacy(_asyncToGenerator);\n    var _regeneratorRuntime__default = /*#__PURE__*/_interopDefaultLegacy(_regeneratorRuntime);\n    var _objectWithoutProperties__default = /*#__PURE__*/_interopDefaultLegacy(_objectWithoutProperties);\n    var _classCallCheck__default = /*#__PURE__*/_interopDefaultLegacy(_classCallCheck);\n    var _createClass__default = /*#__PURE__*/_interopDefaultLegacy(_createClass);\n    var _assertThisInitialized__default = /*#__PURE__*/_interopDefaultLegacy(_assertThisInitialized);\n    var _inherits__default = /*#__PURE__*/_interopDefaultLegacy(_inherits);\n    var _possibleConstructorReturn__default = /*#__PURE__*/_interopDefaultLegacy(_possibleConstructorReturn);\n    var _getPrototypeOf__default = /*#__PURE__*/_interopDefaultLegacy(_getPrototypeOf);\n    var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);\n    var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);\n\n    var _excluded = [\"data\"];\n    var createBlobEventFactory = function createBlobEventFactory(nativeBlobEventConstructor) {\n      return function (type, blobEventInit) {\n        // Bug #14: Safari does not yet support the BlobEvent.\n        if (nativeBlobEventConstructor === null) {\n          var data = blobEventInit.data,\n              eventInit = _objectWithoutProperties__default[\"default\"](blobEventInit, _excluded);\n\n          var fakeBlobEvent = new Event(type, eventInit);\n          fakeBlobEvent.data = data;\n          return fakeBlobEvent;\n        }\n\n        return new nativeBlobEventConstructor(type, blobEventInit);\n      };\n    };\n\n    var createDecodeWebMChunk = function createDecodeWebMChunk(readElementContent, readElementType) {\n      return function (dataView, elementType, channelCount) {\n        var contents = [];\n        var currentElementType = elementType;\n        var offset = 0;\n\n        while (offset < dataView.byteLength) {\n          if (currentElementType === null) {\n            var lengthAndType = readElementType(dataView, offset);\n\n            if (lengthAndType === null) {\n              break;\n            }\n\n            var length = lengthAndType.length,\n                type = lengthAndType.type;\n            currentElementType = type;\n            offset += length;\n          } else {\n            var contentAndLength = readElementContent(dataView, offset, currentElementType, channelCount);\n\n            if (contentAndLength === null) {\n              break;\n            }\n\n            var content = contentAndLength.content,\n                _length = contentAndLength.length;\n            currentElementType = null;\n            offset += _length;\n\n            if (content !== null) {\n              contents.push(content);\n            }\n          }\n        }\n\n        return {\n          contents: contents,\n          currentElementType: currentElementType,\n          offset: offset\n        };\n      };\n    };\n\n    var createEventTargetConstructor = function createEventTargetConstructor(createEventTarget, wrapEventListener) {\n      return /*#__PURE__*/function () {\n        function EventTarget() {\n          var nativeEventTarget = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n          _classCallCheck__default[\"default\"](this, EventTarget);\n\n          this._listeners = new WeakMap();\n          this._nativeEventTarget = nativeEventTarget === null ? createEventTarget() : nativeEventTarget;\n        }\n\n        _createClass__default[\"default\"](EventTarget, [{\n          key: \"addEventListener\",\n          value: function addEventListener(type, listener, options) {\n            if (listener !== null) {\n              var wrappedEventListener = this._listeners.get(listener);\n\n              if (wrappedEventListener === undefined) {\n                wrappedEventListener = wrapEventListener(this, listener);\n\n                if (typeof listener === 'function') {\n                  this._listeners.set(listener, wrappedEventListener);\n                }\n              }\n\n              this._nativeEventTarget.addEventListener(type, wrappedEventListener, options);\n            }\n          }\n        }, {\n          key: \"dispatchEvent\",\n          value: function dispatchEvent(event) {\n            return this._nativeEventTarget.dispatchEvent(event);\n          }\n        }, {\n          key: \"removeEventListener\",\n          value: function removeEventListener(type, listener, options) {\n            var wrappedEventListener = listener === null ? undefined : this._listeners.get(listener);\n\n            this._nativeEventTarget.removeEventListener(type, wrappedEventListener === undefined ? null : wrappedEventListener, options);\n          }\n        }]);\n\n        return EventTarget;\n      }();\n    };\n\n    var createEventTargetFactory = function createEventTargetFactory(window) {\n      return function () {\n        if (window === null) {\n          throw new Error('A native EventTarget could not be created.');\n        }\n\n        return window.document.createElement('p');\n      };\n    };\n\n    var createInvalidModificationError = function createInvalidModificationError() {\n      var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n      try {\n        return new DOMException(message, 'InvalidModificationError');\n      } catch (err) {\n        // @todo Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 13;\n        err.message = message;\n        err.name = 'InvalidModificationError';\n        return err;\n      }\n    };\n\n    var createInvalidStateError = function createInvalidStateError() {\n      try {\n        return new DOMException('', 'InvalidStateError');\n      } catch (err) {\n        // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 11;\n        err.name = 'InvalidStateError';\n        return err;\n      }\n    };\n\n    var createIsSupportedPromise = function createIsSupportedPromise(window) {\n      if (window !== null && window.MediaStream !== undefined && (\n      /*\n       * Bug #10: An early experimental implemenation in Safari did not provide the isTypeSupported() function.\n       */\n      window.MediaRecorder === undefined || window.MediaRecorder.isTypeSupported !== undefined)) {\n        /*\n         * Bug #5: Up until v70 Firefox did emit a blob of type video/webm when asked to encode a MediaStream with a video track into an\n         * audio codec.\n         */\n        return new Promise(function (resolve) {\n          // Bug #11 Safari does not yet support the MediaRecorder but that isn't tested here.\n          if (window.MediaRecorder === undefined) {\n            return resolve(true);\n          } // @todo captureStream() is not defined yet.\n\n\n          var canvasElement = document.createElement('canvas'); // @todo https://bugzilla.mozilla.org/show_bug.cgi?id=1388974\n\n          canvasElement.getContext('2d');\n\n          if (typeof canvasElement.captureStream !== 'function') {\n            return resolve(false);\n          }\n\n          var mediaStream = canvasElement.captureStream();\n          var mimeType = 'audio/webm';\n\n          try {\n            var mediaRecorder = new window.MediaRecorder(mediaStream, {\n              mimeType: mimeType\n            });\n            mediaRecorder.addEventListener('dataavailable', function (_ref) {\n              var data = _ref.data;\n              return resolve(data.type === mimeType);\n            });\n            mediaRecorder.start();\n            setTimeout(function () {\n              return mediaRecorder.stop();\n            }, 10);\n          } catch (err) {\n            resolve(err.name === 'NotSupportedError');\n          }\n        });\n      }\n\n      return Promise.resolve(false);\n    };\n\n    function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf__default[\"default\"](Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf__default[\"default\"](this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn__default[\"default\"](this, result); }; }\n\n    function _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n    var createMediaRecorderConstructor = function createMediaRecorderConstructor(createNativeMediaRecorder, createNotSupportedError, createWebAudioMediaRecorder, createWebmPcmMediaRecorder, encoderRegexes, eventTargetConstructor, nativeMediaRecorderConstructor) {\n      return /*#__PURE__*/function (_eventTargetConstruct) {\n        _inherits__default[\"default\"](MediaRecorder, _eventTargetConstruct);\n\n        var _super = _createSuper(MediaRecorder);\n\n        function MediaRecorder(stream) {\n          var _this;\n\n          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n          _classCallCheck__default[\"default\"](this, MediaRecorder);\n\n          var mimeType = options.mimeType;\n\n          if (nativeMediaRecorderConstructor !== null && ( // Bug #10: Safari does not yet implement the isTypeSupported() method.\n          mimeType === undefined || nativeMediaRecorderConstructor.isTypeSupported !== undefined && nativeMediaRecorderConstructor.isTypeSupported(mimeType))) {\n            var internalMediaRecorder = createNativeMediaRecorder(nativeMediaRecorderConstructor, stream, options);\n            _this = _super.call(this, internalMediaRecorder);\n            _this._internalMediaRecorder = internalMediaRecorder;\n          } else if (mimeType !== undefined && encoderRegexes.some(function (regex) {\n            return regex.test(mimeType);\n          })) {\n            _this = _super.call(this); // Bug #10: Safari does not yet implement the isTypeSupported() method.\n\n            if (nativeMediaRecorderConstructor !== null && nativeMediaRecorderConstructor.isTypeSupported !== undefined && nativeMediaRecorderConstructor.isTypeSupported('audio/webm;codecs=pcm')) {\n              _this._internalMediaRecorder = createWebmPcmMediaRecorder(_assertThisInitialized__default[\"default\"](_this), nativeMediaRecorderConstructor, stream, mimeType);\n            } else {\n              _this._internalMediaRecorder = createWebAudioMediaRecorder(_assertThisInitialized__default[\"default\"](_this), stream, mimeType);\n            }\n          } else {\n            // This is creating a native MediaRecorder just to provoke it to throw an error.\n            if (nativeMediaRecorderConstructor !== null) {\n              createNativeMediaRecorder(nativeMediaRecorderConstructor, stream, options);\n            }\n\n            throw createNotSupportedError();\n          }\n\n          _this._ondataavailable = null;\n          _this._onerror = null;\n          _this._onpause = null;\n          _this._onresume = null;\n          _this._onstart = null;\n          _this._onstop = null;\n          return _possibleConstructorReturn__default[\"default\"](_this);\n        }\n\n        _createClass__default[\"default\"](MediaRecorder, [{\n          key: \"mimeType\",\n          get: function get() {\n            return this._internalMediaRecorder.mimeType;\n          }\n        }, {\n          key: \"ondataavailable\",\n          get: function get() {\n            return this._ondataavailable === null ? this._ondataavailable : this._ondataavailable[0];\n          },\n          set: function set(value) {\n            if (this._ondataavailable !== null) {\n              this.removeEventListener('dataavailable', this._ondataavailable[1]);\n            }\n\n            if (typeof value === 'function') {\n              var boundListener = value.bind(this);\n              this.addEventListener('dataavailable', boundListener);\n              this._ondataavailable = [value, boundListener];\n            } else {\n              this._ondataavailable = null;\n            }\n          }\n        }, {\n          key: \"onerror\",\n          get: function get() {\n            return this._onerror === null ? this._onerror : this._onerror[0];\n          },\n          set: function set(value) {\n            if (this._onerror !== null) {\n              this.removeEventListener('error', this._onerror[1]);\n            }\n\n            if (typeof value === 'function') {\n              var boundListener = value.bind(this);\n              this.addEventListener('error', boundListener);\n              this._onerror = [value, boundListener];\n            } else {\n              this._onerror = null;\n            }\n          }\n        }, {\n          key: \"onpause\",\n          get: function get() {\n            return this._onpause === null ? this._onpause : this._onpause[0];\n          },\n          set: function set(value) {\n            if (this._onpause !== null) {\n              this.removeEventListener('pause', this._onpause[1]);\n            }\n\n            if (typeof value === 'function') {\n              var boundListener = value.bind(this);\n              this.addEventListener('pause', boundListener);\n              this._onpause = [value, boundListener];\n            } else {\n              this._onpause = null;\n            }\n          }\n        }, {\n          key: \"onresume\",\n          get: function get() {\n            return this._onresume === null ? this._onresume : this._onresume[0];\n          },\n          set: function set(value) {\n            if (this._onresume !== null) {\n              this.removeEventListener('resume', this._onresume[1]);\n            }\n\n            if (typeof value === 'function') {\n              var boundListener = value.bind(this);\n              this.addEventListener('resume', boundListener);\n              this._onresume = [value, boundListener];\n            } else {\n              this._onresume = null;\n            }\n          }\n        }, {\n          key: \"onstart\",\n          get: function get() {\n            return this._onstart === null ? this._onstart : this._onstart[0];\n          },\n          set: function set(value) {\n            if (this._onstart !== null) {\n              this.removeEventListener('start', this._onstart[1]);\n            }\n\n            if (typeof value === 'function') {\n              var boundListener = value.bind(this);\n              this.addEventListener('start', boundListener);\n              this._onstart = [value, boundListener];\n            } else {\n              this._onstart = null;\n            }\n          }\n        }, {\n          key: \"onstop\",\n          get: function get() {\n            return this._onstop === null ? this._onstop : this._onstop[0];\n          },\n          set: function set(value) {\n            if (this._onstop !== null) {\n              this.removeEventListener('stop', this._onstop[1]);\n            }\n\n            if (typeof value === 'function') {\n              var boundListener = value.bind(this);\n              this.addEventListener('stop', boundListener);\n              this._onstop = [value, boundListener];\n            } else {\n              this._onstop = null;\n            }\n          }\n        }, {\n          key: \"state\",\n          get: function get() {\n            return this._internalMediaRecorder.state;\n          }\n        }, {\n          key: \"pause\",\n          value: function pause() {\n            return this._internalMediaRecorder.pause();\n          }\n        }, {\n          key: \"resume\",\n          value: function resume() {\n            return this._internalMediaRecorder.resume();\n          }\n        }, {\n          key: \"start\",\n          value: function start(timeslice) {\n            return this._internalMediaRecorder.start(timeslice);\n          }\n        }, {\n          key: \"stop\",\n          value: function stop() {\n            return this._internalMediaRecorder.stop();\n          }\n        }], [{\n          key: \"isTypeSupported\",\n          value: function isTypeSupported(mimeType) {\n            return nativeMediaRecorderConstructor !== null && // Bug #10: Safari does not yet implement the isTypeSupported() method.\n            nativeMediaRecorderConstructor.isTypeSupported !== undefined && nativeMediaRecorderConstructor.isTypeSupported(mimeType) || encoderRegexes.some(function (regex) {\n              return regex.test(mimeType);\n            });\n          }\n        }]);\n\n        return MediaRecorder;\n      }(eventTargetConstructor);\n    };\n\n    var createNativeBlobEventConstructor = function createNativeBlobEventConstructor(window) {\n      if (window !== null && window.BlobEvent !== undefined) {\n        return window.BlobEvent;\n      }\n\n      return null;\n    };\n\n    var createNativeMediaRecorderFactory = function createNativeMediaRecorderFactory(createInvalidModificationError, createNotSupportedError) {\n      return function (nativeMediaRecorderConstructor, stream, mediaRecorderOptions) {\n        var bufferedBlobs = [];\n        var dataAvailableListeners = new WeakMap();\n        var errorListeners = new WeakMap();\n        var nativeMediaRecorder = new nativeMediaRecorderConstructor(stream, mediaRecorderOptions);\n        var stopListeners = new WeakMap();\n        var isActive = true;\n\n        nativeMediaRecorder.addEventListener = function (addEventListener) {\n          return function (type, listener, options) {\n            var patchedEventListener = listener;\n\n            if (typeof listener === 'function') {\n              if (type === 'dataavailable') {\n                // Bug #7 & #8: Chrome fires the dataavailable and stop events before it fires the error event.\n                patchedEventListener = function patchedEventListener(event) {\n                  setTimeout(function () {\n                    if (isActive && nativeMediaRecorder.state === 'inactive') {\n                      bufferedBlobs.push(event.data);\n                    } else {\n                      if (bufferedBlobs.length > 0) {\n                        var blob = event.data;\n                        Object.defineProperty(event, 'data', {\n                          value: new Blob([].concat(bufferedBlobs, [blob]), {\n                            type: blob.type\n                          })\n                        });\n                        bufferedBlobs.length = 0;\n                      }\n\n                      listener.call(nativeMediaRecorder, event);\n                    }\n                  });\n                };\n\n                dataAvailableListeners.set(listener, patchedEventListener);\n              } else if (type === 'error') {\n                // Bug #12 & #13: Firefox fires a regular event with an error property.\n                patchedEventListener = function patchedEventListener(event) {\n                  // Bug #3 & #4: Chrome throws an error event without any error.\n                  if (event.error === undefined) {\n                    listener.call(nativeMediaRecorder, new ErrorEvent('error', {\n                      error: createInvalidModificationError()\n                    })); // Bug #1 & #2: Firefox throws an error event with an UnknownError.\n                  } else if (event.error.name === 'UnknownError') {\n                    var message = event.error.message;\n                    listener.call(nativeMediaRecorder, new ErrorEvent('error', {\n                      error: createInvalidModificationError(message)\n                    }));\n                  } else if (event instanceof ErrorEvent) {\n                    listener.call(nativeMediaRecorder, event);\n                  } else {\n                    listener.call(nativeMediaRecorder, new ErrorEvent('error', {\n                      error: event.error\n                    }));\n                  }\n                };\n\n                errorListeners.set(listener, patchedEventListener);\n              } else if (type === 'stop') {\n                // Bug #7 & #8: Chrome fires the dataavailable and stop events before it fires the error event.\n                patchedEventListener = function patchedEventListener(event) {\n                  isActive = false;\n                  setTimeout(function () {\n                    return listener.call(nativeMediaRecorder, event);\n                  });\n                };\n\n                stopListeners.set(listener, patchedEventListener);\n              }\n            }\n\n            return addEventListener.call(nativeMediaRecorder, type, patchedEventListener, options);\n          };\n        }(nativeMediaRecorder.addEventListener);\n\n        nativeMediaRecorder.dispatchEvent = function (dispatchEvent) {\n          // Bug #7 & #8: Chrome fires the dataavailable and stop events before it fires the error event.\n          return function (event) {\n            var wasActive;\n            setTimeout(function () {\n              wasActive = isActive;\n              isActive = false;\n            });\n            var returnValue = dispatchEvent.call(nativeMediaRecorder, event);\n            setTimeout(function () {\n              return isActive = wasActive;\n            });\n            return returnValue;\n          };\n        }(nativeMediaRecorder.dispatchEvent);\n\n        nativeMediaRecorder.removeEventListener = function (removeEventListener) {\n          return function (type, listener, options) {\n            var patchedEventListener = listener;\n\n            if (typeof listener === 'function') {\n              if (type === 'dataavailable') {\n                var dataAvailableListener = dataAvailableListeners.get(listener);\n\n                if (dataAvailableListener !== undefined) {\n                  patchedEventListener = dataAvailableListener;\n                }\n              } else if (type === 'error') {\n                var errorListener = errorListeners.get(listener);\n\n                if (errorListener !== undefined) {\n                  patchedEventListener = errorListener;\n                }\n              } else if (type === 'stop') {\n                var stopListener = stopListeners.get(listener);\n\n                if (stopListener !== undefined) {\n                  patchedEventListener = stopListener;\n                }\n              }\n            }\n\n            return removeEventListener.call(nativeMediaRecorder, type, patchedEventListener, options);\n          };\n        }(nativeMediaRecorder.removeEventListener);\n\n        nativeMediaRecorder.start = function (start) {\n          return function (timeslice) {\n            /*\n             * Bug #6: Chrome will emit a blob without any data when asked to encode a MediaStream with a video track into an audio\n             * codec.\n             */\n            if (mediaRecorderOptions.mimeType !== undefined && mediaRecorderOptions.mimeType.startsWith('audio/') && stream.getVideoTracks().length > 0) {\n              throw createNotSupportedError();\n            }\n\n            isActive = timeslice !== undefined;\n            return timeslice === undefined ? start.call(nativeMediaRecorder) : start.call(nativeMediaRecorder, timeslice);\n          };\n        }(nativeMediaRecorder.start);\n\n        return nativeMediaRecorder;\n      };\n    };\n\n    var createNativeMediaRecorderConstructor = function createNativeMediaRecorderConstructor(window) {\n      if (window === null) {\n        return null;\n      }\n\n      return window.MediaRecorder === undefined ? null : window.MediaRecorder;\n    };\n\n    var createNotSupportedError = function createNotSupportedError() {\n      try {\n        return new DOMException('', 'NotSupportedError');\n      } catch (err) {\n        // @todo Edge is the only browser that does not yet allow to construct a DOMException.\n        err.code = 9;\n        err.name = 'NotSupportedError';\n        return err;\n      }\n    };\n\n    var createReadElementContent = function createReadElementContent(readVariableSizeInteger) {\n      return function (dataView, offset, type) {\n        var channelCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2;\n        var lengthAndValue = readVariableSizeInteger(dataView, offset);\n\n        if (lengthAndValue === null) {\n          return lengthAndValue;\n        }\n\n        var length = lengthAndValue.length,\n            value = lengthAndValue.value;\n\n        if (type === 'master') {\n          return {\n            content: null,\n            length: length\n          };\n        }\n\n        if (offset + length + value > dataView.byteLength) {\n          return null;\n        }\n\n        if (type === 'binary') {\n          var numberOfSamples = (value / Float32Array.BYTES_PER_ELEMENT - 1) / channelCount;\n          var content = Array.from({\n            length: channelCount\n          }, function () {\n            return new Float32Array(numberOfSamples);\n          });\n\n          for (var i = 0; i < numberOfSamples; i += 1) {\n            var elementOffset = i * channelCount + 1;\n\n            for (var j = 0; j < channelCount; j += 1) {\n              content[j][i] = dataView.getFloat32(offset + length + (elementOffset + j) * Float32Array.BYTES_PER_ELEMENT, true);\n            }\n          }\n\n          return {\n            content: content,\n            length: length + value\n          };\n        }\n\n        return {\n          content: null,\n          length: length + value\n        };\n      };\n    };\n\n    var createReadElementType = function createReadElementType(readVariableSizeInteger) {\n      return function (dataView, offset) {\n        var lengthAndValue = readVariableSizeInteger(dataView, offset);\n\n        if (lengthAndValue === null) {\n          return lengthAndValue;\n        }\n\n        var length = lengthAndValue.length,\n            value = lengthAndValue.value;\n\n        if (value === 35) {\n          return {\n            length: length,\n            type: 'binary'\n          };\n        }\n\n        if (value === 46 || value === 97 || value === 88713574 || value === 106212971 || value === 139690087 || value === 172351395 || value === 256095861) {\n          return {\n            length: length,\n            type: 'master'\n          };\n        }\n\n        return {\n          length: length,\n          type: 'unknown'\n        };\n      };\n    };\n\n    var createReadVariableSizeInteger = function createReadVariableSizeInteger(readVariableSizeIntegerLength) {\n      return function (dataView, offset) {\n        var length = readVariableSizeIntegerLength(dataView, offset);\n\n        if (length === null) {\n          return length;\n        }\n\n        var firstDataByteOffset = offset + Math.floor((length - 1) / 8);\n\n        if (firstDataByteOffset + length > dataView.byteLength) {\n          return null;\n        }\n\n        var firstDataByte = dataView.getUint8(firstDataByteOffset);\n        var value = firstDataByte & (1 << 8 - length % 8) - 1; // tslint:disable-line:no-bitwise\n\n        for (var i = 1; i < length; i += 1) {\n          value = (value << 8) + dataView.getUint8(firstDataByteOffset + i); // tslint:disable-line:no-bitwise\n        }\n\n        return {\n          length: length,\n          value: value\n        };\n      };\n    };\n\n    var ERROR_MESSAGE = 'Missing AudioWorklet support. Maybe this is not running in a secure context.'; // @todo This should live in a separate file.\n\n    var createPromisedAudioNodesEncoderIdAndPort = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator__default[\"default\"]( /*#__PURE__*/_regeneratorRuntime__default[\"default\"].mark(function _callee(audioBuffer, audioContext, channelCount, mediaStream, mimeType) {\n        var _yield$instantiate, encoderId, port, audioBufferSourceNode, mediaStreamAudioSourceNode, recorderAudioWorkletNode;\n\n        return _regeneratorRuntime__default[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return mediaEncoderHost.instantiate(mimeType, audioContext.sampleRate);\n\n              case 2:\n                _yield$instantiate = _context.sent;\n                encoderId = _yield$instantiate.encoderId;\n                port = _yield$instantiate.port;\n\n                if (!(standardizedAudioContext.AudioWorkletNode === undefined)) {\n                  _context.next = 7;\n                  break;\n                }\n\n                throw new Error(ERROR_MESSAGE);\n\n              case 7:\n                audioBufferSourceNode = new standardizedAudioContext.AudioBufferSourceNode(audioContext, {\n                  buffer: audioBuffer\n                });\n                mediaStreamAudioSourceNode = new standardizedAudioContext.MediaStreamAudioSourceNode(audioContext, {\n                  mediaStream: mediaStream\n                });\n                recorderAudioWorkletNode = recorderAudioWorklet.createRecorderAudioWorkletNode(standardizedAudioContext.AudioWorkletNode, audioContext, {\n                  channelCount: channelCount\n                });\n                return _context.abrupt(\"return\", {\n                  audioBufferSourceNode: audioBufferSourceNode,\n                  encoderId: encoderId,\n                  mediaStreamAudioSourceNode: mediaStreamAudioSourceNode,\n                  port: port,\n                  recorderAudioWorkletNode: recorderAudioWorkletNode\n                });\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function createPromisedAudioNodesEncoderIdAndPort(_x, _x2, _x3, _x4, _x5) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    var createWebAudioMediaRecorderFactory = function createWebAudioMediaRecorderFactory(createBlobEvent, createInvalidModificationError, createInvalidStateError, createNotSupportedError) {\n      return function (eventTarget, mediaStream, mimeType) {\n        var _a;\n\n        var sampleRate = (_a = mediaStream.getAudioTracks()[0]) === null || _a === void 0 ? void 0 : _a.getSettings().sampleRate;\n        var audioContext = new standardizedAudioContext.MinimalAudioContext({\n          latencyHint: 'playback',\n          sampleRate: sampleRate\n        });\n        var length = Math.max(1024, Math.ceil(audioContext.baseLatency * audioContext.sampleRate));\n        var audioBuffer = new standardizedAudioContext.AudioBuffer({\n          length: length,\n          sampleRate: audioContext.sampleRate\n        });\n        var bufferedArrayBuffers = [];\n        var promisedAudioWorkletModule = recorderAudioWorklet.addRecorderAudioWorkletModule(function (url) {\n          if (standardizedAudioContext.addAudioWorkletModule === undefined) {\n            throw new Error(ERROR_MESSAGE);\n          }\n\n          return standardizedAudioContext.addAudioWorkletModule(audioContext, url);\n        });\n        var abortRecording = null;\n        var intervalId = null;\n        var promisedAudioNodesAndEncoderId = null;\n        var promisedPartialRecording = null;\n        var isAudioContextRunning = true;\n\n        var dispatchDataAvailableEvent = function dispatchDataAvailableEvent(arrayBuffers) {\n          eventTarget.dispatchEvent(createBlobEvent('dataavailable', {\n            data: new Blob(arrayBuffers, {\n              type: mimeType\n            })\n          }));\n        };\n\n        var requestNextPartialRecording = /*#__PURE__*/function () {\n          var _ref2 = _asyncToGenerator__default[\"default\"]( /*#__PURE__*/_regeneratorRuntime__default[\"default\"].mark(function _callee2(encoderId, timeslice) {\n            var arrayBuffers;\n            return _regeneratorRuntime__default[\"default\"].wrap(function _callee2$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    _context2.next = 2;\n                    return mediaEncoderHost.encode(encoderId, timeslice);\n\n                  case 2:\n                    arrayBuffers = _context2.sent;\n\n                    if (promisedAudioNodesAndEncoderId === null) {\n                      bufferedArrayBuffers.push.apply(bufferedArrayBuffers, _toConsumableArray__default[\"default\"](arrayBuffers));\n                    } else {\n                      dispatchDataAvailableEvent(arrayBuffers);\n                      promisedPartialRecording = requestNextPartialRecording(encoderId, timeslice);\n                    }\n\n                  case 4:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, _callee2);\n          }));\n\n          return function requestNextPartialRecording(_x6, _x7) {\n            return _ref2.apply(this, arguments);\n          };\n        }();\n\n        var _resume = function resume() {\n          isAudioContextRunning = true;\n          return audioContext.resume();\n        };\n\n        var stop = function stop() {\n          if (promisedAudioNodesAndEncoderId === null) {\n            return;\n          }\n\n          if (abortRecording !== null) {\n            mediaStream.removeEventListener('addtrack', abortRecording);\n            mediaStream.removeEventListener('removetrack', abortRecording);\n          }\n\n          if (intervalId !== null) {\n            clearTimeout(intervalId);\n          }\n\n          promisedAudioNodesAndEncoderId.then( /*#__PURE__*/function () {\n            var _ref4 = _asyncToGenerator__default[\"default\"]( /*#__PURE__*/_regeneratorRuntime__default[\"default\"].mark(function _callee3(_ref3) {\n              var constantSourceNode, encoderId, mediaStreamAudioSourceNode, recorderAudioWorkletNode, arrayBuffers;\n              return _regeneratorRuntime__default[\"default\"].wrap(function _callee3$(_context3) {\n                while (1) {\n                  switch (_context3.prev = _context3.next) {\n                    case 0:\n                      constantSourceNode = _ref3.constantSourceNode, encoderId = _ref3.encoderId, mediaStreamAudioSourceNode = _ref3.mediaStreamAudioSourceNode, recorderAudioWorkletNode = _ref3.recorderAudioWorkletNode;\n\n                      if (promisedPartialRecording !== null) {\n                        promisedPartialRecording[\"catch\"](function () {\n                          /* @todo Only catch the errors caused by a duplicate call to encode. */\n                        });\n                        promisedPartialRecording = null;\n                      }\n\n                      _context3.next = 4;\n                      return recorderAudioWorkletNode.stop();\n\n                    case 4:\n                      mediaStreamAudioSourceNode.disconnect(recorderAudioWorkletNode);\n                      constantSourceNode.stop();\n                      _context3.next = 8;\n                      return mediaEncoderHost.encode(encoderId, null);\n\n                    case 8:\n                      arrayBuffers = _context3.sent;\n\n                      if (!(promisedAudioNodesAndEncoderId === null)) {\n                        _context3.next = 12;\n                        break;\n                      }\n\n                      _context3.next = 12;\n                      return suspend();\n\n                    case 12:\n                      dispatchDataAvailableEvent([].concat(bufferedArrayBuffers, _toConsumableArray__default[\"default\"](arrayBuffers)));\n                      bufferedArrayBuffers.length = 0;\n                      eventTarget.dispatchEvent(new Event('stop'));\n\n                    case 15:\n                    case \"end\":\n                      return _context3.stop();\n                  }\n                }\n              }, _callee3);\n            }));\n\n            return function (_x8) {\n              return _ref4.apply(this, arguments);\n            };\n          }());\n          promisedAudioNodesAndEncoderId = null;\n        };\n\n        var suspend = function suspend() {\n          isAudioContextRunning = false;\n          return audioContext.suspend();\n        };\n\n        suspend();\n        return {\n          get mimeType() {\n            return mimeType;\n          },\n\n          get state() {\n            return promisedAudioNodesAndEncoderId === null ? 'inactive' : isAudioContextRunning ? 'recording' : 'paused';\n          },\n\n          pause: function pause() {\n            if (promisedAudioNodesAndEncoderId === null) {\n              throw createInvalidStateError();\n            }\n\n            if (isAudioContextRunning) {\n              suspend();\n              eventTarget.dispatchEvent(new Event('pause'));\n            }\n          },\n          resume: function resume() {\n            if (promisedAudioNodesAndEncoderId === null) {\n              throw createInvalidStateError();\n            }\n\n            if (!isAudioContextRunning) {\n              _resume();\n\n              eventTarget.dispatchEvent(new Event('resume'));\n            }\n          },\n          start: function start(timeslice) {\n            var _a;\n\n            if (promisedAudioNodesAndEncoderId !== null) {\n              throw createInvalidStateError();\n            }\n\n            if (mediaStream.getVideoTracks().length > 0) {\n              throw createNotSupportedError();\n            }\n\n            eventTarget.dispatchEvent(new Event('start'));\n            var audioTracks = mediaStream.getAudioTracks(); // @todo TypeScript v4.4.2 removed the channelCount property from the MediaTrackSettings interface.\n\n            var channelCount = audioTracks.length === 0 ? 2 : (_a = audioTracks[0].getSettings().channelCount) !== null && _a !== void 0 ? _a : 2;\n            promisedAudioNodesAndEncoderId = Promise.all([_resume(), promisedAudioWorkletModule.then(function () {\n              return createPromisedAudioNodesEncoderIdAndPort(audioBuffer, audioContext, channelCount, mediaStream, mimeType);\n            })]).then( /*#__PURE__*/function () {\n              var _ref6 = _asyncToGenerator__default[\"default\"]( /*#__PURE__*/_regeneratorRuntime__default[\"default\"].mark(function _callee4(_ref5) {\n                var _ref7, _ref7$, audioBufferSourceNode, encoderId, mediaStreamAudioSourceNode, port, recorderAudioWorkletNode, constantSourceNode;\n\n                return _regeneratorRuntime__default[\"default\"].wrap(function _callee4$(_context4) {\n                  while (1) {\n                    switch (_context4.prev = _context4.next) {\n                      case 0:\n                        _ref7 = _slicedToArray__default[\"default\"](_ref5, 2), _ref7$ = _ref7[1], audioBufferSourceNode = _ref7$.audioBufferSourceNode, encoderId = _ref7$.encoderId, mediaStreamAudioSourceNode = _ref7$.mediaStreamAudioSourceNode, port = _ref7$.port, recorderAudioWorkletNode = _ref7$.recorderAudioWorkletNode;\n                        mediaStreamAudioSourceNode.connect(recorderAudioWorkletNode);\n                        _context4.next = 4;\n                        return new Promise(function (resolve) {\n                          audioBufferSourceNode.onended = resolve;\n                          audioBufferSourceNode.connect(recorderAudioWorkletNode);\n                          audioBufferSourceNode.start(audioContext.currentTime + length / audioContext.sampleRate);\n                        });\n\n                      case 4:\n                        audioBufferSourceNode.disconnect(recorderAudioWorkletNode); // Bug #17: Safari does throttle the processing on hidden tabs if there is no active audio output.\n\n                        constantSourceNode = new standardizedAudioContext.ConstantSourceNode(audioContext, {\n                          offset: 0\n                        });\n\n                        constantSourceNode.onended = function () {\n                          return constantSourceNode.disconnect();\n                        };\n\n                        constantSourceNode.connect(audioContext.destination);\n                        constantSourceNode.start();\n                        _context4.next = 11;\n                        return recorderAudioWorkletNode.record(port);\n\n                      case 11:\n                        if (timeslice !== undefined) {\n                          promisedPartialRecording = requestNextPartialRecording(encoderId, timeslice);\n                        }\n\n                        return _context4.abrupt(\"return\", {\n                          constantSourceNode: constantSourceNode,\n                          encoderId: encoderId,\n                          mediaStreamAudioSourceNode: mediaStreamAudioSourceNode,\n                          recorderAudioWorkletNode: recorderAudioWorkletNode\n                        });\n\n                      case 13:\n                      case \"end\":\n                        return _context4.stop();\n                    }\n                  }\n                }, _callee4);\n              }));\n\n              return function (_x9) {\n                return _ref6.apply(this, arguments);\n              };\n            }());\n            var tracks = mediaStream.getTracks();\n\n            abortRecording = function abortRecording() {\n              stop();\n              eventTarget.dispatchEvent(new ErrorEvent('error', {\n                error: createInvalidModificationError()\n              }));\n            };\n\n            mediaStream.addEventListener('addtrack', abortRecording);\n            mediaStream.addEventListener('removetrack', abortRecording);\n            intervalId = setInterval(function () {\n              var currentTracks = mediaStream.getTracks();\n\n              if ((currentTracks.length !== tracks.length || currentTracks.some(function (track, index) {\n                return track !== tracks[index];\n              })) && abortRecording !== null) {\n                abortRecording();\n              }\n            }, 1000);\n          },\n          stop: stop\n        };\n      };\n    };\n\n    var createWebmPcmMediaRecorderFactory = function createWebmPcmMediaRecorderFactory(createBlobEvent, createInvalidModificationError, createNotSupportedError, decodeWebMChunk, readVariableSizeInteger) {\n      return function (eventTarget, nativeMediaRecorderConstructor, mediaStream, mimeType) {\n        var audioTracks = mediaStream.getAudioTracks();\n        var bufferedArrayBuffers = []; // @todo TypeScript v4.4.2 removed the channelCount property from the MediaTrackSettings interface.\n\n        var channelCount = audioTracks.length === 0 ? undefined : audioTracks[0].getSettings().channelCount;\n        var nativeMediaRecorder = new nativeMediaRecorderConstructor(mediaStream, {\n          mimeType: 'audio/webm;codecs=pcm'\n        });\n        var sampleRate = audioTracks.length === 0 ? undefined : audioTracks[0].getSettings().sampleRate;\n        var promisedPartialRecording = null;\n\n        var stopRecording = function stopRecording() {}; // tslint:disable-line:no-empty\n\n\n        var dispatchDataAvailableEvent = function dispatchDataAvailableEvent(arrayBuffers) {\n          eventTarget.dispatchEvent(createBlobEvent('dataavailable', {\n            data: new Blob(arrayBuffers, {\n              type: mimeType\n            })\n          }));\n        };\n\n        var requestNextPartialRecording = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator__default[\"default\"]( /*#__PURE__*/_regeneratorRuntime__default[\"default\"].mark(function _callee(encoderId, timeslice) {\n            var arrayBuffers;\n            return _regeneratorRuntime__default[\"default\"].wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.next = 2;\n                    return mediaEncoderHost.encode(encoderId, timeslice);\n\n                  case 2:\n                    arrayBuffers = _context.sent;\n\n                    if (nativeMediaRecorder.state === 'inactive') {\n                      bufferedArrayBuffers.push.apply(bufferedArrayBuffers, _toConsumableArray__default[\"default\"](arrayBuffers));\n                    } else {\n                      dispatchDataAvailableEvent(arrayBuffers);\n                      promisedPartialRecording = requestNextPartialRecording(encoderId, timeslice);\n                    }\n\n                  case 4:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee);\n          }));\n\n          return function requestNextPartialRecording(_x, _x2) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n\n        var stop = function stop() {\n          if (nativeMediaRecorder.state === 'inactive') {\n            return;\n          }\n\n          if (promisedPartialRecording !== null) {\n            promisedPartialRecording[\"catch\"](function () {\n              /* @todo Only catch the errors caused by a duplicate call to encode. */\n            });\n            promisedPartialRecording = null;\n          }\n\n          stopRecording();\n\n          stopRecording = function stopRecording() {}; // tslint:disable-line:no-empty\n\n\n          nativeMediaRecorder.stop();\n        };\n\n        nativeMediaRecorder.addEventListener('error', function () {\n          stop(); // Bug #3 & #4: Chrome throws an error event without any error.\n\n          eventTarget.dispatchEvent(new ErrorEvent('error', {\n            error: createInvalidModificationError()\n          }));\n        });\n        nativeMediaRecorder.addEventListener('start', function () {\n          return eventTarget.dispatchEvent(new Event('start'));\n        });\n        return {\n          get mimeType() {\n            return mimeType;\n          },\n\n          get state() {\n            return nativeMediaRecorder.state;\n          },\n\n          pause: function pause() {\n            return nativeMediaRecorder.pause();\n          },\n          resume: function resume() {\n            return nativeMediaRecorder.resume();\n          },\n          start: function start(timeslice) {\n            /*\n             * Bug #6: Chrome will emit a blob without any data when asked to encode a MediaStream with a video track into an audio\n             * codec.\n             */\n            if (mediaStream.getVideoTracks().length > 0) {\n              throw createNotSupportedError();\n            }\n\n            if (nativeMediaRecorder.state === 'inactive') {\n              if (sampleRate === undefined) {\n                throw new Error('The sampleRate is not defined.');\n              }\n\n              var isRecording = false;\n              var isStopped = false; // Bug #9: Chrome sometimes fires more than one dataavailable event while being inactive.\n\n              var pendingInvocations = 0;\n              var promisedDataViewElementTypeEncoderIdAndPort = mediaEncoderHost.instantiate(mimeType, sampleRate);\n\n              stopRecording = function stopRecording() {\n                isStopped = true;\n              };\n\n              var removeEventListener = subscribableThings.on(nativeMediaRecorder, 'dataavailable')(function (_ref2) {\n                var data = _ref2.data;\n                pendingInvocations += 1;\n                promisedDataViewElementTypeEncoderIdAndPort = promisedDataViewElementTypeEncoderIdAndPort.then( /*#__PURE__*/function () {\n                  var _ref4 = _asyncToGenerator__default[\"default\"]( /*#__PURE__*/_regeneratorRuntime__default[\"default\"].mark(function _callee2(_ref3) {\n                    var _ref3$dataView, dataView, _ref3$elementType, elementType, encoderId, port, arrayBuffer, currentDataView, lengthAndValue, value, _decodeWebMChunk, currentElementType, offset, contents, remainingDataView;\n\n                    return _regeneratorRuntime__default[\"default\"].wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            _ref3$dataView = _ref3.dataView, dataView = _ref3$dataView === void 0 ? null : _ref3$dataView, _ref3$elementType = _ref3.elementType, elementType = _ref3$elementType === void 0 ? null : _ref3$elementType, encoderId = _ref3.encoderId, port = _ref3.port;\n                            _context2.next = 3;\n                            return data.arrayBuffer();\n\n                          case 3:\n                            arrayBuffer = _context2.sent;\n                            pendingInvocations -= 1;\n                            currentDataView = dataView === null ? new multiBufferDataView.MultiBufferDataView([arrayBuffer]) : new multiBufferDataView.MultiBufferDataView([].concat(_toConsumableArray__default[\"default\"](dataView.buffers), [arrayBuffer]), dataView.byteOffset);\n\n                            if (!(!isRecording && nativeMediaRecorder.state === 'recording' && !isStopped)) {\n                              _context2.next = 14;\n                              break;\n                            }\n\n                            lengthAndValue = readVariableSizeInteger(currentDataView, 0);\n\n                            if (!(lengthAndValue === null)) {\n                              _context2.next = 10;\n                              break;\n                            }\n\n                            return _context2.abrupt(\"return\", {\n                              dataView: currentDataView,\n                              elementType: elementType,\n                              encoderId: encoderId,\n                              port: port\n                            });\n\n                          case 10:\n                            value = lengthAndValue.value;\n\n                            if (!(value !== 172351395)) {\n                              _context2.next = 13;\n                              break;\n                            }\n\n                            return _context2.abrupt(\"return\", {\n                              dataView: dataView,\n                              elementType: elementType,\n                              encoderId: encoderId,\n                              port: port\n                            });\n\n                          case 13:\n                            isRecording = true;\n\n                          case 14:\n                            _decodeWebMChunk = decodeWebMChunk(currentDataView, elementType, channelCount), currentElementType = _decodeWebMChunk.currentElementType, offset = _decodeWebMChunk.offset, contents = _decodeWebMChunk.contents;\n                            remainingDataView = offset < currentDataView.byteLength ? new multiBufferDataView.MultiBufferDataView(currentDataView.buffers, currentDataView.byteOffset + offset) : null;\n                            contents.forEach(function (content) {\n                              return port.postMessage(content, content.map(function (_ref5) {\n                                var buffer = _ref5.buffer;\n                                return buffer;\n                              }));\n                            });\n\n                            if (pendingInvocations === 0 && (nativeMediaRecorder.state === 'inactive' || isStopped)) {\n                              mediaEncoderHost.encode(encoderId, null).then(function (arrayBuffers) {\n                                dispatchDataAvailableEvent([].concat(bufferedArrayBuffers, _toConsumableArray__default[\"default\"](arrayBuffers)));\n                                bufferedArrayBuffers.length = 0;\n                                eventTarget.dispatchEvent(new Event('stop'));\n                              });\n                              port.postMessage([]);\n                              port.close();\n                              removeEventListener();\n                            }\n\n                            return _context2.abrupt(\"return\", {\n                              dataView: remainingDataView,\n                              elementType: currentElementType,\n                              encoderId: encoderId,\n                              port: port\n                            });\n\n                          case 19:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2);\n                  }));\n\n                  return function (_x3) {\n                    return _ref4.apply(this, arguments);\n                  };\n                }());\n              });\n\n              if (timeslice !== undefined) {\n                promisedDataViewElementTypeEncoderIdAndPort.then(function (_ref6) {\n                  var encoderId = _ref6.encoderId;\n                  return promisedPartialRecording = requestNextPartialRecording(encoderId, timeslice);\n                });\n              }\n            }\n\n            nativeMediaRecorder.start(100);\n          },\n          stop: stop\n        };\n      };\n    };\n\n    var createWindow = function createWindow() {\n      return typeof window === 'undefined' ? null : window;\n    };\n\n    var readVariableSizeIntegerLength = function readVariableSizeIntegerLength(dataView, offset) {\n      if (offset >= dataView.byteLength) {\n        return null;\n      }\n\n      var _byte = dataView.getUint8(offset);\n\n      if (_byte > 127) {\n        return 1;\n      }\n\n      if (_byte > 63) {\n        return 2;\n      }\n\n      if (_byte > 31) {\n        return 3;\n      }\n\n      if (_byte > 15) {\n        return 4;\n      }\n\n      if (_byte > 7) {\n        return 5;\n      }\n\n      if (_byte > 3) {\n        return 6;\n      }\n\n      if (_byte > 1) {\n        return 7;\n      }\n\n      if (_byte > 0) {\n        return 8;\n      }\n\n      var length = readVariableSizeIntegerLength(dataView, offset + 1);\n      return length === null ? null : length + 8;\n    };\n\n    var wrapEventListener = function wrapEventListener(target, eventListener) {\n      return function (event) {\n        var descriptor = {\n          value: target\n        };\n        Object.defineProperties(event, {\n          currentTarget: descriptor,\n          target: descriptor\n        });\n\n        if (typeof eventListener === 'function') {\n          return eventListener.call(target, event);\n        }\n\n        return eventListener.handleEvent.call(target, event);\n      };\n    };\n\n    var encoderRegexes = [];\n    var window$1 = createWindow();\n    var nativeBlobEventConstructor = createNativeBlobEventConstructor(window$1);\n    var createBlobEvent = createBlobEventFactory(nativeBlobEventConstructor);\n    var createWebAudioMediaRecorder = createWebAudioMediaRecorderFactory(createBlobEvent, createInvalidModificationError, createInvalidStateError, createNotSupportedError);\n    var readVariableSizeInteger = createReadVariableSizeInteger(readVariableSizeIntegerLength);\n    var readElementContent = createReadElementContent(readVariableSizeInteger);\n    var readElementType = createReadElementType(readVariableSizeInteger);\n    var decodeWebMChunk = createDecodeWebMChunk(readElementContent, readElementType);\n    var createWebmPcmMediaRecorder = createWebmPcmMediaRecorderFactory(createBlobEvent, createInvalidModificationError, createNotSupportedError, decodeWebMChunk, readVariableSizeInteger);\n    var createEventTarget = createEventTargetFactory(window$1);\n    var nativeMediaRecorderConstructor = createNativeMediaRecorderConstructor(window$1);\n    var createNativeMediaRecorder = createNativeMediaRecorderFactory(createInvalidModificationError, createNotSupportedError);\n    var mediaRecorderConstructor = createMediaRecorderConstructor(createNativeMediaRecorder, createNotSupportedError, createWebAudioMediaRecorder, createWebmPcmMediaRecorder, encoderRegexes, createEventTargetConstructor(createEventTarget, wrapEventListener), nativeMediaRecorderConstructor);\n    var isSupported = function isSupported() {\n      return createIsSupportedPromise(window$1);\n    };\n    var register = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator__default[\"default\"]( /*#__PURE__*/_regeneratorRuntime__default[\"default\"].mark(function _callee(port) {\n        return _regeneratorRuntime__default[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.t0 = encoderRegexes;\n                _context.next = 3;\n                return mediaEncoderHost.register(port);\n\n              case 3:\n                _context.t1 = _context.sent;\n\n                _context.t0.push.call(_context.t0, _context.t1);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function register(_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    exports.MediaRecorder = mediaRecorderConstructor;\n    exports.isSupported = isSupported;\n    exports.register = register;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/extendable-media-recorder/build/es5/bundle.js\n");

/***/ })

};
;