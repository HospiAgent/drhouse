/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/standardized-audio-context";
exports.ids = ["vendor-chunks/standardized-audio-context"];
exports.modules = {

/***/ "(ssr)/./node_modules/standardized-audio-context/build/es5/bundle.js":
/*!*********************************************************************!*\
  !*** ./node_modules/standardized-audio-context/build/es5/bundle.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("(function (global, factory) {\n     true ? factory(exports, __webpack_require__(/*! automation-events */ \"(ssr)/./node_modules/automation-events/build/node/module.js\"), __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ \"(ssr)/./node_modules/@babel/runtime/helpers/slicedToArray.js\"), __webpack_require__(/*! @babel/runtime/helpers/createClass */ \"(ssr)/./node_modules/@babel/runtime/helpers/createClass.js\"), __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \"(ssr)/./node_modules/@babel/runtime/helpers/classCallCheck.js\"), __webpack_require__(/*! @babel/runtime/helpers/typeof */ \"(ssr)/./node_modules/@babel/runtime/helpers/typeof.js\"), __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\"), __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ \"(ssr)/./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js\"), __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ \"(ssr)/./node_modules/@babel/runtime/helpers/getPrototypeOf.js\"), __webpack_require__(/*! @babel/runtime/helpers/inherits */ \"(ssr)/./node_modules/@babel/runtime/helpers/inherits.js\"), __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ \"(ssr)/./node_modules/@babel/runtime/helpers/asyncToGenerator.js\"), __webpack_require__(/*! @babel/runtime/regenerator */ \"(ssr)/./node_modules/@babel/runtime/regenerator/index.js\"), __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ \"(ssr)/./node_modules/@babel/runtime/helpers/toConsumableArray.js\"), __webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ \"(ssr)/./node_modules/@babel/runtime/helpers/objectWithoutProperties.js\")) :\n    0;\n})(this, (function (exports, automationEvents, _slicedToArray, _createClass, _classCallCheck, _typeof, _defineProperty, _possibleConstructorReturn, _getPrototypeOf, _inherits, _asyncToGenerator, _regeneratorRuntime, _toConsumableArray, _objectWithoutProperties) { 'use strict';\n\n    var createAbortError = function createAbortError() {\n      return new DOMException('', 'AbortError');\n    };\n\n    var createAddActiveInputConnectionToAudioNode = function createAddActiveInputConnectionToAudioNode(insertElementInSet) {\n      return function (activeInputs, source, _ref, ignoreDuplicates) {\n        var _ref2 = _slicedToArray(_ref, 3),\n          output = _ref2[0],\n          input = _ref2[1],\n          eventListener = _ref2[2];\n        insertElementInSet(activeInputs[input], [source, output, eventListener], function (activeInputConnection) {\n          return activeInputConnection[0] === source && activeInputConnection[1] === output;\n        }, ignoreDuplicates);\n      };\n    };\n\n    var createAddAudioNodeConnections = function createAddAudioNodeConnections(audioNodeConnectionsStore) {\n      return function (audioNode, audioNodeRenderer, nativeAudioNode) {\n        var activeInputs = [];\n        for (var i = 0; i < nativeAudioNode.numberOfInputs; i += 1) {\n          activeInputs.push(new Set());\n        }\n        audioNodeConnectionsStore.set(audioNode, {\n          activeInputs: activeInputs,\n          outputs: new Set(),\n          passiveInputs: new WeakMap(),\n          renderer: audioNodeRenderer\n        });\n      };\n    };\n\n    var createAddAudioParamConnections = function createAddAudioParamConnections(audioParamConnectionsStore) {\n      return function (audioParam, audioParamRenderer) {\n        audioParamConnectionsStore.set(audioParam, {\n          activeInputs: new Set(),\n          passiveInputs: new WeakMap(),\n          renderer: audioParamRenderer\n        });\n      };\n    };\n\n    var ACTIVE_AUDIO_NODE_STORE = new WeakSet();\n    var AUDIO_NODE_CONNECTIONS_STORE = new WeakMap();\n    var AUDIO_NODE_STORE = new WeakMap();\n    var AUDIO_PARAM_CONNECTIONS_STORE = new WeakMap();\n    var AUDIO_PARAM_STORE = new WeakMap();\n    var CONTEXT_STORE = new WeakMap();\n    var EVENT_LISTENERS = new WeakMap();\n    var CYCLE_COUNTERS = new WeakMap();\n    // This clunky name is borrowed from the spec. :-)\n    var NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS = new WeakMap();\n    var NODE_TO_PROCESSOR_MAPS = new WeakMap();\n\n    var handler = {\n      construct: function construct() {\n        return handler;\n      }\n    };\n    var isConstructible = function isConstructible(constructible) {\n      try {\n        var proxy = new Proxy(constructible, handler);\n        new proxy(); // tslint:disable-line:no-unused-expression\n      } catch (_unused) {\n        return false;\n      }\n      return true;\n    };\n\n    /*\n     * This massive regex tries to cover all the following cases.\n     *\n     * import './path';\n     * import defaultImport from './path';\n     * import { namedImport } from './path';\n     * import { namedImport as renamendImport } from './path';\n     * import * as namespaceImport from './path';\n     * import defaultImport, { namedImport } from './path';\n     * import defaultImport, { namedImport as renamendImport } from './path';\n     * import defaultImport, * as namespaceImport from './path';\n     */\n    var IMPORT_STATEMENT_REGEX = /^import(?:(?:[\\s]+[\\w]+|(?:[\\s]+[\\w]+[\\s]*,)?[\\s]*\\{[\\s]*[\\w]+(?:[\\s]+as[\\s]+[\\w]+)?(?:[\\s]*,[\\s]*[\\w]+(?:[\\s]+as[\\s]+[\\w]+)?)*[\\s]*}|(?:[\\s]+[\\w]+[\\s]*,)?[\\s]*\\*[\\s]+as[\\s]+[\\w]+)[\\s]+from)?(?:[\\s]*)(\"([^\"\\\\]|\\\\.)+\"|'([^'\\\\]|\\\\.)+')(?:[\\s]*);?/; // tslint:disable-line:max-line-length\n    var splitImportStatements = function splitImportStatements(source, url) {\n      var importStatements = [];\n      var sourceWithoutImportStatements = source.replace(/^[\\s]+/, '');\n      var result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);\n      while (result !== null) {\n        var unresolvedUrl = result[1].slice(1, -1);\n        var importStatementWithResolvedUrl = result[0].replace(/([\\s]+)?;?$/, '').replace(unresolvedUrl, new URL(unresolvedUrl, url).toString());\n        importStatements.push(importStatementWithResolvedUrl);\n        sourceWithoutImportStatements = sourceWithoutImportStatements.slice(result[0].length).replace(/^[\\s]+/, '');\n        result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);\n      }\n      return [importStatements.join(';'), sourceWithoutImportStatements];\n    };\n\n    var verifyParameterDescriptors = function verifyParameterDescriptors(parameterDescriptors) {\n      if (parameterDescriptors !== undefined && !Array.isArray(parameterDescriptors)) {\n        throw new TypeError('The parameterDescriptors property of given value for processorCtor is not an array.');\n      }\n    };\n    var verifyProcessorCtor = function verifyProcessorCtor(processorCtor) {\n      if (!isConstructible(processorCtor)) {\n        throw new TypeError('The given value for processorCtor should be a constructor.');\n      }\n      if (processorCtor.prototype === null || _typeof(processorCtor.prototype) !== 'object') {\n        throw new TypeError('The given value for processorCtor should have a prototype.');\n      }\n    };\n    var createAddAudioWorkletModule = function createAddAudioWorkletModule(cacheTestResult, createNotSupportedError, evaluateSource, exposeCurrentFrameAndCurrentTime, fetchSource, getNativeContext, getOrCreateBackupOfflineAudioContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, ongoingRequests, resolvedRequests, testAudioWorkletProcessorPostMessageSupport, window) {\n      var index = 0;\n      return function (context, moduleURL) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n          credentials: 'omit'\n        };\n        var resolvedRequestsOfContext = resolvedRequests.get(context);\n        if (resolvedRequestsOfContext !== undefined && resolvedRequestsOfContext.has(moduleURL)) {\n          return Promise.resolve();\n        }\n        var ongoingRequestsOfContext = ongoingRequests.get(context);\n        if (ongoingRequestsOfContext !== undefined) {\n          var promiseOfOngoingRequest = ongoingRequestsOfContext.get(moduleURL);\n          if (promiseOfOngoingRequest !== undefined) {\n            return promiseOfOngoingRequest;\n          }\n        }\n        var nativeContext = getNativeContext(context);\n        // Bug #59: Safari does not implement the audioWorklet property.\n        var promise = nativeContext.audioWorklet === undefined ? fetchSource(moduleURL).then(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n            source = _ref2[0],\n            absoluteUrl = _ref2[1];\n          var _splitImportStatement = splitImportStatements(source, absoluteUrl),\n            _splitImportStatement2 = _slicedToArray(_splitImportStatement, 2),\n            importStatements = _splitImportStatement2[0],\n            sourceWithoutImportStatements = _splitImportStatement2[1];\n          /*\n           * This is the unminified version of the code used below:\n           *\n           * ```js\n           * ${ importStatements };\n           * ((a, b) => {\n           *     (a[b] = a[b] || [ ]).push(\n           *         (AudioWorkletProcessor, global, registerProcessor, sampleRate, self, window) => {\n           *             ${ sourceWithoutImportStatements }\n           *         }\n           *     );\n           * })(window, '_AWGS');\n           * ```\n           */\n          // tslint:disable-next-line:max-line-length\n          var wrappedSource = \"\".concat(importStatements, \";((a,b)=>{(a[b]=a[b]||[]).push((AudioWorkletProcessor,global,registerProcessor,sampleRate,self,window)=>{\").concat(sourceWithoutImportStatements, \"\\n})})(window,'_AWGS')\");\n          // @todo Evaluating the given source code is a possible security problem.\n          return evaluateSource(wrappedSource);\n        }).then(function () {\n          var evaluateAudioWorkletGlobalScope = window._AWGS.pop();\n          if (evaluateAudioWorkletGlobalScope === undefined) {\n            // Bug #182 Chrome and Edge do throw an instance of a SyntaxError instead of a DOMException.\n            throw new SyntaxError();\n          }\n          exposeCurrentFrameAndCurrentTime(nativeContext.currentTime, nativeContext.sampleRate, function () {\n            return evaluateAudioWorkletGlobalScope(/*#__PURE__*/_createClass(function AudioWorkletProcessor() {\n              _classCallCheck(this, AudioWorkletProcessor);\n            }), undefined, function (name, processorCtor) {\n              if (name.trim() === '') {\n                throw createNotSupportedError();\n              }\n              var nodeNameToProcessorConstructorMap = NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);\n              if (nodeNameToProcessorConstructorMap !== undefined) {\n                if (nodeNameToProcessorConstructorMap.has(name)) {\n                  throw createNotSupportedError();\n                }\n                verifyProcessorCtor(processorCtor);\n                verifyParameterDescriptors(processorCtor.parameterDescriptors);\n                nodeNameToProcessorConstructorMap.set(name, processorCtor);\n              } else {\n                verifyProcessorCtor(processorCtor);\n                verifyParameterDescriptors(processorCtor.parameterDescriptors);\n                NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.set(nativeContext, new Map([[name, processorCtor]]));\n              }\n            }, nativeContext.sampleRate, undefined, undefined);\n          });\n        }) : Promise.all([fetchSource(moduleURL), Promise.resolve(cacheTestResult(testAudioWorkletProcessorPostMessageSupport, testAudioWorkletProcessorPostMessageSupport))]).then(function (_ref3) {\n          var _ref4 = _slicedToArray(_ref3, 2),\n            _ref4$ = _slicedToArray(_ref4[0], 2),\n            source = _ref4$[0],\n            absoluteUrl = _ref4$[1],\n            isSupportingPostMessage = _ref4[1];\n          var currentIndex = index + 1;\n          index = currentIndex;\n          var _splitImportStatement3 = splitImportStatements(source, absoluteUrl),\n            _splitImportStatement4 = _slicedToArray(_splitImportStatement3, 2),\n            importStatements = _splitImportStatement4[0],\n            sourceWithoutImportStatements = _splitImportStatement4[1];\n          /*\n           * Bug #179: Firefox does not allow to transfer any buffer which has been passed to the process() method as an argument.\n           *\n           * This is the unminified version of the code used below.\n           *\n           * ```js\n           * class extends AudioWorkletProcessor {\n           *\n           *     __buffers = new WeakSet();\n           *\n           *     constructor () {\n           *         super();\n           *\n           *         this.port.postMessage = ((postMessage) => {\n           *             return (message, transferables) => {\n           *                 const filteredTransferables = (transferables)\n           *                     ? transferables.filter((transferable) => !this.__buffers.has(transferable))\n           *                     : transferables;\n           *\n           *                 return postMessage.call(this.port, message, filteredTransferables);\n           *              };\n           *         })(this.port.postMessage);\n           *     }\n           * }\n           * ```\n           */\n          var patchedAudioWorkletProcessor = isSupportingPostMessage ? 'AudioWorkletProcessor' : 'class extends AudioWorkletProcessor {__b=new WeakSet();constructor(){super();(p=>p.postMessage=(q=>(m,t)=>q.call(p,m,t?t.filter(u=>!this.__b.has(u)):t))(p.postMessage))(this.port)}}';\n          /*\n           * Bug #170: Chrome and Edge do call process() with an array with empty channelData for each input if no input is connected.\n           *\n           * Bug #179: Firefox does not allow to transfer any buffer which has been passed to the process() method as an argument.\n           *\n           * Bug #190: Safari doesn't throw an error when loading an unparsable module.\n           *\n           * This is the unminified version of the code used below:\n           *\n           * ```js\n           * `${ importStatements };\n           * ((AudioWorkletProcessor, registerProcessor) => {${ sourceWithoutImportStatements }\n           * })(\n           *     ${ patchedAudioWorkletProcessor },\n           *     (name, processorCtor) => registerProcessor(name, class extends processorCtor {\n           *\n           *         __collectBuffers = (array) => {\n           *             array.forEach((element) => this.__buffers.add(element.buffer));\n           *         };\n           *\n           *         process (inputs, outputs, parameters) {\n           *             inputs.forEach(this.__collectBuffers);\n           *             outputs.forEach(this.__collectBuffers);\n           *             this.__collectBuffers(Object.values(parameters));\n           *\n           *             return super.process(\n           *                 (inputs.map((input) => input.some((channelData) => channelData.length === 0)) ? [ ] : input),\n           *                 outputs,\n           *                 parameters\n           *             );\n           *         }\n           *\n           *     })\n           * );\n           *\n           * registerProcessor(`__sac${currentIndex}`, class extends AudioWorkletProcessor{\n           *\n           *     process () {\n           *         return false;\n           *     }\n           *\n           * })`\n           * ```\n           */\n          var memberDefinition = isSupportingPostMessage ? '' : '__c = (a) => a.forEach(e=>this.__b.add(e.buffer));';\n          var bufferRegistration = isSupportingPostMessage ? '' : 'i.forEach(this.__c);o.forEach(this.__c);this.__c(Object.values(p));';\n          var wrappedSource = \"\".concat(importStatements, \";((AudioWorkletProcessor,registerProcessor)=>{\").concat(sourceWithoutImportStatements, \"\\n})(\").concat(patchedAudioWorkletProcessor, \",(n,p)=>registerProcessor(n,class extends p{\").concat(memberDefinition, \"process(i,o,p){\").concat(bufferRegistration, \"return super.process(i.map(j=>j.some(k=>k.length===0)?[]:j),o,p)}}));registerProcessor('__sac\").concat(currentIndex, \"',class extends AudioWorkletProcessor{process(){return !1}})\");\n          var blob = new Blob([wrappedSource], {\n            type: 'application/javascript; charset=utf-8'\n          });\n          var url = URL.createObjectURL(blob);\n          return nativeContext.audioWorklet.addModule(url, options).then(function () {\n            if (isNativeOfflineAudioContext(nativeContext)) {\n              return nativeContext;\n            }\n            // Bug #186: Chrome and Edge do not allow to create an AudioWorkletNode on a closed AudioContext.\n            var backupOfflineAudioContext = getOrCreateBackupOfflineAudioContext(nativeContext);\n            return backupOfflineAudioContext.audioWorklet.addModule(url, options).then(function () {\n              return backupOfflineAudioContext;\n            });\n          }).then(function (nativeContextOrBackupOfflineAudioContext) {\n            if (nativeAudioWorkletNodeConstructor === null) {\n              throw new SyntaxError();\n            }\n            try {\n              // Bug #190: Safari doesn't throw an error when loading an unparsable module.\n              new nativeAudioWorkletNodeConstructor(nativeContextOrBackupOfflineAudioContext, \"__sac\".concat(currentIndex)); // tslint:disable-line:no-unused-expression\n            } catch (_unused) {\n              throw new SyntaxError();\n            }\n          })[\"finally\"](function () {\n            return URL.revokeObjectURL(url);\n          });\n        });\n        if (ongoingRequestsOfContext === undefined) {\n          ongoingRequests.set(context, new Map([[moduleURL, promise]]));\n        } else {\n          ongoingRequestsOfContext.set(moduleURL, promise);\n        }\n        promise.then(function () {\n          var updatedResolvedRequestsOfContext = resolvedRequests.get(context);\n          if (updatedResolvedRequestsOfContext === undefined) {\n            resolvedRequests.set(context, new Set([moduleURL]));\n          } else {\n            updatedResolvedRequestsOfContext.add(moduleURL);\n          }\n        })[\"finally\"](function () {\n          var updatedOngoingRequestsOfContext = ongoingRequests.get(context);\n          if (updatedOngoingRequestsOfContext !== undefined) {\n            updatedOngoingRequestsOfContext[\"delete\"](moduleURL);\n          }\n        });\n        return promise;\n      };\n    };\n\n    var getValueForKey = function getValueForKey(map, key) {\n      var value = map.get(key);\n      if (value === undefined) {\n        throw new Error('A value with the given key could not be found.');\n      }\n      return value;\n    };\n\n    var pickElementFromSet = function pickElementFromSet(set, predicate) {\n      var matchingElements = Array.from(set).filter(predicate);\n      if (matchingElements.length > 1) {\n        throw Error('More than one element was found.');\n      }\n      if (matchingElements.length === 0) {\n        throw Error('No element was found.');\n      }\n      var _matchingElements = _slicedToArray(matchingElements, 1),\n        matchingElement = _matchingElements[0];\n      set[\"delete\"](matchingElement);\n      return matchingElement;\n    };\n\n    var deletePassiveInputConnectionToAudioNode = function deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input) {\n      var passiveInputConnections = getValueForKey(passiveInputs, source);\n      var matchingConnection = pickElementFromSet(passiveInputConnections, function (passiveInputConnection) {\n        return passiveInputConnection[0] === output && passiveInputConnection[1] === input;\n      });\n      if (passiveInputConnections.size === 0) {\n        passiveInputs[\"delete\"](source);\n      }\n      return matchingConnection;\n    };\n\n    var getEventListenersOfAudioNode = function getEventListenersOfAudioNode(audioNode) {\n      return getValueForKey(EVENT_LISTENERS, audioNode);\n    };\n\n    var setInternalStateToActive = function setInternalStateToActive(audioNode) {\n      if (ACTIVE_AUDIO_NODE_STORE.has(audioNode)) {\n        throw new Error('The AudioNode is already stored.');\n      }\n      ACTIVE_AUDIO_NODE_STORE.add(audioNode);\n      getEventListenersOfAudioNode(audioNode).forEach(function (eventListener) {\n        return eventListener(true);\n      });\n    };\n\n    var isAudioWorkletNode = function isAudioWorkletNode(audioNode) {\n      return 'port' in audioNode;\n    };\n\n    var setInternalStateToPassive = function setInternalStateToPassive(audioNode) {\n      if (!ACTIVE_AUDIO_NODE_STORE.has(audioNode)) {\n        throw new Error('The AudioNode is not stored.');\n      }\n      ACTIVE_AUDIO_NODE_STORE[\"delete\"](audioNode);\n      getEventListenersOfAudioNode(audioNode).forEach(function (eventListener) {\n        return eventListener(false);\n      });\n    };\n\n    // Set the internalState of the audioNode to 'passive' if it is not an AudioWorkletNode and if it has no 'active' input connections.\n    var setInternalStateToPassiveWhenNecessary = function setInternalStateToPassiveWhenNecessary(audioNode, activeInputs) {\n      if (!isAudioWorkletNode(audioNode) && activeInputs.every(function (connections) {\n        return connections.size === 0;\n      })) {\n        setInternalStateToPassive(audioNode);\n      }\n    };\n\n    var createAddConnectionToAudioNode = function createAddConnectionToAudioNode(addActiveInputConnectionToAudioNode, addPassiveInputConnectionToAudioNode, connectNativeAudioNodeToNativeAudioNode, deleteActiveInputConnectionToAudioNode, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getAudioNodeTailTime, getEventListenersOfAudioNode, getNativeAudioNode, insertElementInSet, isActiveAudioNode, isPartOfACycle, isPassiveAudioNode) {\n      var tailTimeTimeoutIds = new WeakMap();\n      return function (source, destination, output, input, isOffline) {\n        var _getAudioNodeConnecti = getAudioNodeConnections(destination),\n          activeInputs = _getAudioNodeConnecti.activeInputs,\n          passiveInputs = _getAudioNodeConnecti.passiveInputs;\n        var _getAudioNodeConnecti2 = getAudioNodeConnections(source),\n          outputs = _getAudioNodeConnecti2.outputs;\n        var eventListeners = getEventListenersOfAudioNode(source);\n        var eventListener = function eventListener(isActive) {\n          var nativeDestinationAudioNode = getNativeAudioNode(destination);\n          var nativeSourceAudioNode = getNativeAudioNode(source);\n          if (isActive) {\n            var partialConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);\n            addActiveInputConnectionToAudioNode(activeInputs, source, partialConnection, false);\n            if (!isOffline && !isPartOfACycle(source)) {\n              connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);\n            }\n            if (isPassiveAudioNode(destination)) {\n              setInternalStateToActive(destination);\n            }\n          } else {\n            var _partialConnection = deleteActiveInputConnectionToAudioNode(activeInputs, source, output, input);\n            addPassiveInputConnectionToAudioNode(passiveInputs, input, _partialConnection, false);\n            if (!isOffline && !isPartOfACycle(source)) {\n              disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);\n            }\n            var tailTime = getAudioNodeTailTime(destination);\n            if (tailTime === 0) {\n              if (isActiveAudioNode(destination)) {\n                setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n              }\n            } else {\n              var tailTimeTimeoutId = tailTimeTimeoutIds.get(destination);\n              if (tailTimeTimeoutId !== undefined) {\n                clearTimeout(tailTimeTimeoutId);\n              }\n              tailTimeTimeoutIds.set(destination, setTimeout(function () {\n                if (isActiveAudioNode(destination)) {\n                  setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n                }\n              }, tailTime * 1000));\n            }\n          }\n        };\n        if (insertElementInSet(outputs, [destination, output, input], function (outputConnection) {\n          return outputConnection[0] === destination && outputConnection[1] === output && outputConnection[2] === input;\n        }, true)) {\n          eventListeners.add(eventListener);\n          if (isActiveAudioNode(source)) {\n            addActiveInputConnectionToAudioNode(activeInputs, source, [output, input, eventListener], true);\n          } else {\n            addPassiveInputConnectionToAudioNode(passiveInputs, input, [source, output, eventListener], true);\n          }\n          return true;\n        }\n        return false;\n      };\n    };\n\n    var createAddPassiveInputConnectionToAudioNode = function createAddPassiveInputConnectionToAudioNode(insertElementInSet) {\n      return function (passiveInputs, input, _ref, ignoreDuplicates) {\n        var _ref2 = _slicedToArray(_ref, 3),\n          source = _ref2[0],\n          output = _ref2[1],\n          eventListener = _ref2[2];\n        var passiveInputConnections = passiveInputs.get(source);\n        if (passiveInputConnections === undefined) {\n          passiveInputs.set(source, new Set([[output, input, eventListener]]));\n        } else {\n          insertElementInSet(passiveInputConnections, [output, input, eventListener], function (passiveInputConnection) {\n            return passiveInputConnection[0] === output && passiveInputConnection[1] === input;\n          }, ignoreDuplicates);\n        }\n      };\n    };\n\n    var createAddSilentConnection = function createAddSilentConnection(createNativeGainNode) {\n      return function (nativeContext, nativeAudioScheduledSourceNode) {\n        var nativeGainNode = createNativeGainNode(nativeContext, {\n          channelCount: 1,\n          channelCountMode: 'explicit',\n          channelInterpretation: 'discrete',\n          gain: 0\n        });\n        nativeAudioScheduledSourceNode.connect(nativeGainNode).connect(nativeContext.destination);\n        var _disconnect = function disconnect() {\n          nativeAudioScheduledSourceNode.removeEventListener('ended', _disconnect);\n          nativeAudioScheduledSourceNode.disconnect(nativeGainNode);\n          nativeGainNode.disconnect();\n        };\n        nativeAudioScheduledSourceNode.addEventListener('ended', _disconnect);\n      };\n    };\n\n    var createAddUnrenderedAudioWorkletNode = function createAddUnrenderedAudioWorkletNode(getUnrenderedAudioWorkletNodes) {\n      return function (nativeContext, audioWorkletNode) {\n        getUnrenderedAudioWorkletNodes(nativeContext).add(audioWorkletNode);\n      };\n    };\n\n    function ownKeys$w(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\n    function _objectSpread$w(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$w(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$w(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n    function _callSuper$r(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$r() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n    function _isNativeReflectConstruct$r() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$r = function _isNativeReflectConstruct() { return !!t; })(); }\n    var DEFAULT_OPTIONS$k = {\n      channelCount: 2,\n      channelCountMode: 'max',\n      channelInterpretation: 'speakers',\n      fftSize: 2048,\n      maxDecibels: -30,\n      minDecibels: -100,\n      smoothingTimeConstant: 0.8\n    };\n    var createAnalyserNodeConstructor = function createAnalyserNodeConstructor(audionNodeConstructor, createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext) {\n      return /*#__PURE__*/function (_audionNodeConstructo) {\n        function AnalyserNode(context, options) {\n          var _this;\n          _classCallCheck(this, AnalyserNode);\n          var nativeContext = getNativeContext(context);\n          var mergedOptions = _objectSpread$w(_objectSpread$w({}, DEFAULT_OPTIONS$k), options);\n          var nativeAnalyserNode = createNativeAnalyserNode(nativeContext, mergedOptions);\n          var analyserNodeRenderer = isNativeOfflineAudioContext(nativeContext) ? createAnalyserNodeRenderer() : null;\n          _this = _callSuper$r(this, AnalyserNode, [context, false, nativeAnalyserNode, analyserNodeRenderer]);\n          _this._nativeAnalyserNode = nativeAnalyserNode;\n          return _this;\n        }\n        _inherits(AnalyserNode, _audionNodeConstructo);\n        return _createClass(AnalyserNode, [{\n          key: \"fftSize\",\n          get: function get() {\n            return this._nativeAnalyserNode.fftSize;\n          },\n          set: function set(value) {\n            this._nativeAnalyserNode.fftSize = value;\n          }\n        }, {\n          key: \"frequencyBinCount\",\n          get: function get() {\n            return this._nativeAnalyserNode.frequencyBinCount;\n          }\n        }, {\n          key: \"maxDecibels\",\n          get: function get() {\n            return this._nativeAnalyserNode.maxDecibels;\n          },\n          set: function set(value) {\n            // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n            var maxDecibels = this._nativeAnalyserNode.maxDecibels;\n            this._nativeAnalyserNode.maxDecibels = value;\n            if (!(value > this._nativeAnalyserNode.minDecibels)) {\n              this._nativeAnalyserNode.maxDecibels = maxDecibels;\n              throw createIndexSizeError();\n            }\n          }\n        }, {\n          key: \"minDecibels\",\n          get: function get() {\n            return this._nativeAnalyserNode.minDecibels;\n          },\n          set: function set(value) {\n            // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n            var minDecibels = this._nativeAnalyserNode.minDecibels;\n            this._nativeAnalyserNode.minDecibels = value;\n            if (!(this._nativeAnalyserNode.maxDecibels > value)) {\n              this._nativeAnalyserNode.minDecibels = minDecibels;\n              throw createIndexSizeError();\n            }\n          }\n        }, {\n          key: \"smoothingTimeConstant\",\n          get: function get() {\n            return this._nativeAnalyserNode.smoothingTimeConstant;\n          },\n          set: function set(value) {\n            this._nativeAnalyserNode.smoothingTimeConstant = value;\n          }\n        }, {\n          key: \"getByteFrequencyData\",\n          value: function getByteFrequencyData(array) {\n            this._nativeAnalyserNode.getByteFrequencyData(array);\n          }\n        }, {\n          key: \"getByteTimeDomainData\",\n          value: function getByteTimeDomainData(array) {\n            this._nativeAnalyserNode.getByteTimeDomainData(array);\n          }\n        }, {\n          key: \"getFloatFrequencyData\",\n          value: function getFloatFrequencyData(array) {\n            this._nativeAnalyserNode.getFloatFrequencyData(array);\n          }\n        }, {\n          key: \"getFloatTimeDomainData\",\n          value: function getFloatTimeDomainData(array) {\n            this._nativeAnalyserNode.getFloatTimeDomainData(array);\n          }\n        }]);\n      }(audionNodeConstructor);\n    };\n\n    var isOwnedByContext = function isOwnedByContext(nativeAudioNode, nativeContext) {\n      return nativeAudioNode.context === nativeContext;\n    };\n\n    var createAnalyserNodeRendererFactory = function createAnalyserNodeRendererFactory(createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode) {\n      return function () {\n        var renderedNativeAnalyserNodes = new WeakMap();\n        var createAnalyserNode = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(proxy, nativeOfflineAudioContext) {\n            var nativeAnalyserNode, nativeAnalyserNodeIsOwnedByContext, options;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  nativeAnalyserNode = getNativeAudioNode(proxy); // If the initially used nativeAnalyserNode was not constructed on the same OfflineAudioContext it needs to be created again.\n                  nativeAnalyserNodeIsOwnedByContext = isOwnedByContext(nativeAnalyserNode, nativeOfflineAudioContext);\n                  if (!nativeAnalyserNodeIsOwnedByContext) {\n                    options = {\n                      channelCount: nativeAnalyserNode.channelCount,\n                      channelCountMode: nativeAnalyserNode.channelCountMode,\n                      channelInterpretation: nativeAnalyserNode.channelInterpretation,\n                      fftSize: nativeAnalyserNode.fftSize,\n                      maxDecibels: nativeAnalyserNode.maxDecibels,\n                      minDecibels: nativeAnalyserNode.minDecibels,\n                      smoothingTimeConstant: nativeAnalyserNode.smoothingTimeConstant\n                    };\n                    nativeAnalyserNode = createNativeAnalyserNode(nativeOfflineAudioContext, options);\n                  }\n                  renderedNativeAnalyserNodes.set(nativeOfflineAudioContext, nativeAnalyserNode);\n                  _context.next = 6;\n                  return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAnalyserNode);\n                case 6:\n                  return _context.abrupt(\"return\", nativeAnalyserNode);\n                case 7:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _callee);\n          }));\n          return function createAnalyserNode(_x, _x2) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n        return {\n          render: function render(proxy, nativeOfflineAudioContext) {\n            var renderedNativeAnalyserNode = renderedNativeAnalyserNodes.get(nativeOfflineAudioContext);\n            if (renderedNativeAnalyserNode !== undefined) {\n              return Promise.resolve(renderedNativeAnalyserNode);\n            }\n            return createAnalyserNode(proxy, nativeOfflineAudioContext);\n          }\n        };\n      };\n    };\n\n    var testAudioBufferCopyChannelMethodsOutOfBoundsSupport = function testAudioBufferCopyChannelMethodsOutOfBoundsSupport(nativeAudioBuffer) {\n      try {\n        nativeAudioBuffer.copyToChannel(new Float32Array(1), 0, -1);\n      } catch (_unused) {\n        return false;\n      }\n      return true;\n    };\n\n    var createIndexSizeError = function createIndexSizeError() {\n      return new DOMException('', 'IndexSizeError');\n    };\n\n    var wrapAudioBufferGetChannelDataMethod = function wrapAudioBufferGetChannelDataMethod(audioBuffer) {\n      audioBuffer.getChannelData = function (getChannelData) {\n        return function (channel) {\n          try {\n            return getChannelData.call(audioBuffer, channel);\n          } catch (err) {\n            if (err.code === 12) {\n              throw createIndexSizeError();\n            }\n            throw err;\n          }\n        };\n      }(audioBuffer.getChannelData);\n    };\n\n    function ownKeys$v(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\n    function _objectSpread$v(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$v(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$v(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n    var DEFAULT_OPTIONS$j = {\n      numberOfChannels: 1\n    };\n    var createAudioBufferConstructor = function createAudioBufferConstructor(audioBufferStore, cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, testNativeAudioBufferConstructorSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) {\n      var nativeOfflineAudioContext = null;\n      return /*#__PURE__*/function () {\n        function AudioBuffer(options) {\n          _classCallCheck(this, AudioBuffer);\n          if (nativeOfflineAudioContextConstructor === null) {\n            throw new Error('Missing the native OfflineAudioContext constructor.');\n          }\n          var _DEFAULT_OPTIONS$opti = _objectSpread$v(_objectSpread$v({}, DEFAULT_OPTIONS$j), options),\n            length = _DEFAULT_OPTIONS$opti.length,\n            numberOfChannels = _DEFAULT_OPTIONS$opti.numberOfChannels,\n            sampleRate = _DEFAULT_OPTIONS$opti.sampleRate;\n          if (nativeOfflineAudioContext === null) {\n            nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n          }\n          /*\n           * Bug #99: Firefox does not throw a NotSupportedError when the numberOfChannels is zero. But it only does it when using the\n           * factory function. But since Firefox also supports the constructor everything should be fine.\n           */\n          var audioBuffer = nativeAudioBufferConstructor !== null && cacheTestResult(testNativeAudioBufferConstructorSupport, testNativeAudioBufferConstructorSupport) ? new nativeAudioBufferConstructor({\n            length: length,\n            numberOfChannels: numberOfChannels,\n            sampleRate: sampleRate\n          }) : nativeOfflineAudioContext.createBuffer(numberOfChannels, length, sampleRate);\n          // Bug #99: Safari does not throw an error when the numberOfChannels is zero.\n          if (audioBuffer.numberOfChannels === 0) {\n            throw createNotSupportedError();\n          }\n          // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n          // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n          if (typeof audioBuffer.copyFromChannel !== 'function') {\n            wrapAudioBufferCopyChannelMethods(audioBuffer);\n            wrapAudioBufferGetChannelDataMethod(audioBuffer);\n            // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.\n          } else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, function () {\n            return testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer);\n          })) {\n            wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n          }\n          audioBufferStore.add(audioBuffer);\n          /*\n           * This does violate all good pratices but it is necessary to allow this AudioBuffer to be used with native\n           * (Offline)AudioContexts.\n           */\n          return audioBuffer;\n        }\n        return _createClass(AudioBuffer, null, [{\n          key: Symbol.hasInstance,\n          value: function value(instance) {\n            return instance !== null && _typeof(instance) === 'object' && Object.getPrototypeOf(instance) === AudioBuffer.prototype || audioBufferStore.has(instance);\n          }\n        }]);\n      }();\n    };\n\n    var MOST_NEGATIVE_SINGLE_FLOAT = -3.4028234663852886e38;\n    var MOST_POSITIVE_SINGLE_FLOAT = -MOST_NEGATIVE_SINGLE_FLOAT;\n\n    var isActiveAudioNode = function isActiveAudioNode(audioNode) {\n      return ACTIVE_AUDIO_NODE_STORE.has(audioNode);\n    };\n\n    function ownKeys$u(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\n    function _objectSpread$u(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$u(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$u(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n    function _callSuper$q(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$q() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n    function _isNativeReflectConstruct$q() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$q = function _isNativeReflectConstruct() { return !!t; })(); }\n    var DEFAULT_OPTIONS$i = {\n      buffer: null,\n      channelCount: 2,\n      channelCountMode: 'max',\n      channelInterpretation: 'speakers',\n      // Bug #149: Safari does not yet support the detune AudioParam.\n      loop: false,\n      loopEnd: 0,\n      loopStart: 0,\n      playbackRate: 1\n    };\n    var createAudioBufferSourceNodeConstructor = function createAudioBufferSourceNodeConstructor(audioNodeConstructor, createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) {\n      return /*#__PURE__*/function (_audioNodeConstructor) {\n        function AudioBufferSourceNode(context, options) {\n          var _this;\n          _classCallCheck(this, AudioBufferSourceNode);\n          var nativeContext = getNativeContext(context);\n          var mergedOptions = _objectSpread$u(_objectSpread$u({}, DEFAULT_OPTIONS$i), options);\n          var nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, mergedOptions);\n          var isOffline = isNativeOfflineAudioContext(nativeContext);\n          var audioBufferSourceNodeRenderer = isOffline ? createAudioBufferSourceNodeRenderer() : null;\n          _this = _callSuper$q(this, AudioBufferSourceNode, [context, false, nativeAudioBufferSourceNode, audioBufferSourceNodeRenderer]);\n          _this._audioBufferSourceNodeRenderer = audioBufferSourceNodeRenderer;\n          _this._isBufferNullified = false;\n          _this._isBufferSet = mergedOptions.buffer !== null;\n          _this._nativeAudioBufferSourceNode = nativeAudioBufferSourceNode;\n          _this._onended = null;\n          // Bug #73: Safari does not export the correct values for maxValue and minValue.\n          _this._playbackRate = createAudioParam(_this, isOffline, nativeAudioBufferSourceNode.playbackRate, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n          return _this;\n        }\n        _inherits(AudioBufferSourceNode, _audioNodeConstructor);\n        return _createClass(AudioBufferSourceNode, [{\n          key: \"buffer\",\n          get: function get() {\n            if (this._isBufferNullified) {\n              return null;\n            }\n            return this._nativeAudioBufferSourceNode.buffer;\n          },\n          set: function set(value) {\n            this._nativeAudioBufferSourceNode.buffer = value;\n            // Bug #72: Only Chrome & Edge do not allow to reassign the buffer yet.\n            if (value !== null) {\n              if (this._isBufferSet) {\n                throw createInvalidStateError();\n              }\n              this._isBufferSet = true;\n            }\n          }\n        }, {\n          key: \"loop\",\n          get: function get() {\n            return this._nativeAudioBufferSourceNode.loop;\n          },\n          set: function set(value) {\n            this._nativeAudioBufferSourceNode.loop = value;\n          }\n        }, {\n          key: \"loopEnd\",\n          get: function get() {\n            return this._nativeAudioBufferSourceNode.loopEnd;\n          },\n          set: function set(value) {\n            this._nativeAudioBufferSourceNode.loopEnd = value;\n          }\n        }, {\n          key: \"loopStart\",\n          get: function get() {\n            return this._nativeAudioBufferSourceNode.loopStart;\n          },\n          set: function set(value) {\n            this._nativeAudioBufferSourceNode.loopStart = value;\n          }\n        }, {\n          key: \"onended\",\n          get: function get() {\n            return this._onended;\n          },\n          set: function set(value) {\n            var wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n            this._nativeAudioBufferSourceNode.onended = wrappedListener;\n            var nativeOnEnded = this._nativeAudioBufferSourceNode.onended;\n            this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n          }\n        }, {\n          key: \"playbackRate\",\n          get: function get() {\n            return this._playbackRate;\n          }\n        }, {\n          key: \"start\",\n          value: function start() {\n            var _this2 = this;\n            var when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n            var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n            var duration = arguments.length > 2 ? arguments[2] : undefined;\n            this._nativeAudioBufferSourceNode.start(when, offset, duration);\n            if (this._audioBufferSourceNodeRenderer !== null) {\n              this._audioBufferSourceNodeRenderer.start = duration === undefined ? [when, offset] : [when, offset, duration];\n            }\n            if (this.context.state !== 'closed') {\n              setInternalStateToActive(this);\n              var _resetInternalStateToPassive = function resetInternalStateToPassive() {\n                _this2._nativeAudioBufferSourceNode.removeEventListener('ended', _resetInternalStateToPassive);\n                if (isActiveAudioNode(_this2)) {\n                  setInternalStateToPassive(_this2);\n                }\n              };\n              this._nativeAudioBufferSourceNode.addEventListener('ended', _resetInternalStateToPassive);\n            }\n          }\n        }, {\n          key: \"stop\",\n          value: function stop() {\n            var when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n            this._nativeAudioBufferSourceNode.stop(when);\n            if (this._audioBufferSourceNodeRenderer !== null) {\n              this._audioBufferSourceNodeRenderer.stop = when;\n            }\n          }\n        }]);\n      }(audioNodeConstructor);\n    };\n\n    var createAudioBufferSourceNodeRendererFactory = function createAudioBufferSourceNodeRendererFactory(connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) {\n      return function () {\n        var renderedNativeAudioBufferSourceNodes = new WeakMap();\n        var start = null;\n        var stop = null;\n        var createAudioBufferSourceNode = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(proxy, nativeOfflineAudioContext) {\n            var nativeAudioBufferSourceNode, nativeAudioBufferSourceNodeIsOwnedByContext, options, _nativeAudioBufferSou;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  nativeAudioBufferSourceNode = getNativeAudioNode(proxy);\n                  /*\n                   * If the initially used nativeAudioBufferSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n                   * again.\n                   */\n                  nativeAudioBufferSourceNodeIsOwnedByContext = isOwnedByContext(nativeAudioBufferSourceNode, nativeOfflineAudioContext);\n                  if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n                    options = {\n                      buffer: nativeAudioBufferSourceNode.buffer,\n                      channelCount: nativeAudioBufferSourceNode.channelCount,\n                      channelCountMode: nativeAudioBufferSourceNode.channelCountMode,\n                      channelInterpretation: nativeAudioBufferSourceNode.channelInterpretation,\n                      // Bug #149: Safari does not yet support the detune AudioParam.\n                      loop: nativeAudioBufferSourceNode.loop,\n                      loopEnd: nativeAudioBufferSourceNode.loopEnd,\n                      loopStart: nativeAudioBufferSourceNode.loopStart,\n                      playbackRate: nativeAudioBufferSourceNode.playbackRate.value\n                    };\n                    nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, options);\n                    if (start !== null) {\n                      (_nativeAudioBufferSou = nativeAudioBufferSourceNode).start.apply(_nativeAudioBufferSou, _toConsumableArray(start));\n                    }\n                    if (stop !== null) {\n                      nativeAudioBufferSourceNode.stop(stop);\n                    }\n                  }\n                  renderedNativeAudioBufferSourceNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n                  if (nativeAudioBufferSourceNodeIsOwnedByContext) {\n                    _context.next = 9;\n                    break;\n                  }\n                  _context.next = 7;\n                  return renderAutomation(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate);\n                case 7:\n                  _context.next = 11;\n                  break;\n                case 9:\n                  _context.next = 11;\n                  return connectAudioParam(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate);\n                case 11:\n                  _context.next = 13;\n                  return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n                case 13:\n                  return _context.abrupt(\"return\", nativeAudioBufferSourceNode);\n                case 14:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _callee);\n          }));\n          return function createAudioBufferSourceNode(_x, _x2) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n        return {\n          set start(value) {\n            start = value;\n          },\n          set stop(value) {\n            stop = value;\n          },\n          render: function render(proxy, nativeOfflineAudioContext) {\n            var renderedNativeAudioBufferSourceNode = renderedNativeAudioBufferSourceNodes.get(nativeOfflineAudioContext);\n            if (renderedNativeAudioBufferSourceNode !== undefined) {\n              return Promise.resolve(renderedNativeAudioBufferSourceNode);\n            }\n            return createAudioBufferSourceNode(proxy, nativeOfflineAudioContext);\n          }\n        };\n      };\n    };\n\n    var isAudioBufferSourceNode = function isAudioBufferSourceNode(audioNode) {\n      return 'playbackRate' in audioNode;\n    };\n\n    var isBiquadFilterNode = function isBiquadFilterNode(audioNode) {\n      return 'frequency' in audioNode && 'gain' in audioNode;\n    };\n\n    var isConstantSourceNode = function isConstantSourceNode(audioNode) {\n      return 'offset' in audioNode;\n    };\n\n    var isGainNode = function isGainNode(audioNode) {\n      return !('frequency' in audioNode) && 'gain' in audioNode;\n    };\n\n    var isOscillatorNode = function isOscillatorNode(audioNode) {\n      return 'detune' in audioNode && 'frequency' in audioNode && !('gain' in audioNode);\n    };\n\n    var isStereoPannerNode = function isStereoPannerNode(audioNode) {\n      return 'pan' in audioNode;\n    };\n\n    var getAudioNodeConnections = function getAudioNodeConnections(audioNode) {\n      return getValueForKey(AUDIO_NODE_CONNECTIONS_STORE, audioNode);\n    };\n\n    var getAudioParamConnections = function getAudioParamConnections(audioParam) {\n      return getValueForKey(AUDIO_PARAM_CONNECTIONS_STORE, audioParam);\n    };\n\n    function _createForOfIteratorHelper$b(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray$b(r)) || e) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\n    function _unsupportedIterableToArray$b(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray$b(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$b(r, a) : void 0; } }\n    function _arrayLikeToArray$b(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n    var _deactivateActiveAudioNodeInputConnections = function deactivateActiveAudioNodeInputConnections(audioNode, trace) {\n      var _getAudioNodeConnecti = getAudioNodeConnections(audioNode),\n        activeInputs = _getAudioNodeConnecti.activeInputs;\n      activeInputs.forEach(function (connections) {\n        return connections.forEach(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 1),\n            source = _ref2[0];\n          if (!trace.includes(audioNode)) {\n            _deactivateActiveAudioNodeInputConnections(source, [].concat(_toConsumableArray(trace), [audioNode]));\n          }\n        });\n      });\n      var audioParams = isAudioBufferSourceNode(audioNode) ? [\n      // Bug #149: Safari does not yet support the detune AudioParam.\n      audioNode.playbackRate] : isAudioWorkletNode(audioNode) ? Array.from(audioNode.parameters.values()) : isBiquadFilterNode(audioNode) ? [audioNode.Q, audioNode.detune, audioNode.frequency, audioNode.gain] : isConstantSourceNode(audioNode) ? [audioNode.offset] : isGainNode(audioNode) ? [audioNode.gain] : isOscillatorNode(audioNode) ? [audioNode.detune, audioNode.frequency] : isStereoPannerNode(audioNode) ? [audioNode.pan] : [];\n      var _iterator = _createForOfIteratorHelper$b(audioParams),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var audioParam = _step.value;\n          var audioParamConnections = getAudioParamConnections(audioParam);\n          if (audioParamConnections !== undefined) {\n            audioParamConnections.activeInputs.forEach(function (_ref3) {\n              var _ref4 = _slicedToArray(_ref3, 1),\n                source = _ref4[0];\n              return _deactivateActiveAudioNodeInputConnections(source, trace);\n            });\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      if (isActiveAudioNode(audioNode)) {\n        setInternalStateToPassive(audioNode);\n      }\n    };\n\n    var deactivateAudioGraph = function deactivateAudioGraph(context) {\n      _deactivateActiveAudioNodeInputConnections(context.destination, []);\n    };\n\n    var isValidLatencyHint = function isValidLatencyHint(latencyHint) {\n      return latencyHint === undefined || typeof latencyHint === 'number' || typeof latencyHint === 'string' && (latencyHint === 'balanced' || latencyHint === 'interactive' || latencyHint === 'playback');\n    };\n\n    function _callSuper$p(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$p() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n    function _isNativeReflectConstruct$p() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$p = function _isNativeReflectConstruct() { return !!t; })(); }\n    var createAudioContextConstructor = function createAudioContextConstructor(baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioDestinationNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor) {\n      return /*#__PURE__*/function (_baseAudioContextCons) {\n        function AudioContext() {\n          var _this;\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          _classCallCheck(this, AudioContext);\n          if (nativeAudioContextConstructor === null) {\n            throw new Error('Missing the native AudioContext constructor.');\n          }\n          var nativeAudioContext;\n          try {\n            nativeAudioContext = new nativeAudioContextConstructor(options);\n          } catch (err) {\n            // Bug #192 Safari does throw a SyntaxError if the sampleRate is not supported.\n            if (err.code === 12 && err.message === 'sampleRate is not in range') {\n              throw createNotSupportedError();\n            }\n            throw err;\n          }\n          // Bug #131 Safari returns null when there are four other AudioContexts running already.\n          if (nativeAudioContext === null) {\n            throw createUnknownError();\n          }\n          // Bug #51 Only Chrome and Edge throw an error if the given latencyHint is invalid.\n          if (!isValidLatencyHint(options.latencyHint)) {\n            throw new TypeError(\"The provided value '\".concat(options.latencyHint, \"' is not a valid enum value of type AudioContextLatencyCategory.\"));\n          }\n          // Bug #150 Safari does not support setting the sampleRate.\n          if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {\n            throw createNotSupportedError();\n          }\n          _this = _callSuper$p(this, AudioContext, [nativeAudioContext, 2]);\n          var latencyHint = options.latencyHint;\n          var _nativeAudioContext = nativeAudioContext,\n            sampleRate = _nativeAudioContext.sampleRate;\n          // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.\n          _this._baseLatency = typeof nativeAudioContext.baseLatency === 'number' ? nativeAudioContext.baseLatency : latencyHint === 'balanced' ? 512 / sampleRate : latencyHint === 'interactive' || latencyHint === undefined ? 256 / sampleRate : latencyHint === 'playback' ? 1024 / sampleRate :\n          /*\n           * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a\n           * ScriptProcessorNode.\n           */\n          Math.max(2, Math.min(128, Math.round(latencyHint * sampleRate / 128))) * 128 / sampleRate;\n          _this._nativeAudioContext = nativeAudioContext;\n          // Bug #188: Safari will set the context's state to 'interrupted' in case the user switches tabs.\n          if (nativeAudioContextConstructor.name === 'webkitAudioContext') {\n            _this._nativeGainNode = nativeAudioContext.createGain();\n            _this._nativeOscillatorNode = nativeAudioContext.createOscillator();\n            _this._nativeGainNode.gain.value = 1e-37;\n            _this._nativeOscillatorNode.connect(_this._nativeGainNode).connect(nativeAudioContext.destination);\n            _this._nativeOscillatorNode.start();\n          } else {\n            _this._nativeGainNode = null;\n            _this._nativeOscillatorNode = null;\n          }\n          _this._state = null;\n          /*\n           * Bug #34: Chrome and Edge pretend to be running right away, but fire an onstatechange event when the state actually changes\n           * to 'running'.\n           */\n          if (nativeAudioContext.state === 'running') {\n            _this._state = 'suspended';\n            var _revokeState = function revokeState() {\n              if (_this._state === 'suspended') {\n                _this._state = null;\n              }\n              nativeAudioContext.removeEventListener('statechange', _revokeState);\n            };\n            nativeAudioContext.addEventListener('statechange', _revokeState);\n          }\n          return _this;\n        }\n        _inherits(AudioContext, _baseAudioContextCons);\n        return _createClass(AudioContext, [{\n          key: \"baseLatency\",\n          get: function get() {\n            return this._baseLatency;\n          }\n        }, {\n          key: \"state\",\n          get: function get() {\n            return this._state !== null ? this._state : this._nativeAudioContext.state;\n          }\n        }, {\n          key: \"close\",\n          value: function close() {\n            var _this2 = this;\n            // Bug #35: Firefox does not throw an error if the AudioContext was closed before.\n            if (this.state === 'closed') {\n              return this._nativeAudioContext.close().then(function () {\n                throw createInvalidStateError();\n              });\n            }\n            // Bug #34: If the state was set to suspended before it should be revoked now.\n            if (this._state === 'suspended') {\n              this._state = null;\n            }\n            return this._nativeAudioContext.close().then(function () {\n              if (_this2._nativeGainNode !== null && _this2._nativeOscillatorNode !== null) {\n                _this2._nativeOscillatorNode.stop();\n                _this2._nativeGainNode.disconnect();\n                _this2._nativeOscillatorNode.disconnect();\n              }\n              deactivateAudioGraph(_this2);\n            });\n          }\n        }, {\n          key: \"createMediaElementSource\",\n          value: function createMediaElementSource(mediaElement) {\n            return new mediaElementAudioSourceNodeConstructor(this, {\n              mediaElement: mediaElement\n            });\n          }\n        }, {\n          key: \"createMediaStreamDestination\",\n          value: function createMediaStreamDestination() {\n            return new mediaStreamAudioDestinationNodeConstructor(this);\n          }\n        }, {\n          key: \"createMediaStreamSource\",\n          value: function createMediaStreamSource(mediaStream) {\n            return new mediaStreamAudioSourceNodeConstructor(this, {\n              mediaStream: mediaStream\n            });\n          }\n        }, {\n          key: \"createMediaStreamTrackSource\",\n          value: function createMediaStreamTrackSource(mediaStreamTrack) {\n            return new mediaStreamTrackAudioSourceNodeConstructor(this, {\n              mediaStreamTrack: mediaStreamTrack\n            });\n          }\n        }, {\n          key: \"resume\",\n          value: function resume() {\n            var _this3 = this;\n            if (this._state === 'suspended') {\n              return new Promise(function (resolve, reject) {\n                var _resolvePromise = function resolvePromise() {\n                  _this3._nativeAudioContext.removeEventListener('statechange', _resolvePromise);\n                  if (_this3._nativeAudioContext.state === 'running') {\n                    resolve();\n                  } else {\n                    _this3.resume().then(resolve, reject);\n                  }\n                };\n                _this3._nativeAudioContext.addEventListener('statechange', _resolvePromise);\n              });\n            }\n            return this._nativeAudioContext.resume()[\"catch\"](function (err) {\n              // Bug #55: Chrome and Edge do throw an InvalidAccessError instead of an InvalidStateError.\n              // Bug #56: Safari invokes the catch handler but without an error.\n              if (err === undefined || err.code === 15) {\n                throw createInvalidStateError();\n              }\n              throw err;\n            });\n          }\n        }, {\n          key: \"suspend\",\n          value: function suspend() {\n            return this._nativeAudioContext.suspend()[\"catch\"](function (err) {\n              // Bug #56: Safari invokes the catch handler but without an error.\n              if (err === undefined) {\n                throw createInvalidStateError();\n              }\n              throw err;\n            });\n          }\n        }]);\n      }(baseAudioContextConstructor);\n    };\n\n    function _callSuper$o(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$o() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n    function _isNativeReflectConstruct$o() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$o = function _isNativeReflectConstruct() { return !!t; })(); }\n    var createAudioDestinationNodeConstructor = function createAudioDestinationNodeConstructor(audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext, renderInputsOfAudioNode) {\n      return /*#__PURE__*/function (_audioNodeConstructor) {\n        function AudioDestinationNode(context, channelCount) {\n          var _this;\n          _classCallCheck(this, AudioDestinationNode);\n          var nativeContext = getNativeContext(context);\n          var isOffline = isNativeOfflineAudioContext(nativeContext);\n          var nativeAudioDestinationNode = createNativeAudioDestinationNode(nativeContext, channelCount, isOffline);\n          var audioDestinationNodeRenderer = isOffline ? createAudioDestinationNodeRenderer(renderInputsOfAudioNode) : null;\n          _this = _callSuper$o(this, AudioDestinationNode, [context, false, nativeAudioDestinationNode, audioDestinationNodeRenderer]);\n          _this._isNodeOfNativeOfflineAudioContext = isOffline;\n          _this._nativeAudioDestinationNode = nativeAudioDestinationNode;\n          return _this;\n        }\n        _inherits(AudioDestinationNode, _audioNodeConstructor);\n        return _createClass(AudioDestinationNode, [{\n          key: \"channelCount\",\n          get: function get() {\n            return this._nativeAudioDestinationNode.channelCount;\n          },\n          set: function set(value) {\n            // Bug #52: Chrome, Edge & Safari do not throw an exception at all.\n            // Bug #54: Firefox does throw an IndexSizeError.\n            if (this._isNodeOfNativeOfflineAudioContext) {\n              throw createInvalidStateError();\n            }\n            // Bug #47: The AudioDestinationNode in Safari does not initialize the maxChannelCount property correctly.\n            if (value > this._nativeAudioDestinationNode.maxChannelCount) {\n              throw createIndexSizeError();\n            }\n            this._nativeAudioDestinationNode.channelCount = value;\n          }\n        }, {\n          key: \"channelCountMode\",\n          get: function get() {\n            return this._nativeAudioDestinationNode.channelCountMode;\n          },\n          set: function set(value) {\n            // Bug #53: No browser does throw an exception yet.\n            if (this._isNodeOfNativeOfflineAudioContext) {\n              throw createInvalidStateError();\n            }\n            this._nativeAudioDestinationNode.channelCountMode = value;\n          }\n        }, {\n          key: \"maxChannelCount\",\n          get: function get() {\n            return this._nativeAudioDestinationNode.maxChannelCount;\n          }\n        }]);\n      }(audioNodeConstructor);\n    };\n\n    var createAudioDestinationNodeRenderer = function createAudioDestinationNodeRenderer(renderInputsOfAudioNode) {\n      var renderedNativeAudioDestinationNodes = new WeakMap();\n      var createAudioDestinationNode = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(proxy, nativeOfflineAudioContext) {\n          var nativeAudioDestinationNode;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                nativeAudioDestinationNode = nativeOfflineAudioContext.destination;\n                renderedNativeAudioDestinationNodes.set(nativeOfflineAudioContext, nativeAudioDestinationNode);\n                _context.next = 4;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioDestinationNode);\n              case 4:\n                return _context.abrupt(\"return\", nativeAudioDestinationNode);\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }, _callee);\n        }));\n        return function createAudioDestinationNode(_x, _x2) {\n          return _ref.apply(this, arguments);\n        };\n      }();\n      return {\n        render: function render(proxy, nativeOfflineAudioContext) {\n          var renderedNativeAudioDestinationNode = renderedNativeAudioDestinationNodes.get(nativeOfflineAudioContext);\n          if (renderedNativeAudioDestinationNode !== undefined) {\n            return Promise.resolve(renderedNativeAudioDestinationNode);\n          }\n          return createAudioDestinationNode(proxy, nativeOfflineAudioContext);\n        }\n      };\n    };\n\n    var createAudioListenerFactory = function createAudioListenerFactory(createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, createNotSupportedError, getFirstSample, isNativeOfflineAudioContext, overwriteAccessors) {\n      return function (context, nativeContext) {\n        var nativeListener = nativeContext.listener;\n        // Bug #117: Only Chrome & Edge support the new interface already.\n        var createFakeAudioParams = function createFakeAudioParams() {\n          var buffer = new Float32Array(1);\n          var channelMergerNode = createNativeChannelMergerNode(nativeContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'speakers',\n            numberOfInputs: 9\n          });\n          var isOffline = isNativeOfflineAudioContext(nativeContext);\n          var isScriptProcessorNodeCreated = false;\n          var lastOrientation = [0, 0, -1, 0, 1, 0];\n          var lastPosition = [0, 0, 0];\n          var createScriptProcessorNode = function createScriptProcessorNode() {\n            if (isScriptProcessorNodeCreated) {\n              return;\n            }\n            isScriptProcessorNodeCreated = true;\n            var scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 9, 0);\n            // tslint:disable-next-line:deprecation\n            scriptProcessorNode.onaudioprocess = function (_ref) {\n              var inputBuffer = _ref.inputBuffer;\n              var orientation = [getFirstSample(inputBuffer, buffer, 0), getFirstSample(inputBuffer, buffer, 1), getFirstSample(inputBuffer, buffer, 2), getFirstSample(inputBuffer, buffer, 3), getFirstSample(inputBuffer, buffer, 4), getFirstSample(inputBuffer, buffer, 5)];\n              if (orientation.some(function (value, index) {\n                return value !== lastOrientation[index];\n              })) {\n                nativeListener.setOrientation.apply(nativeListener, orientation); // tslint:disable-line:deprecation\n                lastOrientation = orientation;\n              }\n              var positon = [getFirstSample(inputBuffer, buffer, 6), getFirstSample(inputBuffer, buffer, 7), getFirstSample(inputBuffer, buffer, 8)];\n              if (positon.some(function (value, index) {\n                return value !== lastPosition[index];\n              })) {\n                nativeListener.setPosition.apply(nativeListener, positon); // tslint:disable-line:deprecation\n                lastPosition = positon;\n              }\n            };\n            channelMergerNode.connect(scriptProcessorNode);\n          };\n          var createSetOrientation = function createSetOrientation(index) {\n            return function (value) {\n              if (value !== lastOrientation[index]) {\n                lastOrientation[index] = value;\n                nativeListener.setOrientation.apply(nativeListener, _toConsumableArray(lastOrientation)); // tslint:disable-line:deprecation\n              }\n            };\n          };\n          var createSetPosition = function createSetPosition(index) {\n            return function (value) {\n              if (value !== lastPosition[index]) {\n                lastPosition[index] = value;\n                nativeListener.setPosition.apply(nativeListener, _toConsumableArray(lastPosition)); // tslint:disable-line:deprecation\n              }\n            };\n          };\n          var createFakeAudioParam = function createFakeAudioParam(input, initialValue, setValue) {\n            var constantSourceNode = createNativeConstantSourceNode(nativeContext, {\n              channelCount: 1,\n              channelCountMode: 'explicit',\n              channelInterpretation: 'discrete',\n              offset: initialValue\n            });\n            constantSourceNode.connect(channelMergerNode, 0, input);\n            // @todo This should be stopped when the context is closed.\n            constantSourceNode.start();\n            Object.defineProperty(constantSourceNode.offset, 'defaultValue', {\n              get: function get() {\n                return initialValue;\n              }\n            });\n            /*\n             * Bug #62 & #74: Safari does not support ConstantSourceNodes and does not export the correct values for maxValue and\n             * minValue for GainNodes.\n             */\n            var audioParam = createAudioParam({\n              context: context\n            }, isOffline, constantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            overwriteAccessors(audioParam, 'value', function (get) {\n              return function () {\n                return get.call(audioParam);\n              };\n            }, function (set) {\n              return function (value) {\n                try {\n                  set.call(audioParam, value);\n                } catch (err) {\n                  if (err.code !== 9) {\n                    throw err;\n                  }\n                }\n                createScriptProcessorNode();\n                if (isOffline) {\n                  // Bug #117: Using setOrientation() and setPosition() doesn't work with an OfflineAudioContext.\n                  setValue(value);\n                }\n              };\n            });\n            audioParam.cancelAndHoldAtTime = function (cancelAndHoldAtTime) {\n              if (isOffline) {\n                return function () {\n                  throw createNotSupportedError();\n                };\n              }\n              return function () {\n                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                  args[_key] = arguments[_key];\n                }\n                var value = cancelAndHoldAtTime.apply(audioParam, args);\n                createScriptProcessorNode();\n                return value;\n              };\n            }(audioParam.cancelAndHoldAtTime);\n            audioParam.cancelScheduledValues = function (cancelScheduledValues) {\n              if (isOffline) {\n                return function () {\n                  throw createNotSupportedError();\n                };\n              }\n              return function () {\n                for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n                  args[_key2] = arguments[_key2];\n                }\n                var value = cancelScheduledValues.apply(audioParam, args);\n                createScriptProcessorNode();\n                return value;\n              };\n            }(audioParam.cancelScheduledValues);\n            audioParam.exponentialRampToValueAtTime = function (exponentialRampToValueAtTime) {\n              if (isOffline) {\n                return function () {\n                  throw createNotSupportedError();\n                };\n              }\n              return function () {\n                for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n                  args[_key3] = arguments[_key3];\n                }\n                var value = exponentialRampToValueAtTime.apply(audioParam, args);\n                createScriptProcessorNode();\n                return value;\n              };\n            }(audioParam.exponentialRampToValueAtTime);\n            audioParam.linearRampToValueAtTime = function (linearRampToValueAtTime) {\n              if (isOffline) {\n                return function () {\n                  throw createNotSupportedError();\n                };\n              }\n              return function () {\n                for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n                  args[_key4] = arguments[_key4];\n                }\n                var value = linearRampToValueAtTime.apply(audioParam, args);\n                createScriptProcessorNode();\n                return value;\n              };\n            }(audioParam.linearRampToValueAtTime);\n            audioParam.setTargetAtTime = function (setTargetAtTime) {\n              if (isOffline) {\n                return function () {\n                  throw createNotSupportedError();\n                };\n              }\n              return function () {\n                for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n                  args[_key5] = arguments[_key5];\n                }\n                var value = setTargetAtTime.apply(audioParam, args);\n                createScriptProcessorNode();\n                return value;\n              };\n            }(audioParam.setTargetAtTime);\n            audioParam.setValueAtTime = function (setValueAtTime) {\n              if (isOffline) {\n                return function () {\n                  throw createNotSupportedError();\n                };\n              }\n              return function () {\n                for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n                  args[_key6] = arguments[_key6];\n                }\n                var value = setValueAtTime.apply(audioParam, args);\n                createScriptProcessorNode();\n                return value;\n              };\n            }(audioParam.setValueAtTime);\n            audioParam.setValueCurveAtTime = function (setValueCurveAtTime) {\n              if (isOffline) {\n                return function () {\n                  throw createNotSupportedError();\n                };\n              }\n              return function () {\n                for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n                  args[_key7] = arguments[_key7];\n                }\n                var value = setValueCurveAtTime.apply(audioParam, args);\n                createScriptProcessorNode();\n                return value;\n              };\n            }(audioParam.setValueCurveAtTime);\n            return audioParam;\n          };\n          return {\n            forwardX: createFakeAudioParam(0, 0, createSetOrientation(0)),\n            forwardY: createFakeAudioParam(1, 0, createSetOrientation(1)),\n            forwardZ: createFakeAudioParam(2, -1, createSetOrientation(2)),\n            positionX: createFakeAudioParam(6, 0, createSetPosition(0)),\n            positionY: createFakeAudioParam(7, 0, createSetPosition(1)),\n            positionZ: createFakeAudioParam(8, 0, createSetPosition(2)),\n            upX: createFakeAudioParam(3, 0, createSetOrientation(3)),\n            upY: createFakeAudioParam(4, 1, createSetOrientation(4)),\n            upZ: createFakeAudioParam(5, 0, createSetOrientation(5))\n          };\n        };\n        var _ref2 = nativeListener.forwardX === undefined ? createFakeAudioParams() : nativeListener,\n          forwardX = _ref2.forwardX,\n          forwardY = _ref2.forwardY,\n          forwardZ = _ref2.forwardZ,\n          positionX = _ref2.positionX,\n          positionY = _ref2.positionY,\n          positionZ = _ref2.positionZ,\n          upX = _ref2.upX,\n          upY = _ref2.upY,\n          upZ = _ref2.upZ;\n        return {\n          get forwardX() {\n            return forwardX;\n          },\n          get forwardY() {\n            return forwardY;\n          },\n          get forwardZ() {\n            return forwardZ;\n          },\n          get positionX() {\n            return positionX;\n          },\n          get positionY() {\n            return positionY;\n          },\n          get positionZ() {\n            return positionZ;\n          },\n          get upX() {\n            return upX;\n          },\n          get upY() {\n            return upY;\n          },\n          get upZ() {\n            return upZ;\n          }\n        };\n      };\n    };\n\n    var isAudioNode = function isAudioNode(audioNodeOrAudioParam) {\n      return 'context' in audioNodeOrAudioParam;\n    };\n\n    var isAudioNodeOutputConnection = function isAudioNodeOutputConnection(outputConnection) {\n      return isAudioNode(outputConnection[0]);\n    };\n\n    function _createForOfIteratorHelper$a(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray$a(r)) || e) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\n    function _unsupportedIterableToArray$a(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray$a(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$a(r, a) : void 0; } }\n    function _arrayLikeToArray$a(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n    var insertElementInSet = function insertElementInSet(set, element, predicate, ignoreDuplicates) {\n      var _iterator = _createForOfIteratorHelper$a(set),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var lmnt = _step.value;\n          if (predicate(lmnt)) {\n            if (ignoreDuplicates) {\n              return false;\n            }\n            throw Error('The set contains at least one similar element.');\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      set.add(element);\n      return true;\n    };\n\n    var addActiveInputConnectionToAudioParam = function addActiveInputConnectionToAudioParam(activeInputs, source, _ref, ignoreDuplicates) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        output = _ref2[0],\n        eventListener = _ref2[1];\n      insertElementInSet(activeInputs, [source, output, eventListener], function (activeInputConnection) {\n        return activeInputConnection[0] === source && activeInputConnection[1] === output;\n      }, ignoreDuplicates);\n    };\n\n    var addPassiveInputConnectionToAudioParam = function addPassiveInputConnectionToAudioParam(passiveInputs, _ref, ignoreDuplicates) {\n      var _ref2 = _slicedToArray(_ref, 3),\n        source = _ref2[0],\n        output = _ref2[1],\n        eventListener = _ref2[2];\n      var passiveInputConnections = passiveInputs.get(source);\n      if (passiveInputConnections === undefined) {\n        passiveInputs.set(source, new Set([[output, eventListener]]));\n      } else {\n        insertElementInSet(passiveInputConnections, [output, eventListener], function (passiveInputConnection) {\n          return passiveInputConnection[0] === output;\n        }, ignoreDuplicates);\n      }\n    };\n\n    var isNativeAudioNodeFaker = function isNativeAudioNodeFaker(nativeAudioNodeOrNativeAudioNodeFaker) {\n      return 'inputs' in nativeAudioNodeOrNativeAudioNodeFaker;\n    };\n\n    var connectNativeAudioNodeToNativeAudioNode = function connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input) {\n      if (isNativeAudioNodeFaker(nativeDestinationAudioNode)) {\n        var fakeNativeDestinationAudioNode = nativeDestinationAudioNode.inputs[input];\n        nativeSourceAudioNode.connect(fakeNativeDestinationAudioNode, output, 0);\n        return [fakeNativeDestinationAudioNode, output, 0];\n      }\n      nativeSourceAudioNode.connect(nativeDestinationAudioNode, output, input);\n      return [nativeDestinationAudioNode, output, input];\n    };\n\n    function _createForOfIteratorHelper$9(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray$9(r)) || e) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\n    function _unsupportedIterableToArray$9(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray$9(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$9(r, a) : void 0; } }\n    function _arrayLikeToArray$9(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n    var deleteActiveInputConnection = function deleteActiveInputConnection(activeInputConnections, source, output) {\n      var _iterator = _createForOfIteratorHelper$9(activeInputConnections),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var activeInputConnection = _step.value;\n          if (activeInputConnection[0] === source && activeInputConnection[1] === output) {\n            activeInputConnections[\"delete\"](activeInputConnection);\n            return activeInputConnection;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return null;\n    };\n\n    var deleteActiveInputConnectionToAudioParam = function deleteActiveInputConnectionToAudioParam(activeInputs, source, output) {\n      return pickElementFromSet(activeInputs, function (activeInputConnection) {\n        return activeInputConnection[0] === source && activeInputConnection[1] === output;\n      });\n    };\n\n    var deleteEventListenerOfAudioNode = function deleteEventListenerOfAudioNode(audioNode, eventListener) {\n      var eventListeners = getEventListenersOfAudioNode(audioNode);\n      if (!eventListeners[\"delete\"](eventListener)) {\n        throw new Error('Missing the expected event listener.');\n      }\n    };\n\n    var deletePassiveInputConnectionToAudioParam = function deletePassiveInputConnectionToAudioParam(passiveInputs, source, output) {\n      var passiveInputConnections = getValueForKey(passiveInputs, source);\n      var matchingConnection = pickElementFromSet(passiveInputConnections, function (passiveInputConnection) {\n        return passiveInputConnection[0] === output;\n      });\n      if (passiveInputConnections.size === 0) {\n        passiveInputs[\"delete\"](source);\n      }\n      return matchingConnection;\n    };\n\n    var disconnectNativeAudioNodeFromNativeAudioNode = function disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input) {\n      if (isNativeAudioNodeFaker(nativeDestinationAudioNode)) {\n        nativeSourceAudioNode.disconnect(nativeDestinationAudioNode.inputs[input], output, 0);\n      } else {\n        nativeSourceAudioNode.disconnect(nativeDestinationAudioNode, output, input);\n      }\n    };\n\n    var getNativeAudioNode = function getNativeAudioNode(audioNode) {\n      return getValueForKey(AUDIO_NODE_STORE, audioNode);\n    };\n\n    var getNativeAudioParam = function getNativeAudioParam(audioParam) {\n      return getValueForKey(AUDIO_PARAM_STORE, audioParam);\n    };\n\n    var isPartOfACycle = function isPartOfACycle(audioNode) {\n      return CYCLE_COUNTERS.has(audioNode);\n    };\n\n    var isPassiveAudioNode = function isPassiveAudioNode(audioNode) {\n      return !ACTIVE_AUDIO_NODE_STORE.has(audioNode);\n    };\n\n    var testAudioNodeDisconnectMethodSupport = function testAudioNodeDisconnectMethodSupport(nativeAudioContext, nativeAudioWorkletNodeConstructor) {\n      return new Promise(function (resolve) {\n        /*\n         * This bug existed in Safari up until v14.0.2. Since AudioWorklets were not supported in Safari until v14.1 the presence of the\n         * constructor for an AudioWorkletNode can be used here to skip the test.\n         */\n        if (nativeAudioWorkletNodeConstructor !== null) {\n          resolve(true);\n        } else {\n          var analyzer = nativeAudioContext.createScriptProcessor(256, 1, 1); // tslint:disable-line deprecation\n          var dummy = nativeAudioContext.createGain();\n          // Bug #95: Safari does not play one sample buffers.\n          var ones = nativeAudioContext.createBuffer(1, 2, 44100);\n          var channelData = ones.getChannelData(0);\n          channelData[0] = 1;\n          channelData[1] = 1;\n          var source = nativeAudioContext.createBufferSource();\n          source.buffer = ones;\n          source.loop = true;\n          source.connect(analyzer).connect(nativeAudioContext.destination);\n          source.connect(dummy);\n          source.disconnect(dummy);\n          // tslint:disable-next-line:deprecation\n          analyzer.onaudioprocess = function (event) {\n            var chnnlDt = event.inputBuffer.getChannelData(0); // tslint:disable-line deprecation\n            if (Array.prototype.some.call(chnnlDt, function (sample) {\n              return sample === 1;\n            })) {\n              resolve(true);\n            } else {\n              resolve(false);\n            }\n            source.stop();\n            analyzer.onaudioprocess = null; // tslint:disable-line:deprecation\n            source.disconnect(analyzer);\n            analyzer.disconnect(nativeAudioContext.destination);\n          };\n          source.start();\n        }\n      });\n    };\n\n    function _createForOfIteratorHelper$8(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray$8(r)) || e) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\n    function _unsupportedIterableToArray$8(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray$8(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$8(r, a) : void 0; } }\n    function _arrayLikeToArray$8(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n    var visitEachAudioNodeOnce = function visitEachAudioNodeOnce(cycles, visitor) {\n      var counts = new Map();\n      var _iterator = _createForOfIteratorHelper$8(cycles),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var cycle = _step.value;\n          var _iterator2 = _createForOfIteratorHelper$8(cycle),\n            _step2;\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var audioNode = _step2.value;\n              var count = counts.get(audioNode);\n              counts.set(audioNode, count === undefined ? 1 : count + 1);\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      counts.forEach(function (count, audioNode) {\n        return visitor(audioNode, count);\n      });\n    };\n\n    var isNativeAudioNode$1 = function isNativeAudioNode(nativeAudioNodeOrAudioParam) {\n      return 'context' in nativeAudioNodeOrAudioParam;\n    };\n\n    function _createForOfIteratorHelper$7(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray$7(r)) || e) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\n    function _unsupportedIterableToArray$7(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray$7(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$7(r, a) : void 0; } }\n    function _arrayLikeToArray$7(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n    var wrapAudioNodeDisconnectMethod = function wrapAudioNodeDisconnectMethod(nativeAudioNode) {\n      var connections = new Map();\n      nativeAudioNode.connect = function (connect) {\n        // tslint:disable-next-line:invalid-void no-inferrable-types\n        return function (destination) {\n          var output = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n          var input = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n          var returnValue = isNativeAudioNode$1(destination) ? connect(destination, output, input) : connect(destination, output);\n          // Save the new connection only if the calls to connect above didn't throw an error.\n          var connectionsToDestination = connections.get(destination);\n          if (connectionsToDestination === undefined) {\n            connections.set(destination, [{\n              input: input,\n              output: output\n            }]);\n          } else {\n            if (connectionsToDestination.every(function (connection) {\n              return connection.input !== input || connection.output !== output;\n            })) {\n              connectionsToDestination.push({\n                input: input,\n                output: output\n              });\n            }\n          }\n          return returnValue;\n        };\n      }(nativeAudioNode.connect.bind(nativeAudioNode));\n      nativeAudioNode.disconnect = function (disconnect) {\n        return function (destinationOrOutput, output, input) {\n          disconnect.apply(nativeAudioNode);\n          if (destinationOrOutput === undefined) {\n            connections.clear();\n          } else if (typeof destinationOrOutput === 'number') {\n            var _iterator = _createForOfIteratorHelper$7(connections),\n              _step;\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                var _step$value = _slicedToArray(_step.value, 2),\n                  destination = _step$value[0],\n                  connectionsToDestination = _step$value[1];\n                var filteredConnections = connectionsToDestination.filter(function (connection) {\n                  return connection.output !== destinationOrOutput;\n                });\n                if (filteredConnections.length === 0) {\n                  connections[\"delete\"](destination);\n                } else {\n                  connections.set(destination, filteredConnections);\n                }\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n          } else if (connections.has(destinationOrOutput)) {\n            if (output === undefined) {\n              connections[\"delete\"](destinationOrOutput);\n            } else {\n              var _connectionsToDestination = connections.get(destinationOrOutput);\n              if (_connectionsToDestination !== undefined) {\n                var _filteredConnections = _connectionsToDestination.filter(function (connection) {\n                  return connection.output !== output && (connection.input !== input || input === undefined);\n                });\n                if (_filteredConnections.length === 0) {\n                  connections[\"delete\"](destinationOrOutput);\n                } else {\n                  connections.set(destinationOrOutput, _filteredConnections);\n                }\n              }\n            }\n          }\n          var _iterator2 = _createForOfIteratorHelper$7(connections),\n            _step2;\n          try {\n            var _loop = function _loop() {\n              var _step2$value = _slicedToArray(_step2.value, 2),\n                destination = _step2$value[0],\n                connectionsToDestination = _step2$value[1];\n              connectionsToDestination.forEach(function (connection) {\n                if (isNativeAudioNode$1(destination)) {\n                  nativeAudioNode.connect(destination, connection.output, connection.input);\n                } else {\n                  nativeAudioNode.connect(destination, connection.output);\n                }\n              });\n            };\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              _loop();\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        };\n      }(nativeAudioNode.disconnect);\n    };\n\n    function _callSuper$n(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$n() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n    function _isNativeReflectConstruct$n() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$n = function _isNativeReflectConstruct() { return !!t; })(); }\n    function _createForOfIteratorHelper$6(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray$6(r)) || e) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\n    function _unsupportedIterableToArray$6(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray$6(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$6(r, a) : void 0; } }\n    function _arrayLikeToArray$6(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n    var addConnectionToAudioParamOfAudioContext = function addConnectionToAudioParamOfAudioContext(source, destination, output, isOffline) {\n      var _getAudioParamConnect = getAudioParamConnections(destination),\n        activeInputs = _getAudioParamConnect.activeInputs,\n        passiveInputs = _getAudioParamConnect.passiveInputs;\n      var _getAudioNodeConnecti = getAudioNodeConnections(source),\n        outputs = _getAudioNodeConnecti.outputs;\n      var eventListeners = getEventListenersOfAudioNode(source);\n      var eventListener = function eventListener(isActive) {\n        var nativeAudioNode = getNativeAudioNode(source);\n        var nativeAudioParam = getNativeAudioParam(destination);\n        if (isActive) {\n          var partialConnection = deletePassiveInputConnectionToAudioParam(passiveInputs, source, output);\n          addActiveInputConnectionToAudioParam(activeInputs, source, partialConnection, false);\n          if (!isOffline && !isPartOfACycle(source)) {\n            nativeAudioNode.connect(nativeAudioParam, output);\n          }\n        } else {\n          var _partialConnection = deleteActiveInputConnectionToAudioParam(activeInputs, source, output);\n          addPassiveInputConnectionToAudioParam(passiveInputs, _partialConnection, false);\n          if (!isOffline && !isPartOfACycle(source)) {\n            nativeAudioNode.disconnect(nativeAudioParam, output);\n          }\n        }\n      };\n      if (insertElementInSet(outputs, [destination, output], function (outputConnection) {\n        return outputConnection[0] === destination && outputConnection[1] === output;\n      }, true)) {\n        eventListeners.add(eventListener);\n        if (isActiveAudioNode(source)) {\n          addActiveInputConnectionToAudioParam(activeInputs, source, [output, eventListener], true);\n        } else {\n          addPassiveInputConnectionToAudioParam(passiveInputs, [source, output, eventListener], true);\n        }\n        return true;\n      }\n      return false;\n    };\n    var deleteInputConnectionOfAudioNode = function deleteInputConnectionOfAudioNode(source, destination, output, input) {\n      var _getAudioNodeConnecti2 = getAudioNodeConnections(destination),\n        activeInputs = _getAudioNodeConnecti2.activeInputs,\n        passiveInputs = _getAudioNodeConnecti2.passiveInputs;\n      var activeInputConnection = deleteActiveInputConnection(activeInputs[input], source, output);\n      if (activeInputConnection === null) {\n        var passiveInputConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);\n        return [passiveInputConnection[2], false];\n      }\n      return [activeInputConnection[2], true];\n    };\n    var deleteInputConnectionOfAudioParam = function deleteInputConnectionOfAudioParam(source, destination, output) {\n      var _getAudioParamConnect2 = getAudioParamConnections(destination),\n        activeInputs = _getAudioParamConnect2.activeInputs,\n        passiveInputs = _getAudioParamConnect2.passiveInputs;\n      var activeInputConnection = deleteActiveInputConnection(activeInputs, source, output);\n      if (activeInputConnection === null) {\n        var passiveInputConnection = deletePassiveInputConnectionToAudioParam(passiveInputs, source, output);\n        return [passiveInputConnection[1], false];\n      }\n      return [activeInputConnection[2], true];\n    };\n    var deleteInputsOfAudioNode = function deleteInputsOfAudioNode(source, isOffline, destination, output, input) {\n      var _deleteInputConnectio = deleteInputConnectionOfAudioNode(source, destination, output, input),\n        _deleteInputConnectio2 = _slicedToArray(_deleteInputConnectio, 2),\n        listener = _deleteInputConnectio2[0],\n        isActive = _deleteInputConnectio2[1];\n      if (listener !== null) {\n        deleteEventListenerOfAudioNode(source, listener);\n        if (isActive && !isOffline && !isPartOfACycle(source)) {\n          disconnectNativeAudioNodeFromNativeAudioNode(getNativeAudioNode(source), getNativeAudioNode(destination), output, input);\n        }\n      }\n      if (isActiveAudioNode(destination)) {\n        var _getAudioNodeConnecti3 = getAudioNodeConnections(destination),\n          activeInputs = _getAudioNodeConnecti3.activeInputs;\n        setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n      }\n    };\n    var deleteInputsOfAudioParam = function deleteInputsOfAudioParam(source, isOffline, destination, output) {\n      var _deleteInputConnectio3 = deleteInputConnectionOfAudioParam(source, destination, output),\n        _deleteInputConnectio4 = _slicedToArray(_deleteInputConnectio3, 2),\n        listener = _deleteInputConnectio4[0],\n        isActive = _deleteInputConnectio4[1];\n      if (listener !== null) {\n        deleteEventListenerOfAudioNode(source, listener);\n        if (isActive && !isOffline && !isPartOfACycle(source)) {\n          getNativeAudioNode(source).disconnect(getNativeAudioParam(destination), output);\n        }\n      }\n    };\n    var deleteAnyConnection = function deleteAnyConnection(source, isOffline) {\n      var audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n      var destinations = [];\n      var _iterator = _createForOfIteratorHelper$6(audioNodeConnectionsOfSource.outputs),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var outputConnection = _step.value;\n          if (isAudioNodeOutputConnection(outputConnection)) {\n            deleteInputsOfAudioNode.apply(void 0, [source, isOffline].concat(_toConsumableArray(outputConnection)));\n          } else {\n            deleteInputsOfAudioParam.apply(void 0, [source, isOffline].concat(_toConsumableArray(outputConnection)));\n          }\n          destinations.push(outputConnection[0]);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      audioNodeConnectionsOfSource.outputs.clear();\n      return destinations;\n    };\n    var deleteConnectionAtOutput = function deleteConnectionAtOutput(source, isOffline, output) {\n      var audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n      var destinations = [];\n      var _iterator2 = _createForOfIteratorHelper$6(audioNodeConnectionsOfSource.outputs),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var outputConnection = _step2.value;\n          if (outputConnection[1] === output) {\n            if (isAudioNodeOutputConnection(outputConnection)) {\n              deleteInputsOfAudioNode.apply(void 0, [source, isOffline].concat(_toConsumableArray(outputConnection)));\n            } else {\n              deleteInputsOfAudioParam.apply(void 0, [source, isOffline].concat(_toConsumableArray(outputConnection)));\n            }\n            destinations.push(outputConnection[0]);\n            audioNodeConnectionsOfSource.outputs[\"delete\"](outputConnection);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return destinations;\n    };\n    var deleteConnectionToDestination = function deleteConnectionToDestination(source, isOffline, destination, output, input) {\n      var audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n      return Array.from(audioNodeConnectionsOfSource.outputs).filter(function (outputConnection) {\n        return outputConnection[0] === destination && (output === undefined || outputConnection[1] === output) && (input === undefined || outputConnection[2] === input);\n      }).map(function (outputConnection) {\n        if (isAudioNodeOutputConnection(outputConnection)) {\n          deleteInputsOfAudioNode.apply(void 0, [source, isOffline].concat(_toConsumableArray(outputConnection)));\n        } else {\n          deleteInputsOfAudioParam.apply(void 0, [source, isOffline].concat(_toConsumableArray(outputConnection)));\n        }\n        audioNodeConnectionsOfSource.outputs[\"delete\"](outputConnection);\n        return outputConnection[0];\n      });\n    };\n    var createAudioNodeConstructor = function createAudioNodeConstructor(addAudioNodeConnections, addConnectionToAudioNode, cacheTestResult, createIncrementCycleCounter, createIndexSizeError, createInvalidAccessError, createNotSupportedError, decrementCycleCounter, detectCycles, eventTargetConstructor, getNativeContext, isNativeAudioContext, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor) {\n      return /*#__PURE__*/function (_eventTargetConstruct) {\n        function AudioNode(context, isActive, nativeAudioNode, audioNodeRenderer) {\n          var _this;\n          _classCallCheck(this, AudioNode);\n          _this = _callSuper$n(this, AudioNode, [nativeAudioNode]);\n          _this._context = context;\n          _this._nativeAudioNode = nativeAudioNode;\n          var nativeContext = getNativeContext(context);\n          // Bug #12: Safari does not support to disconnect a specific destination.\n          if (isNativeAudioContext(nativeContext) && true !== cacheTestResult(testAudioNodeDisconnectMethodSupport, function () {\n            return testAudioNodeDisconnectMethodSupport(nativeContext, nativeAudioWorkletNodeConstructor);\n          })) {\n            wrapAudioNodeDisconnectMethod(nativeAudioNode);\n          }\n          AUDIO_NODE_STORE.set(_this, nativeAudioNode);\n          EVENT_LISTENERS.set(_this, new Set());\n          if (context.state !== 'closed' && isActive) {\n            setInternalStateToActive(_this);\n          }\n          addAudioNodeConnections(_this, audioNodeRenderer, nativeAudioNode);\n          return _this;\n        }\n        _inherits(AudioNode, _eventTargetConstruct);\n        return _createClass(AudioNode, [{\n          key: \"channelCount\",\n          get: function get() {\n            return this._nativeAudioNode.channelCount;\n          },\n          set: function set(value) {\n            this._nativeAudioNode.channelCount = value;\n          }\n        }, {\n          key: \"channelCountMode\",\n          get: function get() {\n            return this._nativeAudioNode.channelCountMode;\n          },\n          set: function set(value) {\n            this._nativeAudioNode.channelCountMode = value;\n          }\n        }, {\n          key: \"channelInterpretation\",\n          get: function get() {\n            return this._nativeAudioNode.channelInterpretation;\n          },\n          set: function set(value) {\n            this._nativeAudioNode.channelInterpretation = value;\n          }\n        }, {\n          key: \"context\",\n          get: function get() {\n            return this._context;\n          }\n        }, {\n          key: \"numberOfInputs\",\n          get: function get() {\n            return this._nativeAudioNode.numberOfInputs;\n          }\n        }, {\n          key: \"numberOfOutputs\",\n          get: function get() {\n            return this._nativeAudioNode.numberOfOutputs;\n          }\n          // tslint:disable-next-line:invalid-void\n        }, {\n          key: \"connect\",\n          value: function connect(destination) {\n            var output = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n            var input = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n            // Bug #174: Safari does expose a wrong numberOfOutputs for MediaStreamAudioDestinationNodes.\n            if (output < 0 || output >= this._nativeAudioNode.numberOfOutputs) {\n              throw createIndexSizeError();\n            }\n            var nativeContext = getNativeContext(this._context);\n            var isOffline = isNativeOfflineAudioContext(nativeContext);\n            if (isNativeAudioNode(destination) || isNativeAudioParam(destination)) {\n              throw createInvalidAccessError();\n            }\n            if (isAudioNode(destination)) {\n              var nativeDestinationAudioNode = getNativeAudioNode(destination);\n              try {\n                var connection = connectNativeAudioNodeToNativeAudioNode(this._nativeAudioNode, nativeDestinationAudioNode, output, input);\n                var isPassive = isPassiveAudioNode(this);\n                if (isOffline || isPassive) {\n                  var _this$_nativeAudioNod;\n                  (_this$_nativeAudioNod = this._nativeAudioNode).disconnect.apply(_this$_nativeAudioNod, _toConsumableArray(connection));\n                }\n                if (this.context.state !== 'closed' && !isPassive && isPassiveAudioNode(destination)) {\n                  setInternalStateToActive(destination);\n                }\n              } catch (err) {\n                // Bug #41: Safari does not throw the correct exception so far.\n                if (err.code === 12) {\n                  throw createInvalidAccessError();\n                }\n                throw err;\n              }\n              var isNewConnectionToAudioNode = addConnectionToAudioNode(this, destination, output, input, isOffline);\n              // Bug #164: Only Firefox detects cycles so far.\n              if (isNewConnectionToAudioNode) {\n                var cycles = detectCycles([this], destination);\n                visitEachAudioNodeOnce(cycles, createIncrementCycleCounter(isOffline));\n              }\n              return destination;\n            }\n            var nativeAudioParam = getNativeAudioParam(destination);\n            /*\n             * Bug #73, #147 & #153: Safari does not support to connect an input signal to the playbackRate AudioParam of an\n             * AudioBufferSourceNode. This can't be easily detected and that's why the outdated name property is used here to identify\n             * Safari. In addition to that the maxValue property is used to only detect the affected versions below v14.0.2.\n             */\n            if (nativeAudioParam.name === 'playbackRate' && nativeAudioParam.maxValue === 1024) {\n              throw createNotSupportedError();\n            }\n            try {\n              this._nativeAudioNode.connect(nativeAudioParam, output);\n              if (isOffline || isPassiveAudioNode(this)) {\n                this._nativeAudioNode.disconnect(nativeAudioParam, output);\n              }\n            } catch (err) {\n              // Bug #58: Safari doesn't throw an InvalidAccessError yet.\n              if (err.code === 12) {\n                throw createInvalidAccessError();\n              }\n              throw err;\n            }\n            var isNewConnectionToAudioParam = addConnectionToAudioParamOfAudioContext(this, destination, output, isOffline);\n            // Bug #164: Only Firefox detects cycles so far.\n            if (isNewConnectionToAudioParam) {\n              var _cycles = detectCycles([this], destination);\n              visitEachAudioNodeOnce(_cycles, createIncrementCycleCounter(isOffline));\n            }\n          }\n        }, {\n          key: \"disconnect\",\n          value: function disconnect(destinationOrOutput, output, input) {\n            var destinations;\n            var nativeContext = getNativeContext(this._context);\n            var isOffline = isNativeOfflineAudioContext(nativeContext);\n            if (destinationOrOutput === undefined) {\n              destinations = deleteAnyConnection(this, isOffline);\n            } else if (typeof destinationOrOutput === 'number') {\n              if (destinationOrOutput < 0 || destinationOrOutput >= this.numberOfOutputs) {\n                throw createIndexSizeError();\n              }\n              destinations = deleteConnectionAtOutput(this, isOffline, destinationOrOutput);\n            } else {\n              if (output !== undefined && (output < 0 || output >= this.numberOfOutputs)) {\n                throw createIndexSizeError();\n              }\n              if (isAudioNode(destinationOrOutput) && input !== undefined && (input < 0 || input >= destinationOrOutput.numberOfInputs)) {\n                throw createIndexSizeError();\n              }\n              destinations = deleteConnectionToDestination(this, isOffline, destinationOrOutput, output, input);\n              if (destinations.length === 0) {\n                throw createInvalidAccessError();\n              }\n            }\n            // Bug #164: Only Firefox detects cycles so far.\n            var _iterator3 = _createForOfIteratorHelper$6(destinations),\n              _step3;\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                var destination = _step3.value;\n                var cycles = detectCycles([this], destination);\n                visitEachAudioNodeOnce(cycles, decrementCycleCounter);\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n          }\n        }]);\n      }(eventTargetConstructor);\n    };\n\n    var createAudioParamFactory = function createAudioParamFactory(addAudioParamConnections, audioParamAudioNodeStore, audioParamStore, createAudioParamRenderer, createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent, nativeAudioContextConstructor, setValueAtTimeUntilPossible) {\n      return function (audioNode, isAudioParamOfOfflineAudioContext, nativeAudioParam) {\n        var maxValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n        var minValue = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n        // Bug #196 Only Safari sets the defaultValue to the initial value.\n        var defaultValue = nativeAudioParam.value;\n        var automationEventList = new automationEvents.AutomationEventList(defaultValue);\n        var audioParamRenderer = isAudioParamOfOfflineAudioContext ? createAudioParamRenderer(automationEventList) : null;\n        var audioParam = {\n          get defaultValue() {\n            return defaultValue;\n          },\n          get maxValue() {\n            return maxValue === null ? nativeAudioParam.maxValue : maxValue;\n          },\n          get minValue() {\n            return minValue === null ? nativeAudioParam.minValue : minValue;\n          },\n          get value() {\n            return nativeAudioParam.value;\n          },\n          set value(value) {\n            nativeAudioParam.value = value;\n            // Bug #98: Firefox & Safari do not yet treat the value setter like a call to setValueAtTime().\n            audioParam.setValueAtTime(value, audioNode.context.currentTime);\n          },\n          cancelAndHoldAtTime: function cancelAndHoldAtTime(cancelTime) {\n            // Bug #28: Firefox & Safari do not yet implement cancelAndHoldAtTime().\n            if (typeof nativeAudioParam.cancelAndHoldAtTime === 'function') {\n              if (audioParamRenderer === null) {\n                automationEventList.flush(audioNode.context.currentTime);\n              }\n              automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));\n              nativeAudioParam.cancelAndHoldAtTime(cancelTime);\n            } else {\n              var previousLastEvent = Array.from(automationEventList).pop();\n              if (audioParamRenderer === null) {\n                automationEventList.flush(audioNode.context.currentTime);\n              }\n              automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));\n              var currentLastEvent = Array.from(automationEventList).pop();\n              nativeAudioParam.cancelScheduledValues(cancelTime);\n              if (previousLastEvent !== currentLastEvent && currentLastEvent !== undefined) {\n                if (currentLastEvent.type === 'exponentialRampToValue') {\n                  nativeAudioParam.exponentialRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);\n                } else if (currentLastEvent.type === 'linearRampToValue') {\n                  nativeAudioParam.linearRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);\n                } else if (currentLastEvent.type === 'setValue') {\n                  nativeAudioParam.setValueAtTime(currentLastEvent.value, currentLastEvent.startTime);\n                } else if (currentLastEvent.type === 'setValueCurve') {\n                  nativeAudioParam.setValueCurveAtTime(currentLastEvent.values, currentLastEvent.startTime, currentLastEvent.duration);\n                }\n              }\n            }\n            return audioParam;\n          },\n          cancelScheduledValues: function cancelScheduledValues(cancelTime) {\n            if (audioParamRenderer === null) {\n              automationEventList.flush(audioNode.context.currentTime);\n            }\n            automationEventList.add(createCancelScheduledValuesAutomationEvent(cancelTime));\n            nativeAudioParam.cancelScheduledValues(cancelTime);\n            return audioParam;\n          },\n          exponentialRampToValueAtTime: function exponentialRampToValueAtTime(value, endTime) {\n            // Bug #45: Safari does not throw an error yet.\n            if (value === 0) {\n              throw new RangeError();\n            }\n            // Bug #187: Safari does not throw an error yet.\n            if (!Number.isFinite(endTime) || endTime < 0) {\n              throw new RangeError();\n            }\n            var currentTime = audioNode.context.currentTime;\n            if (audioParamRenderer === null) {\n              automationEventList.flush(currentTime);\n            }\n            // Bug #194: Firefox does not implicitly call setValueAtTime() if there is no previous event.\n            if (Array.from(automationEventList).length === 0) {\n              automationEventList.add(createSetValueAutomationEvent(defaultValue, currentTime));\n              nativeAudioParam.setValueAtTime(defaultValue, currentTime);\n            }\n            automationEventList.add(createExponentialRampToValueAutomationEvent(value, endTime));\n            nativeAudioParam.exponentialRampToValueAtTime(value, endTime);\n            return audioParam;\n          },\n          linearRampToValueAtTime: function linearRampToValueAtTime(value, endTime) {\n            var currentTime = audioNode.context.currentTime;\n            if (audioParamRenderer === null) {\n              automationEventList.flush(currentTime);\n            }\n            // Bug #195: Firefox does not implicitly call setValueAtTime() if there is no previous event.\n            if (Array.from(automationEventList).length === 0) {\n              automationEventList.add(createSetValueAutomationEvent(defaultValue, currentTime));\n              nativeAudioParam.setValueAtTime(defaultValue, currentTime);\n            }\n            automationEventList.add(createLinearRampToValueAutomationEvent(value, endTime));\n            nativeAudioParam.linearRampToValueAtTime(value, endTime);\n            return audioParam;\n          },\n          setTargetAtTime: function setTargetAtTime(target, startTime, timeConstant) {\n            if (audioParamRenderer === null) {\n              automationEventList.flush(audioNode.context.currentTime);\n            }\n            automationEventList.add(createSetTargetAutomationEvent(target, startTime, timeConstant));\n            nativeAudioParam.setTargetAtTime(target, startTime, timeConstant);\n            return audioParam;\n          },\n          setValueAtTime: function setValueAtTime(value, startTime) {\n            if (audioParamRenderer === null) {\n              automationEventList.flush(audioNode.context.currentTime);\n            }\n            automationEventList.add(createSetValueAutomationEvent(value, startTime));\n            nativeAudioParam.setValueAtTime(value, startTime);\n            return audioParam;\n          },\n          setValueCurveAtTime: function setValueCurveAtTime(values, startTime, duration) {\n            // Bug 183: Safari only accepts a Float32Array.\n            var convertedValues = values instanceof Float32Array ? values : new Float32Array(values);\n            /*\n             * Bug #152: Safari does not correctly interpolate the values of the curve.\n             * @todo Unfortunately there is no way to test for this behavior in a synchronous fashion which is why testing for the\n             * existence of the webkitAudioContext is used as a workaround here.\n             */\n            if (nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name === 'webkitAudioContext') {\n              var endTime = startTime + duration;\n              var sampleRate = audioNode.context.sampleRate;\n              var firstSample = Math.ceil(startTime * sampleRate);\n              var lastSample = Math.floor(endTime * sampleRate);\n              var numberOfInterpolatedValues = lastSample - firstSample;\n              var interpolatedValues = new Float32Array(numberOfInterpolatedValues);\n              for (var i = 0; i < numberOfInterpolatedValues; i += 1) {\n                var theoreticIndex = (convertedValues.length - 1) / duration * ((firstSample + i) / sampleRate - startTime);\n                var lowerIndex = Math.floor(theoreticIndex);\n                var upperIndex = Math.ceil(theoreticIndex);\n                interpolatedValues[i] = lowerIndex === upperIndex ? convertedValues[lowerIndex] : (1 - (theoreticIndex - lowerIndex)) * convertedValues[lowerIndex] + (1 - (upperIndex - theoreticIndex)) * convertedValues[upperIndex];\n              }\n              if (audioParamRenderer === null) {\n                automationEventList.flush(audioNode.context.currentTime);\n              }\n              automationEventList.add(createSetValueCurveAutomationEvent(interpolatedValues, startTime, duration));\n              nativeAudioParam.setValueCurveAtTime(interpolatedValues, startTime, duration);\n              var timeOfLastSample = lastSample / sampleRate;\n              if (timeOfLastSample < endTime) {\n                setValueAtTimeUntilPossible(audioParam, interpolatedValues[interpolatedValues.length - 1], timeOfLastSample);\n              }\n              setValueAtTimeUntilPossible(audioParam, convertedValues[convertedValues.length - 1], endTime);\n            } else {\n              if (audioParamRenderer === null) {\n                automationEventList.flush(audioNode.context.currentTime);\n              }\n              automationEventList.add(createSetValueCurveAutomationEvent(convertedValues, startTime, duration));\n              nativeAudioParam.setValueCurveAtTime(convertedValues, startTime, duration);\n            }\n            return audioParam;\n          }\n        };\n        audioParamStore.set(audioParam, nativeAudioParam);\n        audioParamAudioNodeStore.set(audioParam, audioNode);\n        addAudioParamConnections(audioParam, audioParamRenderer);\n        return audioParam;\n      };\n    };\n\n    function _createForOfIteratorHelper$5(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray$5(r)) || e) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\n    function _unsupportedIterableToArray$5(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray$5(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$5(r, a) : void 0; } }\n    function _arrayLikeToArray$5(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n    var createAudioParamRenderer = function createAudioParamRenderer(automationEventList) {\n      return {\n        replay: function replay(audioParam) {\n          var _iterator = _createForOfIteratorHelper$5(automationEventList),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var automationEvent = _step.value;\n              if (automationEvent.type === 'exponentialRampToValue') {\n                var endTime = automationEvent.endTime,\n                  value = automationEvent.value;\n                audioParam.exponentialRampToValueAtTime(value, endTime);\n              } else if (automationEvent.type === 'linearRampToValue') {\n                var _endTime = automationEvent.endTime,\n                  _value = automationEvent.value;\n                audioParam.linearRampToValueAtTime(_value, _endTime);\n              } else if (automationEvent.type === 'setTarget') {\n                var startTime = automationEvent.startTime,\n                  target = automationEvent.target,\n                  timeConstant = automationEvent.timeConstant;\n                audioParam.setTargetAtTime(target, startTime, timeConstant);\n              } else if (automationEvent.type === 'setValue') {\n                var _startTime = automationEvent.startTime,\n                  _value2 = automationEvent.value;\n                audioParam.setValueAtTime(_value2, _startTime);\n              } else if (automationEvent.type === 'setValueCurve') {\n                var duration = automationEvent.duration,\n                  _startTime2 = automationEvent.startTime,\n                  values = automationEvent.values;\n                audioParam.setValueCurveAtTime(values, _startTime2, duration);\n              } else {\n                throw new Error(\"Can't apply an unknown automation.\");\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        }\n      };\n    };\n\n    var ReadOnlyMap = /*#__PURE__*/function () {\n      function ReadOnlyMap(parameters) {\n        _classCallCheck(this, ReadOnlyMap);\n        this._map = new Map(parameters);\n      }\n      return _createClass(ReadOnlyMap, [{\n        key: \"size\",\n        get: function get() {\n          return this._map.size;\n        }\n      }, {\n        key: \"entries\",\n        value: function entries() {\n          return this._map.entries();\n        }\n      }, {\n        key: \"forEach\",\n        value: function forEach(callback) {\n          var _this = this;\n          var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n          return this._map.forEach(function (value, key) {\n            return callback.call(thisArg, value, key, _this);\n          });\n        }\n      }, {\n        key: \"get\",\n        value: function get(name) {\n          return this._map.get(name);\n        }\n      }, {\n        key: \"has\",\n        value: function has(name) {\n          return this._map.has(name);\n        }\n      }, {\n        key: \"keys\",\n        value: function keys() {\n          return this._map.keys();\n        }\n      }, {\n        key: \"values\",\n        value: function values() {\n          return this._map.values();\n        }\n      }]);\n    }();\n\n    function ownKeys$t(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\n    function _objectSpread$t(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$t(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$t(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n    function _callSuper$m(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$m() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n    function _isNativeReflectConstruct$m() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$m = function _isNativeReflectConstruct() { return !!t; })(); }\n    var DEFAULT_OPTIONS$h = {\n      channelCount: 2,\n      // Bug #61: The channelCountMode should be 'max' according to the spec but is set to 'explicit' to achieve consistent behavior.\n      channelCountMode: 'explicit',\n      channelInterpretation: 'speakers',\n      numberOfInputs: 1,\n      numberOfOutputs: 1,\n      parameterData: {},\n      processorOptions: {}\n    };\n    var createAudioWorkletNodeConstructor = function createAudioWorkletNodeConstructor(addUnrenderedAudioWorkletNode, audioNodeConstructor, createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, getAudioNodeConnections, getBackupOfflineAudioContext, getNativeContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, sanitizeAudioWorkletNodeOptions, setActiveAudioWorkletNodeInputs, testAudioWorkletNodeOptionsClonability, wrapEventListener) {\n      return /*#__PURE__*/function (_audioNodeConstructor) {\n        function AudioWorkletNode(context, name, options) {\n          var _this;\n          _classCallCheck(this, AudioWorkletNode);\n          var _a;\n          var nativeContext = getNativeContext(context);\n          var isOffline = isNativeOfflineAudioContext(nativeContext);\n          var mergedOptions = sanitizeAudioWorkletNodeOptions(_objectSpread$t(_objectSpread$t({}, DEFAULT_OPTIONS$h), options));\n          // Bug #191: Safari doesn't throw an error if the options aren't clonable.\n          testAudioWorkletNodeOptionsClonability(mergedOptions);\n          var nodeNameToProcessorConstructorMap = NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);\n          var processorConstructor = nodeNameToProcessorConstructorMap === null || nodeNameToProcessorConstructorMap === void 0 ? void 0 : nodeNameToProcessorConstructorMap.get(name);\n          // Bug #186: Chrome and Edge do not allow to create an AudioWorkletNode on a closed AudioContext.\n          var nativeContextOrBackupOfflineAudioContext = isOffline || nativeContext.state !== 'closed' ? nativeContext : (_a = getBackupOfflineAudioContext(nativeContext)) !== null && _a !== void 0 ? _a : nativeContext;\n          var nativeAudioWorkletNode = createNativeAudioWorkletNode(nativeContextOrBackupOfflineAudioContext, isOffline ? null : context.baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, mergedOptions);\n          var audioWorkletNodeRenderer = isOffline ? createAudioWorkletNodeRenderer(name, mergedOptions, processorConstructor) : null;\n          /*\n           * @todo Add a mechanism to switch an AudioWorkletNode to passive once the process() function of the AudioWorkletProcessor\n           * returns false.\n           */\n          _this = _callSuper$m(this, AudioWorkletNode, [context, true, nativeAudioWorkletNode, audioWorkletNodeRenderer]);\n          var parameters = [];\n          nativeAudioWorkletNode.parameters.forEach(function (nativeAudioParam, nm) {\n            var audioParam = createAudioParam(_this, isOffline, nativeAudioParam);\n            parameters.push([nm, audioParam]);\n          });\n          _this._nativeAudioWorkletNode = nativeAudioWorkletNode;\n          _this._onprocessorerror = null;\n          _this._parameters = new ReadOnlyMap(parameters);\n          /*\n           * Bug #86 & #87: Invoking the renderer of an AudioWorkletNode might be necessary if it has no direct or indirect connection to\n           * the destination.\n           */\n          if (isOffline) {\n            addUnrenderedAudioWorkletNode(nativeContext, _this);\n          }\n          var _getAudioNodeConnecti = getAudioNodeConnections(_this),\n            activeInputs = _getAudioNodeConnecti.activeInputs;\n          setActiveAudioWorkletNodeInputs(nativeAudioWorkletNode, activeInputs);\n          return _this;\n        }\n        _inherits(AudioWorkletNode, _audioNodeConstructor);\n        return _createClass(AudioWorkletNode, [{\n          key: \"onprocessorerror\",\n          get: function get() {\n            return this._onprocessorerror;\n          },\n          set: function set(value) {\n            var wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n            this._nativeAudioWorkletNode.onprocessorerror = wrappedListener;\n            var nativeOnProcessorError = this._nativeAudioWorkletNode.onprocessorerror;\n            this._onprocessorerror = nativeOnProcessorError !== null && nativeOnProcessorError === wrappedListener ? value : nativeOnProcessorError;\n          }\n        }, {\n          key: \"parameters\",\n          get: function get() {\n            if (this._parameters === null) {\n              // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n              return this._nativeAudioWorkletNode.parameters;\n            }\n            return this._parameters;\n          }\n        }, {\n          key: \"port\",\n          get: function get() {\n            return this._nativeAudioWorkletNode.port;\n          }\n        }]);\n      }(audioNodeConstructor);\n    };\n\n    function copyFromChannel(audioBuffer,\n    // @todo There is currently no way to define something like { [ key: number | string ]: Float32Array }\n    parent, key, channelNumber, bufferOffset) {\n      if (typeof audioBuffer.copyFromChannel === 'function') {\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (parent[key].byteLength === 0) {\n          parent[key] = new Float32Array(128);\n        }\n        audioBuffer.copyFromChannel(parent[key], channelNumber, bufferOffset);\n        // Bug #5: Safari does not support copyFromChannel().\n      } else {\n        var channelData = audioBuffer.getChannelData(channelNumber);\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (parent[key].byteLength === 0) {\n          parent[key] = channelData.slice(bufferOffset, bufferOffset + 128);\n        } else {\n          var slicedInput = new Float32Array(channelData.buffer, bufferOffset * Float32Array.BYTES_PER_ELEMENT, 128);\n          parent[key].set(slicedInput);\n        }\n      }\n    }\n\n    var copyToChannel = function copyToChannel(audioBuffer, parent, key, channelNumber, bufferOffset) {\n      if (typeof audioBuffer.copyToChannel === 'function') {\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (parent[key].byteLength !== 0) {\n          audioBuffer.copyToChannel(parent[key], channelNumber, bufferOffset);\n        }\n        // Bug #5: Safari does not support copyToChannel().\n      } else {\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (parent[key].byteLength !== 0) {\n          audioBuffer.getChannelData(channelNumber).set(parent[key], bufferOffset);\n        }\n      }\n    };\n\n    var createNestedArrays = function createNestedArrays(x, y) {\n      var arrays = [];\n      for (var i = 0; i < x; i += 1) {\n        var array = [];\n        var length = typeof y === 'number' ? y : y[i];\n        for (var j = 0; j < length; j += 1) {\n          array.push(new Float32Array(128));\n        }\n        arrays.push(array);\n      }\n      return arrays;\n    };\n\n    var getAudioWorkletProcessor = function getAudioWorkletProcessor(nativeOfflineAudioContext, proxy) {\n      var nodeToProcessorMap = getValueForKey(NODE_TO_PROCESSOR_MAPS, nativeOfflineAudioContext);\n      var nativeAudioWorkletNode = getNativeAudioNode(proxy);\n      return getValueForKey(nodeToProcessorMap, nativeAudioWorkletNode);\n    };\n\n    function _createForOfIteratorHelper$4(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray$4(r)) || e) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\n    function _unsupportedIterableToArray$4(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray$4(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$4(r, a) : void 0; } }\n    function _arrayLikeToArray$4(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n    function ownKeys$s(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\n    function _objectSpread$s(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$s(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$s(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n    var processBuffer = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(proxy, renderedBuffer, nativeOfflineAudioContext, options, outputChannelCount, processorConstructor, exposeCurrentFrameAndCurrentTime) {\n        var length, numberOfInputChannels, numberOfOutputChannels, processedBuffer, audioNodeConnections, audioWorkletProcessor, inputs, outputs, parameters, _loop, _ret, i;\n        return _regeneratorRuntime.wrap(function _callee$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              // Ceil the length to the next full render quantum.\n              // Bug #17: Safari does not yet expose the length.\n              length = renderedBuffer === null ? Math.ceil(proxy.context.length / 128) * 128 : renderedBuffer.length;\n              numberOfInputChannels = options.channelCount * options.numberOfInputs;\n              numberOfOutputChannels = outputChannelCount.reduce(function (sum, value) {\n                return sum + value;\n              }, 0);\n              processedBuffer = numberOfOutputChannels === 0 ? null : nativeOfflineAudioContext.createBuffer(numberOfOutputChannels, length, nativeOfflineAudioContext.sampleRate);\n              if (!(processorConstructor === undefined)) {\n                _context2.next = 6;\n                break;\n              }\n              throw new Error('Missing the processor constructor.');\n            case 6:\n              audioNodeConnections = getAudioNodeConnections(proxy);\n              _context2.next = 9;\n              return getAudioWorkletProcessor(nativeOfflineAudioContext, proxy);\n            case 9:\n              audioWorkletProcessor = _context2.sent;\n              inputs = createNestedArrays(options.numberOfInputs, options.channelCount);\n              outputs = createNestedArrays(options.numberOfOutputs, outputChannelCount);\n              parameters = Array.from(proxy.parameters.keys()).reduce(function (prmtrs, name) {\n                return _objectSpread$s(_objectSpread$s({}, prmtrs), {}, _defineProperty({}, name, new Float32Array(128)));\n              }, {});\n              _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop(i) {\n                var j, k, _j, _k, potentiallyEmptyInputs, activeSourceFlag, _j2, outputChannelSplitterNodeOutput, _k2;\n                return _regeneratorRuntime.wrap(function _loop$(_context) {\n                  while (1) switch (_context.prev = _context.next) {\n                    case 0:\n                      if (options.numberOfInputs > 0 && renderedBuffer !== null) {\n                        for (j = 0; j < options.numberOfInputs; j += 1) {\n                          for (k = 0; k < options.channelCount; k += 1) {\n                            copyFromChannel(renderedBuffer, inputs[j], k, k, i);\n                          }\n                        }\n                      }\n                      if (processorConstructor.parameterDescriptors !== undefined && renderedBuffer !== null) {\n                        processorConstructor.parameterDescriptors.forEach(function (_ref2, index) {\n                          var name = _ref2.name;\n                          copyFromChannel(renderedBuffer, parameters, name, numberOfInputChannels + index, i);\n                        });\n                      }\n                      for (_j = 0; _j < options.numberOfInputs; _j += 1) {\n                        for (_k = 0; _k < outputChannelCount[_j]; _k += 1) {\n                          // The byteLength will be 0 when the ArrayBuffer was transferred.\n                          if (outputs[_j][_k].byteLength === 0) {\n                            outputs[_j][_k] = new Float32Array(128);\n                          }\n                        }\n                      }\n                      _context.prev = 3;\n                      potentiallyEmptyInputs = inputs.map(function (input, index) {\n                        if (audioNodeConnections.activeInputs[index].size === 0) {\n                          return [];\n                        }\n                        return input;\n                      });\n                      activeSourceFlag = exposeCurrentFrameAndCurrentTime(i / nativeOfflineAudioContext.sampleRate, nativeOfflineAudioContext.sampleRate, function () {\n                        return audioWorkletProcessor.process(potentiallyEmptyInputs, outputs, parameters);\n                      });\n                      if (processedBuffer !== null) {\n                        for (_j2 = 0, outputChannelSplitterNodeOutput = 0; _j2 < options.numberOfOutputs; _j2 += 1) {\n                          for (_k2 = 0; _k2 < outputChannelCount[_j2]; _k2 += 1) {\n                            copyToChannel(processedBuffer, outputs[_j2], _k2, outputChannelSplitterNodeOutput + _k2, i);\n                          }\n                          outputChannelSplitterNodeOutput += outputChannelCount[_j2];\n                        }\n                      }\n                      if (activeSourceFlag) {\n                        _context.next = 9;\n                        break;\n                      }\n                      return _context.abrupt(\"return\", 0);\n                    case 9:\n                      _context.next = 15;\n                      break;\n                    case 11:\n                      _context.prev = 11;\n                      _context.t0 = _context[\"catch\"](3);\n                      proxy.dispatchEvent(new ErrorEvent('processorerror', {\n                        colno: _context.t0.colno,\n                        filename: _context.t0.filename,\n                        lineno: _context.t0.lineno,\n                        message: _context.t0.message\n                      }));\n                      return _context.abrupt(\"return\", 0);\n                    case 15:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }, _loop, null, [[3, 11]]);\n              });\n              i = 0;\n            case 15:\n              if (!(i < length)) {\n                _context2.next = 23;\n                break;\n              }\n              return _context2.delegateYield(_loop(i), \"t0\", 17);\n            case 17:\n              _ret = _context2.t0;\n              if (!(_ret === 0)) {\n                _context2.next = 20;\n                break;\n              }\n              return _context2.abrupt(\"break\", 23);\n            case 20:\n              i += 128;\n              _context2.next = 15;\n              break;\n            case 23:\n              return _context2.abrupt(\"return\", processedBuffer);\n            case 24:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee);\n      }));\n      return function processBuffer(_x, _x2, _x3, _x4, _x5, _x6, _x7) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    var createAudioWorkletNodeRendererFactory = function createAudioWorkletNodeRendererFactory(connectAudioParam, connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, deleteUnrenderedAudioWorkletNode, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getNativeAudioNode, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext) {\n      return function (name, options, processorConstructor) {\n        var renderedNativeAudioNodes = new WeakMap();\n        var processedBufferPromise = null;\n        var createAudioNode = /*#__PURE__*/function () {\n          var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(proxy, nativeOfflineAudioContext) {\n            var nativeAudioWorkletNode, nativeOutputNodes, nativeAudioWorkletNodeIsOwnedByContext, outputChannelCount, numberOfOutputChannels, outputChannelSplitterNode, outputChannelMergerNodes, i, outputGainNode, numberOfInputChannels, numberOfParameters, numberOfChannels, renderBuffer, processedBuffer, audioBufferSourceNode, _nativeOutputNodes, _nativeOutputNodes2, _outputChannelSplitterNode, _outputChannelMergerNodes, _outputGainNode, _i3, outputChannelSplitterNodeOutput, outputChannelMergerNode, j, _iterator2, _step2, _step2$value, nm, audioParam, _iterator3, _step3, _step3$value, _nm, _audioParam;\n            return _regeneratorRuntime.wrap(function _callee4$(_context5) {\n              while (1) switch (_context5.prev = _context5.next) {\n                case 0:\n                  nativeAudioWorkletNode = getNativeAudioNode(proxy);\n                  nativeOutputNodes = null;\n                  nativeAudioWorkletNodeIsOwnedByContext = isOwnedByContext(nativeAudioWorkletNode, nativeOfflineAudioContext);\n                  outputChannelCount = Array.isArray(options.outputChannelCount) ? options.outputChannelCount : Array.from(options.outputChannelCount); // Bug #61: Only Chrome, Edge & Firefox have an implementation of the AudioWorkletNode yet.\n                  if (nativeAudioWorkletNodeConstructor === null) {\n                    numberOfOutputChannels = outputChannelCount.reduce(function (sum, value) {\n                      return sum + value;\n                    }, 0);\n                    outputChannelSplitterNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, {\n                      channelCount: Math.max(1, numberOfOutputChannels),\n                      channelCountMode: 'explicit',\n                      channelInterpretation: 'discrete',\n                      numberOfOutputs: Math.max(1, numberOfOutputChannels)\n                    });\n                    outputChannelMergerNodes = [];\n                    for (i = 0; i < proxy.numberOfOutputs; i += 1) {\n                      outputChannelMergerNodes.push(createNativeChannelMergerNode(nativeOfflineAudioContext, {\n                        channelCount: 1,\n                        channelCountMode: 'explicit',\n                        channelInterpretation: 'speakers',\n                        numberOfInputs: outputChannelCount[i]\n                      }));\n                    }\n                    outputGainNode = createNativeGainNode(nativeOfflineAudioContext, {\n                      channelCount: options.channelCount,\n                      channelCountMode: options.channelCountMode,\n                      channelInterpretation: options.channelInterpretation,\n                      gain: 1\n                    });\n                    outputGainNode.connect = connectMultipleOutputs.bind(null, outputChannelMergerNodes);\n                    outputGainNode.disconnect = disconnectMultipleOutputs.bind(null, outputChannelMergerNodes);\n                    nativeOutputNodes = [outputChannelSplitterNode, outputChannelMergerNodes, outputGainNode];\n                  } else if (!nativeAudioWorkletNodeIsOwnedByContext) {\n                    nativeAudioWorkletNode = new nativeAudioWorkletNodeConstructor(nativeOfflineAudioContext, name);\n                  }\n                  renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeOutputNodes === null ? nativeAudioWorkletNode : nativeOutputNodes[2]);\n                  if (!(nativeOutputNodes !== null)) {\n                    _context5.next = 41;\n                    break;\n                  }\n                  if (!(processedBufferPromise === null)) {\n                    _context5.next = 32;\n                    break;\n                  }\n                  if (!(processorConstructor === undefined)) {\n                    _context5.next = 10;\n                    break;\n                  }\n                  throw new Error('Missing the processor constructor.');\n                case 10:\n                  if (!(nativeOfflineAudioContextConstructor === null)) {\n                    _context5.next = 12;\n                    break;\n                  }\n                  throw new Error('Missing the native OfflineAudioContext constructor.');\n                case 12:\n                  // Bug #47: The AudioDestinationNode in Safari gets not initialized correctly.\n                  numberOfInputChannels = proxy.channelCount * proxy.numberOfInputs;\n                  numberOfParameters = processorConstructor.parameterDescriptors === undefined ? 0 : processorConstructor.parameterDescriptors.length;\n                  numberOfChannels = numberOfInputChannels + numberOfParameters;\n                  renderBuffer = /*#__PURE__*/function () {\n                    var _ref4 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                      var partialOfflineAudioContext, gainNodes, inputChannelSplitterNodes, _i, constantSourceNodes, inputChannelMergerNode, _i2, j, _iterator, _step, _step$value, index, constantSourceNode;\n                      return _regeneratorRuntime.wrap(function _callee3$(_context4) {\n                        while (1) switch (_context4.prev = _context4.next) {\n                          case 0:\n                            partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(numberOfChannels,\n                            // Ceil the length to the next full render quantum.\n                            // Bug #17: Safari does not yet expose the length.\n                            Math.ceil(proxy.context.length / 128) * 128, nativeOfflineAudioContext.sampleRate);\n                            gainNodes = [];\n                            inputChannelSplitterNodes = [];\n                            for (_i = 0; _i < options.numberOfInputs; _i += 1) {\n                              gainNodes.push(createNativeGainNode(partialOfflineAudioContext, {\n                                channelCount: options.channelCount,\n                                channelCountMode: options.channelCountMode,\n                                channelInterpretation: options.channelInterpretation,\n                                gain: 1\n                              }));\n                              inputChannelSplitterNodes.push(createNativeChannelSplitterNode(partialOfflineAudioContext, {\n                                channelCount: options.channelCount,\n                                channelCountMode: 'explicit',\n                                channelInterpretation: 'discrete',\n                                numberOfOutputs: options.channelCount\n                              }));\n                            }\n                            _context4.next = 6;\n                            return Promise.all(Array.from(proxy.parameters.values()).map(/*#__PURE__*/function () {\n                              var _ref5 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(audioParam) {\n                                var constantSourceNode;\n                                return _regeneratorRuntime.wrap(function _callee2$(_context3) {\n                                  while (1) switch (_context3.prev = _context3.next) {\n                                    case 0:\n                                      constantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {\n                                        channelCount: 1,\n                                        channelCountMode: 'explicit',\n                                        channelInterpretation: 'discrete',\n                                        offset: audioParam.value\n                                      });\n                                      _context3.next = 3;\n                                      return renderAutomation(partialOfflineAudioContext, audioParam, constantSourceNode.offset);\n                                    case 3:\n                                      return _context3.abrupt(\"return\", constantSourceNode);\n                                    case 4:\n                                    case \"end\":\n                                      return _context3.stop();\n                                  }\n                                }, _callee2);\n                              }));\n                              return function (_x10) {\n                                return _ref5.apply(this, arguments);\n                              };\n                            }()));\n                          case 6:\n                            constantSourceNodes = _context4.sent;\n                            inputChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {\n                              channelCount: 1,\n                              channelCountMode: 'explicit',\n                              channelInterpretation: 'speakers',\n                              numberOfInputs: Math.max(1, numberOfInputChannels + numberOfParameters)\n                            });\n                            for (_i2 = 0; _i2 < options.numberOfInputs; _i2 += 1) {\n                              gainNodes[_i2].connect(inputChannelSplitterNodes[_i2]);\n                              for (j = 0; j < options.channelCount; j += 1) {\n                                inputChannelSplitterNodes[_i2].connect(inputChannelMergerNode, j, _i2 * options.channelCount + j);\n                              }\n                            }\n                            _iterator = _createForOfIteratorHelper$4(constantSourceNodes.entries());\n                            try {\n                              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                                _step$value = _slicedToArray(_step.value, 2), index = _step$value[0], constantSourceNode = _step$value[1];\n                                constantSourceNode.connect(inputChannelMergerNode, 0, numberOfInputChannels + index);\n                                constantSourceNode.start(0);\n                              }\n                            } catch (err) {\n                              _iterator.e(err);\n                            } finally {\n                              _iterator.f();\n                            }\n                            inputChannelMergerNode.connect(partialOfflineAudioContext.destination);\n                            _context4.next = 14;\n                            return Promise.all(gainNodes.map(function (gainNode) {\n                              return renderInputsOfAudioNode(proxy, partialOfflineAudioContext, gainNode);\n                            }));\n                          case 14:\n                            return _context4.abrupt(\"return\", renderNativeOfflineAudioContext(partialOfflineAudioContext));\n                          case 15:\n                          case \"end\":\n                            return _context4.stop();\n                        }\n                      }, _callee3);\n                    }));\n                    return function renderBuffer() {\n                      return _ref4.apply(this, arguments);\n                    };\n                  }();\n                  _context5.t0 = processBuffer;\n                  _context5.t1 = proxy;\n                  if (!(numberOfChannels === 0)) {\n                    _context5.next = 22;\n                    break;\n                  }\n                  _context5.t2 = null;\n                  _context5.next = 25;\n                  break;\n                case 22:\n                  _context5.next = 24;\n                  return renderBuffer();\n                case 24:\n                  _context5.t2 = _context5.sent;\n                case 25:\n                  _context5.t3 = _context5.t2;\n                  _context5.t4 = nativeOfflineAudioContext;\n                  _context5.t5 = options;\n                  _context5.t6 = outputChannelCount;\n                  _context5.t7 = processorConstructor;\n                  _context5.t8 = exposeCurrentFrameAndCurrentTime;\n                  processedBufferPromise = (0, _context5.t0)(_context5.t1, _context5.t3, _context5.t4, _context5.t5, _context5.t6, _context5.t7, _context5.t8);\n                case 32:\n                  _context5.next = 34;\n                  return processedBufferPromise;\n                case 34:\n                  processedBuffer = _context5.sent;\n                  audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, {\n                    buffer: null,\n                    channelCount: 2,\n                    channelCountMode: 'max',\n                    channelInterpretation: 'speakers',\n                    loop: false,\n                    loopEnd: 0,\n                    loopStart: 0,\n                    playbackRate: 1\n                  });\n                  _nativeOutputNodes = nativeOutputNodes, _nativeOutputNodes2 = _slicedToArray(_nativeOutputNodes, 3), _outputChannelSplitterNode = _nativeOutputNodes2[0], _outputChannelMergerNodes = _nativeOutputNodes2[1], _outputGainNode = _nativeOutputNodes2[2];\n                  if (processedBuffer !== null) {\n                    audioBufferSourceNode.buffer = processedBuffer;\n                    audioBufferSourceNode.start(0);\n                  }\n                  audioBufferSourceNode.connect(_outputChannelSplitterNode);\n                  for (_i3 = 0, outputChannelSplitterNodeOutput = 0; _i3 < proxy.numberOfOutputs; _i3 += 1) {\n                    outputChannelMergerNode = _outputChannelMergerNodes[_i3];\n                    for (j = 0; j < outputChannelCount[_i3]; j += 1) {\n                      _outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);\n                    }\n                    outputChannelSplitterNodeOutput += outputChannelCount[_i3];\n                  }\n                  return _context5.abrupt(\"return\", _outputGainNode);\n                case 41:\n                  if (nativeAudioWorkletNodeIsOwnedByContext) {\n                    _context5.next = 61;\n                    break;\n                  }\n                  _iterator2 = _createForOfIteratorHelper$4(proxy.parameters.entries());\n                  _context5.prev = 43;\n                  _iterator2.s();\n                case 45:\n                  if ((_step2 = _iterator2.n()).done) {\n                    _context5.next = 51;\n                    break;\n                  }\n                  _step2$value = _slicedToArray(_step2.value, 2), nm = _step2$value[0], audioParam = _step2$value[1];\n                  _context5.next = 49;\n                  return renderAutomation(nativeOfflineAudioContext, audioParam,\n                  // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n                  nativeAudioWorkletNode.parameters.get(nm));\n                case 49:\n                  _context5.next = 45;\n                  break;\n                case 51:\n                  _context5.next = 56;\n                  break;\n                case 53:\n                  _context5.prev = 53;\n                  _context5.t9 = _context5[\"catch\"](43);\n                  _iterator2.e(_context5.t9);\n                case 56:\n                  _context5.prev = 56;\n                  _iterator2.f();\n                  return _context5.finish(56);\n                case 59:\n                  _context5.next = 78;\n                  break;\n                case 61:\n                  _iterator3 = _createForOfIteratorHelper$4(proxy.parameters.entries());\n                  _context5.prev = 62;\n                  _iterator3.s();\n                case 64:\n                  if ((_step3 = _iterator3.n()).done) {\n                    _context5.next = 70;\n                    break;\n                  }\n                  _step3$value = _slicedToArray(_step3.value, 2), _nm = _step3$value[0], _audioParam = _step3$value[1];\n                  _context5.next = 68;\n                  return connectAudioParam(nativeOfflineAudioContext, _audioParam,\n                  // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n                  nativeAudioWorkletNode.parameters.get(_nm));\n                case 68:\n                  _context5.next = 64;\n                  break;\n                case 70:\n                  _context5.next = 75;\n                  break;\n                case 72:\n                  _context5.prev = 72;\n                  _context5.t10 = _context5[\"catch\"](62);\n                  _iterator3.e(_context5.t10);\n                case 75:\n                  _context5.prev = 75;\n                  _iterator3.f();\n                  return _context5.finish(75);\n                case 78:\n                  _context5.next = 80;\n                  return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioWorkletNode);\n                case 80:\n                  return _context5.abrupt(\"return\", nativeAudioWorkletNode);\n                case 81:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }, _callee4, null, [[43, 53, 56, 59], [62, 72, 75, 78]]);\n          }));\n          return function createAudioNode(_x8, _x9) {\n            return _ref3.apply(this, arguments);\n          };\n        }();\n        return {\n          render: function render(proxy, nativeOfflineAudioContext) {\n            deleteUnrenderedAudioWorkletNode(nativeOfflineAudioContext, proxy);\n            var renderedNativeAudioWorkletNodeOrGainNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n            if (renderedNativeAudioWorkletNodeOrGainNode !== undefined) {\n              return Promise.resolve(renderedNativeAudioWorkletNodeOrGainNode);\n            }\n            return createAudioNode(proxy, nativeOfflineAudioContext);\n          }\n        };\n      };\n    };\n\n    function ownKeys$r(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\n    function _objectSpread$r(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$r(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$r(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n    function _callSuper$l(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$l() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n    function _isNativeReflectConstruct$l() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$l = function _isNativeReflectConstruct() { return !!t; })(); }\n    var createBaseAudioContextConstructor = function createBaseAudioContextConstructor(addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, _decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor) {\n      return /*#__PURE__*/function (_minimalBaseAudioCont) {\n        function BaseAudioContext(_nativeContext, numberOfChannels) {\n          var _this;\n          _classCallCheck(this, BaseAudioContext);\n          _this = _callSuper$l(this, BaseAudioContext, [_nativeContext, numberOfChannels]);\n          _this._nativeContext = _nativeContext;\n          _this._audioWorklet = addAudioWorkletModule === undefined ? undefined : {\n            addModule: function addModule(moduleURL, options) {\n              return addAudioWorkletModule(_this, moduleURL, options);\n            }\n          };\n          return _this;\n        }\n        _inherits(BaseAudioContext, _minimalBaseAudioCont);\n        return _createClass(BaseAudioContext, [{\n          key: \"audioWorklet\",\n          get: function get() {\n            return this._audioWorklet;\n          }\n        }, {\n          key: \"createAnalyser\",\n          value: function createAnalyser() {\n            return new analyserNodeConstructor(this);\n          }\n        }, {\n          key: \"createBiquadFilter\",\n          value: function createBiquadFilter() {\n            return new biquadFilterNodeConstructor(this);\n          }\n        }, {\n          key: \"createBuffer\",\n          value: function createBuffer(numberOfChannels, length, sampleRate) {\n            return new audioBufferConstructor({\n              length: length,\n              numberOfChannels: numberOfChannels,\n              sampleRate: sampleRate\n            });\n          }\n        }, {\n          key: \"createBufferSource\",\n          value: function createBufferSource() {\n            return new audioBufferSourceNodeConstructor(this);\n          }\n        }, {\n          key: \"createChannelMerger\",\n          value: function createChannelMerger() {\n            var numberOfInputs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 6;\n            return new channelMergerNodeConstructor(this, {\n              numberOfInputs: numberOfInputs\n            });\n          }\n        }, {\n          key: \"createChannelSplitter\",\n          value: function createChannelSplitter() {\n            var numberOfOutputs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 6;\n            return new channelSplitterNodeConstructor(this, {\n              numberOfOutputs: numberOfOutputs\n            });\n          }\n        }, {\n          key: \"createConstantSource\",\n          value: function createConstantSource() {\n            return new constantSourceNodeConstructor(this);\n          }\n        }, {\n          key: \"createConvolver\",\n          value: function createConvolver() {\n            return new convolverNodeConstructor(this);\n          }\n        }, {\n          key: \"createDelay\",\n          value: function createDelay() {\n            var maxDelayTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n            return new delayNodeConstructor(this, {\n              maxDelayTime: maxDelayTime\n            });\n          }\n        }, {\n          key: \"createDynamicsCompressor\",\n          value: function createDynamicsCompressor() {\n            return new dynamicsCompressorNodeConstructor(this);\n          }\n        }, {\n          key: \"createGain\",\n          value: function createGain() {\n            return new gainNodeConstructor(this);\n          }\n        }, {\n          key: \"createIIRFilter\",\n          value: function createIIRFilter(feedforward, feedback) {\n            return new iIRFilterNodeConstructor(this, {\n              feedback: feedback,\n              feedforward: feedforward\n            });\n          }\n        }, {\n          key: \"createOscillator\",\n          value: function createOscillator() {\n            return new oscillatorNodeConstructor(this);\n          }\n        }, {\n          key: \"createPanner\",\n          value: function createPanner() {\n            return new pannerNodeConstructor(this);\n          }\n        }, {\n          key: \"createPeriodicWave\",\n          value: function createPeriodicWave(real, imag) {\n            var constraints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n              disableNormalization: false\n            };\n            return new periodicWaveConstructor(this, _objectSpread$r(_objectSpread$r({}, constraints), {}, {\n              imag: imag,\n              real: real\n            }));\n          }\n        }, {\n          key: \"createStereoPanner\",\n          value: function createStereoPanner() {\n            return new stereoPannerNodeConstructor(this);\n          }\n        }, {\n          key: \"createWaveShaper\",\n          value: function createWaveShaper() {\n            return new waveShaperNodeConstructor(this);\n          }\n        }, {\n          key: \"decodeAudioData\",\n          value: function decodeAudioData(audioData, successCallback, errorCallback) {\n            return _decodeAudioData(this._nativeContext, audioData).then(function (audioBuffer) {\n              if (typeof successCallback === 'function') {\n                successCallback(audioBuffer);\n              }\n              return audioBuffer;\n            }, function (err) {\n              if (typeof errorCallback === 'function') {\n                errorCallback(err);\n              }\n              throw err;\n            });\n          }\n        }]);\n      }(minimalBaseAudioContextConstructor);\n    };\n\n    function ownKeys$q(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\n    function _objectSpread$q(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$q(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$q(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n    function _callSuper$k(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$k() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n    function _isNativeReflectConstruct$k() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$k = function _isNativeReflectConstruct() { return !!t; })(); }\n    var DEFAULT_OPTIONS$g = {\n      Q: 1,\n      channelCount: 2,\n      channelCountMode: 'max',\n      channelInterpretation: 'speakers',\n      detune: 0,\n      frequency: 350,\n      gain: 0,\n      type: 'lowpass'\n    };\n    var createBiquadFilterNodeConstructor = function createBiquadFilterNodeConstructor(audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) {\n      return /*#__PURE__*/function (_audioNodeConstructor) {\n        function BiquadFilterNode(context, options) {\n          var _this;\n          _classCallCheck(this, BiquadFilterNode);\n          var nativeContext = getNativeContext(context);\n          var mergedOptions = _objectSpread$q(_objectSpread$q({}, DEFAULT_OPTIONS$g), options);\n          var nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeContext, mergedOptions);\n          var isOffline = isNativeOfflineAudioContext(nativeContext);\n          var biquadFilterNodeRenderer = isOffline ? createBiquadFilterNodeRenderer() : null;\n          _this = _callSuper$k(this, BiquadFilterNode, [context, false, nativeBiquadFilterNode, biquadFilterNodeRenderer]);\n          // Bug #80: Safari does not export the correct values for maxValue and minValue.\n          _this._Q = createAudioParam(_this, isOffline, nativeBiquadFilterNode.Q, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n          // Bug #78: Firefox & Safari do not export the correct values for maxValue and minValue.\n          _this._detune = createAudioParam(_this, isOffline, nativeBiquadFilterNode.detune, 1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT), -1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT));\n          // Bug #77: Firefox & Safari do not export the correct value for minValue.\n          _this._frequency = createAudioParam(_this, isOffline, nativeBiquadFilterNode.frequency, context.sampleRate / 2, 0);\n          // Bug #79: Firefox & Safari do not export the correct values for maxValue and minValue.\n          _this._gain = createAudioParam(_this, isOffline, nativeBiquadFilterNode.gain, 40 * Math.log10(MOST_POSITIVE_SINGLE_FLOAT), MOST_NEGATIVE_SINGLE_FLOAT);\n          _this._nativeBiquadFilterNode = nativeBiquadFilterNode;\n          // @todo Determine a meaningful tail-time instead of just using one second.\n          setAudioNodeTailTime(_this, 1);\n          return _this;\n        }\n        _inherits(BiquadFilterNode, _audioNodeConstructor);\n        return _createClass(BiquadFilterNode, [{\n          key: \"detune\",\n          get: function get() {\n            return this._detune;\n          }\n        }, {\n          key: \"frequency\",\n          get: function get() {\n            return this._frequency;\n          }\n        }, {\n          key: \"gain\",\n          get: function get() {\n            return this._gain;\n          }\n        }, {\n          key: \"Q\",\n          get: function get() {\n            return this._Q;\n          }\n        }, {\n          key: \"type\",\n          get: function get() {\n            return this._nativeBiquadFilterNode.type;\n          },\n          set: function set(value) {\n            this._nativeBiquadFilterNode.type = value;\n          }\n        }, {\n          key: \"getFrequencyResponse\",\n          value: function getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n            // Bug #189: Safari does throw an InvalidStateError.\n            try {\n              this._nativeBiquadFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n            } catch (err) {\n              if (err.code === 11) {\n                throw createInvalidAccessError();\n              }\n              throw err;\n            }\n            // Bug #68: Safari does not throw an error if the parameters differ in their length.\n            if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {\n              throw createInvalidAccessError();\n            }\n          }\n        }]);\n      }(audioNodeConstructor);\n    };\n\n    var createBiquadFilterNodeRendererFactory = function createBiquadFilterNodeRendererFactory(connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) {\n      return function () {\n        var renderedNativeBiquadFilterNodes = new WeakMap();\n        var createBiquadFilterNode = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(proxy, nativeOfflineAudioContext) {\n            var nativeBiquadFilterNode, nativeBiquadFilterNodeIsOwnedByContext, options;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  nativeBiquadFilterNode = getNativeAudioNode(proxy);\n                  /*\n                   * If the initially used nativeBiquadFilterNode was not constructed on the same OfflineAudioContext it needs to be created\n                   * again.\n                   */\n                  nativeBiquadFilterNodeIsOwnedByContext = isOwnedByContext(nativeBiquadFilterNode, nativeOfflineAudioContext);\n                  if (!nativeBiquadFilterNodeIsOwnedByContext) {\n                    options = {\n                      Q: nativeBiquadFilterNode.Q.value,\n                      channelCount: nativeBiquadFilterNode.channelCount,\n                      channelCountMode: nativeBiquadFilterNode.channelCountMode,\n                      channelInterpretation: nativeBiquadFilterNode.channelInterpretation,\n                      detune: nativeBiquadFilterNode.detune.value,\n                      frequency: nativeBiquadFilterNode.frequency.value,\n                      gain: nativeBiquadFilterNode.gain.value,\n                      type: nativeBiquadFilterNode.type\n                    };\n                    nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeOfflineAudioContext, options);\n                  }\n                  renderedNativeBiquadFilterNodes.set(nativeOfflineAudioContext, nativeBiquadFilterNode);\n                  if (nativeBiquadFilterNodeIsOwnedByContext) {\n                    _context.next = 15;\n                    break;\n                  }\n                  _context.next = 7;\n                  return renderAutomation(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q);\n                case 7:\n                  _context.next = 9;\n                  return renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune);\n                case 9:\n                  _context.next = 11;\n                  return renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency);\n                case 11:\n                  _context.next = 13;\n                  return renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain);\n                case 13:\n                  _context.next = 23;\n                  break;\n                case 15:\n                  _context.next = 17;\n                  return connectAudioParam(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q);\n                case 17:\n                  _context.next = 19;\n                  return connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune);\n                case 19:\n                  _context.next = 21;\n                  return connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency);\n                case 21:\n                  _context.next = 23;\n                  return connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain);\n                case 23:\n                  _context.next = 25;\n                  return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeBiquadFilterNode);\n                case 25:\n                  return _context.abrupt(\"return\", nativeBiquadFilterNode);\n                case 26:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _callee);\n          }));\n          return function createBiquadFilterNode(_x, _x2) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n        return {\n          render: function render(proxy, nativeOfflineAudioContext) {\n            var renderedNativeBiquadFilterNode = renderedNativeBiquadFilterNodes.get(nativeOfflineAudioContext);\n            if (renderedNativeBiquadFilterNode !== undefined) {\n              return Promise.resolve(renderedNativeBiquadFilterNode);\n            }\n            return createBiquadFilterNode(proxy, nativeOfflineAudioContext);\n          }\n        };\n      };\n    };\n\n    var createCacheTestResult = function createCacheTestResult(ongoingTests, testResults) {\n      return function (tester, test) {\n        var cachedTestResult = testResults.get(tester);\n        if (cachedTestResult !== undefined) {\n          return cachedTestResult;\n        }\n        var ongoingTest = ongoingTests.get(tester);\n        if (ongoingTest !== undefined) {\n          return ongoingTest;\n        }\n        try {\n          var synchronousTestResult = test();\n          if (synchronousTestResult instanceof Promise) {\n            ongoingTests.set(tester, synchronousTestResult);\n            return synchronousTestResult[\"catch\"](function () {\n              return false;\n            }).then(function (finalTestResult) {\n              ongoingTests[\"delete\"](tester);\n              testResults.set(tester, finalTestResult);\n              return finalTestResult;\n            });\n          }\n          testResults.set(tester, synchronousTestResult);\n          return synchronousTestResult;\n        } catch (_unused) {\n          testResults.set(tester, false);\n          return false;\n        }\n      };\n    };\n\n    function ownKeys$p(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\n    function _objectSpread$p(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$p(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$p(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n    function _callSuper$j(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$j() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n    function _isNativeReflectConstruct$j() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$j = function _isNativeReflectConstruct() { return !!t; })(); }\n    var DEFAULT_OPTIONS$f = {\n      channelCount: 1,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'speakers',\n      numberOfInputs: 6\n    };\n    var createChannelMergerNodeConstructor = function createChannelMergerNodeConstructor(audioNodeConstructor, createChannelMergerNodeRenderer, createNativeChannelMergerNode, getNativeContext, isNativeOfflineAudioContext) {\n      return /*#__PURE__*/function (_audioNodeConstructor) {\n        function ChannelMergerNode(context, options) {\n          _classCallCheck(this, ChannelMergerNode);\n          var nativeContext = getNativeContext(context);\n          var mergedOptions = _objectSpread$p(_objectSpread$p({}, DEFAULT_OPTIONS$f), options);\n          var nativeChannelMergerNode = createNativeChannelMergerNode(nativeContext, mergedOptions);\n          var channelMergerNodeRenderer = isNativeOfflineAudioContext(nativeContext) ? createChannelMergerNodeRenderer() : null;\n          return _callSuper$j(this, ChannelMergerNode, [context, false, nativeChannelMergerNode, channelMergerNodeRenderer]);\n        }\n        _inherits(ChannelMergerNode, _audioNodeConstructor);\n        return _createClass(ChannelMergerNode);\n      }(audioNodeConstructor);\n    };\n\n    var createChannelMergerNodeRendererFactory = function createChannelMergerNodeRendererFactory(createNativeChannelMergerNode, getNativeAudioNode, renderInputsOfAudioNode) {\n      return function () {\n        var renderedNativeAudioNodes = new WeakMap();\n        var createAudioNode = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(proxy, nativeOfflineAudioContext) {\n            var nativeAudioNode, nativeAudioNodeIsOwnedByContext, options;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  nativeAudioNode = getNativeAudioNode(proxy); // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n                  nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n                  if (!nativeAudioNodeIsOwnedByContext) {\n                    options = {\n                      channelCount: nativeAudioNode.channelCount,\n                      channelCountMode: nativeAudioNode.channelCountMode,\n                      channelInterpretation: nativeAudioNode.channelInterpretation,\n                      numberOfInputs: nativeAudioNode.numberOfInputs\n                    };\n                    nativeAudioNode = createNativeChannelMergerNode(nativeOfflineAudioContext, options);\n                  }\n                  renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n                  _context.next = 6;\n                  return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode);\n                case 6:\n                  return _context.abrupt(\"return\", nativeAudioNode);\n                case 7:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _callee);\n          }));\n          return function createAudioNode(_x, _x2) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n        return {\n          render: function render(proxy, nativeOfflineAudioContext) {\n            var renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n            if (renderedNativeAudioNode !== undefined) {\n              return Promise.resolve(renderedNativeAudioNode);\n            }\n            return createAudioNode(proxy, nativeOfflineAudioContext);\n          }\n        };\n      };\n    };\n\n    function ownKeys$o(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\n    function _objectSpread$o(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$o(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$o(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n    function _callSuper$i(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$i() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n    function _isNativeReflectConstruct$i() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$i = function _isNativeReflectConstruct() { return !!t; })(); }\n    var DEFAULT_OPTIONS$e = {\n      channelCount: 6,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'discrete',\n      numberOfOutputs: 6\n    };\n    var createChannelSplitterNodeConstructor = function createChannelSplitterNodeConstructor(audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext, sanitizeChannelSplitterOptions) {\n      return /*#__PURE__*/function (_audioNodeConstructor) {\n        function ChannelSplitterNode(context, options) {\n          _classCallCheck(this, ChannelSplitterNode);\n          var nativeContext = getNativeContext(context);\n          var mergedOptions = sanitizeChannelSplitterOptions(_objectSpread$o(_objectSpread$o({}, DEFAULT_OPTIONS$e), options));\n          var nativeChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, mergedOptions);\n          var channelSplitterNodeRenderer = isNativeOfflineAudioContext(nativeContext) ? createChannelSplitterNodeRenderer() : null;\n          return _callSuper$i(this, ChannelSplitterNode, [context, false, nativeChannelSplitterNode, channelSplitterNodeRenderer]);\n        }\n        _inherits(ChannelSplitterNode, _audioNodeConstructor);\n        return _createClass(ChannelSplitterNode);\n      }(audioNodeConstructor);\n    };\n\n    var createChannelSplitterNodeRendererFactory = function createChannelSplitterNodeRendererFactory(createNativeChannelSplitterNode, getNativeAudioNode, renderInputsOfAudioNode) {\n      return function () {\n        var renderedNativeAudioNodes = new WeakMap();\n        var createAudioNode = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(proxy, nativeOfflineAudioContext) {\n            var nativeAudioNode, nativeAudioNodeIsOwnedByContext, options;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  nativeAudioNode = getNativeAudioNode(proxy); // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n                  nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n                  if (!nativeAudioNodeIsOwnedByContext) {\n                    options = {\n                      channelCount: nativeAudioNode.channelCount,\n                      channelCountMode: nativeAudioNode.channelCountMode,\n                      channelInterpretation: nativeAudioNode.channelInterpretation,\n                      numberOfOutputs: nativeAudioNode.numberOfOutputs\n                    };\n                    nativeAudioNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, options);\n                  }\n                  renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n                  _context.next = 6;\n                  return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode);\n                case 6:\n                  return _context.abrupt(\"return\", nativeAudioNode);\n                case 7:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _callee);\n          }));\n          return function createAudioNode(_x, _x2) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n        return {\n          render: function render(proxy, nativeOfflineAudioContext) {\n            var renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n            if (renderedNativeAudioNode !== undefined) {\n              return Promise.resolve(renderedNativeAudioNode);\n            }\n            return createAudioNode(proxy, nativeOfflineAudioContext);\n          }\n        };\n      };\n    };\n\n    var createConnectAudioParam = function createConnectAudioParam(renderInputsOfAudioParam) {\n      return function (nativeOfflineAudioContext, audioParam, nativeAudioParam) {\n        return renderInputsOfAudioParam(audioParam, nativeOfflineAudioContext, nativeAudioParam);\n      };\n    };\n\n    var createConnectMultipleOutputs = function createConnectMultipleOutputs(createIndexSizeError) {\n      return function (outputAudioNodes, destination) {\n        var output = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n        var input = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n        var outputAudioNode = outputAudioNodes[output];\n        if (outputAudioNode === undefined) {\n          throw createIndexSizeError();\n        }\n        if (isNativeAudioNode$1(destination)) {\n          return outputAudioNode.connect(destination, 0, input);\n        }\n        return outputAudioNode.connect(destination, 0);\n      };\n    };\n\n    var createConnectedNativeAudioBufferSourceNodeFactory = function createConnectedNativeAudioBufferSourceNodeFactory(createNativeAudioBufferSourceNode) {\n      return function (nativeContext, nativeAudioNode) {\n        var nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, {\n          buffer: null,\n          channelCount: 2,\n          channelCountMode: 'max',\n          channelInterpretation: 'speakers',\n          loop: false,\n          loopEnd: 0,\n          loopStart: 0,\n          playbackRate: 1\n        });\n        var nativeAudioBuffer = nativeContext.createBuffer(1, 2, 44100);\n        nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;\n        nativeAudioBufferSourceNode.loop = true;\n        nativeAudioBufferSourceNode.connect(nativeAudioNode);\n        nativeAudioBufferSourceNode.start();\n        return function () {\n          nativeAudioBufferSourceNode.stop();\n          nativeAudioBufferSourceNode.disconnect(nativeAudioNode);\n        };\n      };\n    };\n\n    function ownKeys$n(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\n    function _objectSpread$n(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$n(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$n(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n    function _callSuper$h(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$h() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n    function _isNativeReflectConstruct$h() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$h = function _isNativeReflectConstruct() { return !!t; })(); }\n    var DEFAULT_OPTIONS$d = {\n      channelCount: 2,\n      channelCountMode: 'max',\n      channelInterpretation: 'speakers',\n      offset: 1\n    };\n    var createConstantSourceNodeConstructor = function createConstantSourceNodeConstructor(audioNodeConstructor, createAudioParam, createConstantSourceNodeRendererFactory, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) {\n      return /*#__PURE__*/function (_audioNodeConstructor) {\n        function ConstantSourceNode(context, options) {\n          var _this;\n          _classCallCheck(this, ConstantSourceNode);\n          var nativeContext = getNativeContext(context);\n          var mergedOptions = _objectSpread$n(_objectSpread$n({}, DEFAULT_OPTIONS$d), options);\n          var nativeConstantSourceNode = createNativeConstantSourceNode(nativeContext, mergedOptions);\n          var isOffline = isNativeOfflineAudioContext(nativeContext);\n          var constantSourceNodeRenderer = isOffline ? createConstantSourceNodeRendererFactory() : null;\n          _this = _callSuper$h(this, ConstantSourceNode, [context, false, nativeConstantSourceNode, constantSourceNodeRenderer]);\n          _this._constantSourceNodeRenderer = constantSourceNodeRenderer;\n          _this._nativeConstantSourceNode = nativeConstantSourceNode;\n          /*\n           * Bug #62 & #74: Safari does not support ConstantSourceNodes and does not export the correct values for maxValue and minValue\n           * for GainNodes.\n           */\n          _this._offset = createAudioParam(_this, isOffline, nativeConstantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n          _this._onended = null;\n          return _this;\n        }\n        _inherits(ConstantSourceNode, _audioNodeConstructor);\n        return _createClass(ConstantSourceNode, [{\n          key: \"offset\",\n          get: function get() {\n            return this._offset;\n          }\n        }, {\n          key: \"onended\",\n          get: function get() {\n            return this._onended;\n          },\n          set: function set(value) {\n            var wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n            this._nativeConstantSourceNode.onended = wrappedListener;\n            var nativeOnEnded = this._nativeConstantSourceNode.onended;\n            this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n          }\n        }, {\n          key: \"start\",\n          value: function start() {\n            var _this2 = this;\n            var when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n            this._nativeConstantSourceNode.start(when);\n            if (this._constantSourceNodeRenderer !== null) {\n              this._constantSourceNodeRenderer.start = when;\n            }\n            if (this.context.state !== 'closed') {\n              setInternalStateToActive(this);\n              var _resetInternalStateToPassive = function resetInternalStateToPassive() {\n                _this2._nativeConstantSourceNode.removeEventListener('ended', _resetInternalStateToPassive);\n                if (isActiveAudioNode(_this2)) {\n                  setInternalStateToPassive(_this2);\n                }\n              };\n              this._nativeConstantSourceNode.addEventListener('ended', _resetInternalStateToPassive);\n            }\n          }\n        }, {\n          key: \"stop\",\n          value: function stop() {\n            var when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n            this._nativeConstantSourceNode.stop(when);\n            if (this._constantSourceNodeRenderer !== null) {\n              this._constantSourceNodeRenderer.stop = when;\n            }\n          }\n        }]);\n      }(audioNodeConstructor);\n    };\n\n    var createConstantSourceNodeRendererFactory = function createConstantSourceNodeRendererFactory(connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) {\n      return function () {\n        var renderedNativeConstantSourceNodes = new WeakMap();\n        var start = null;\n        var stop = null;\n        var createConstantSourceNode = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(proxy, nativeOfflineAudioContext) {\n            var nativeConstantSourceNode, nativeConstantSourceNodeIsOwnedByContext, options;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  nativeConstantSourceNode = getNativeAudioNode(proxy);\n                  /*\n                   * If the initially used nativeConstantSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n                   * again.\n                   */\n                  nativeConstantSourceNodeIsOwnedByContext = isOwnedByContext(nativeConstantSourceNode, nativeOfflineAudioContext);\n                  if (!nativeConstantSourceNodeIsOwnedByContext) {\n                    options = {\n                      channelCount: nativeConstantSourceNode.channelCount,\n                      channelCountMode: nativeConstantSourceNode.channelCountMode,\n                      channelInterpretation: nativeConstantSourceNode.channelInterpretation,\n                      offset: nativeConstantSourceNode.offset.value\n                    };\n                    nativeConstantSourceNode = createNativeConstantSourceNode(nativeOfflineAudioContext, options);\n                    if (start !== null) {\n                      nativeConstantSourceNode.start(start);\n                    }\n                    if (stop !== null) {\n                      nativeConstantSourceNode.stop(stop);\n                    }\n                  }\n                  renderedNativeConstantSourceNodes.set(nativeOfflineAudioContext, nativeConstantSourceNode);\n                  if (nativeConstantSourceNodeIsOwnedByContext) {\n                    _context.next = 9;\n                    break;\n                  }\n                  _context.next = 7;\n                  return renderAutomation(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);\n                case 7:\n                  _context.next = 11;\n                  break;\n                case 9:\n                  _context.next = 11;\n                  return connectAudioParam(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);\n                case 11:\n                  _context.next = 13;\n                  return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConstantSourceNode);\n                case 13:\n                  return _context.abrupt(\"return\", nativeConstantSourceNode);\n                case 14:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _callee);\n          }));\n          return function createConstantSourceNode(_x, _x2) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n        return {\n          set start(value) {\n            start = value;\n          },\n          set stop(value) {\n            stop = value;\n          },\n          render: function render(proxy, nativeOfflineAudioContext) {\n            var renderedNativeConstantSourceNode = renderedNativeConstantSourceNodes.get(nativeOfflineAudioContext);\n            if (renderedNativeConstantSourceNode !== undefined) {\n              return Promise.resolve(renderedNativeConstantSourceNode);\n            }\n            return createConstantSourceNode(proxy, nativeOfflineAudioContext);\n          }\n        };\n      };\n    };\n\n    var createConvertNumberToUnsignedLong = function createConvertNumberToUnsignedLong(unit32Array) {\n      return function (value) {\n        unit32Array[0] = value;\n        return unit32Array[0];\n      };\n    };\n\n    function ownKeys$m(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\n    function _objectSpread$m(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$m(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$m(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n    function _callSuper$g(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$g() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n    function _isNativeReflectConstruct$g() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$g = function _isNativeReflectConstruct() { return !!t; })(); }\n    var DEFAULT_OPTIONS$c = {\n      buffer: null,\n      channelCount: 2,\n      channelCountMode: 'clamped-max',\n      channelInterpretation: 'speakers',\n      disableNormalization: false\n    };\n    var createConvolverNodeConstructor = function createConvolverNodeConstructor(audioNodeConstructor, createConvolverNodeRenderer, createNativeConvolverNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) {\n      return /*#__PURE__*/function (_audioNodeConstructor) {\n        function ConvolverNode(context, options) {\n          var _this;\n          _classCallCheck(this, ConvolverNode);\n          var nativeContext = getNativeContext(context);\n          var mergedOptions = _objectSpread$m(_objectSpread$m({}, DEFAULT_OPTIONS$c), options);\n          var nativeConvolverNode = createNativeConvolverNode(nativeContext, mergedOptions);\n          var isOffline = isNativeOfflineAudioContext(nativeContext);\n          var convolverNodeRenderer = isOffline ? createConvolverNodeRenderer() : null;\n          _this = _callSuper$g(this, ConvolverNode, [context, false, nativeConvolverNode, convolverNodeRenderer]);\n          _this._isBufferNullified = false;\n          _this._nativeConvolverNode = nativeConvolverNode;\n          if (mergedOptions.buffer !== null) {\n            setAudioNodeTailTime(_this, mergedOptions.buffer.duration);\n          }\n          return _this;\n        }\n        _inherits(ConvolverNode, _audioNodeConstructor);\n        return _createClass(ConvolverNode, [{\n          key: \"buffer\",\n          get: function get() {\n            if (this._isBufferNullified) {\n              return null;\n            }\n            return this._nativeConvolverNode.buffer;\n          },\n          set: function set(value) {\n            this._nativeConvolverNode.buffer = value;\n            // Bug #115: Safari does not allow to set the buffer to null.\n            if (value === null && this._nativeConvolverNode.buffer !== null) {\n              var nativeContext = this._nativeConvolverNode.context;\n              this._nativeConvolverNode.buffer = nativeContext.createBuffer(1, 1, nativeContext.sampleRate);\n              this._isBufferNullified = true;\n              setAudioNodeTailTime(this, 0);\n            } else {\n              this._isBufferNullified = false;\n              setAudioNodeTailTime(this, this._nativeConvolverNode.buffer === null ? 0 : this._nativeConvolverNode.buffer.duration);\n            }\n          }\n        }, {\n          key: \"normalize\",\n          get: function get() {\n            return this._nativeConvolverNode.normalize;\n          },\n          set: function set(value) {\n            this._nativeConvolverNode.normalize = value;\n          }\n        }]);\n      }(audioNodeConstructor);\n    };\n\n    var createConvolverNodeRendererFactory = function createConvolverNodeRendererFactory(createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode) {\n      return function () {\n        var renderedNativeConvolverNodes = new WeakMap();\n        var createConvolverNode = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(proxy, nativeOfflineAudioContext) {\n            var nativeConvolverNode, nativeConvolverNodeIsOwnedByContext, options;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  nativeConvolverNode = getNativeAudioNode(proxy); // If the initially used nativeConvolverNode was not constructed on the same OfflineAudioContext it needs to be created again.\n                  nativeConvolverNodeIsOwnedByContext = isOwnedByContext(nativeConvolverNode, nativeOfflineAudioContext);\n                  if (!nativeConvolverNodeIsOwnedByContext) {\n                    options = {\n                      buffer: nativeConvolverNode.buffer,\n                      channelCount: nativeConvolverNode.channelCount,\n                      channelCountMode: nativeConvolverNode.channelCountMode,\n                      channelInterpretation: nativeConvolverNode.channelInterpretation,\n                      disableNormalization: !nativeConvolverNode.normalize\n                    };\n                    nativeConvolverNode = createNativeConvolverNode(nativeOfflineAudioContext, options);\n                  }\n                  renderedNativeConvolverNodes.set(nativeOfflineAudioContext, nativeConvolverNode);\n                  if (!isNativeAudioNodeFaker(nativeConvolverNode)) {\n                    _context.next = 9;\n                    break;\n                  }\n                  _context.next = 7;\n                  return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode.inputs[0]);\n                case 7:\n                  _context.next = 11;\n                  break;\n                case 9:\n                  _context.next = 11;\n                  return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode);\n                case 11:\n                  return _context.abrupt(\"return\", nativeConvolverNode);\n                case 12:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _callee);\n          }));\n          return function createConvolverNode(_x, _x2) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n        return {\n          render: function render(proxy, nativeOfflineAudioContext) {\n            var renderedNativeConvolverNode = renderedNativeConvolverNodes.get(nativeOfflineAudioContext);\n            if (renderedNativeConvolverNode !== undefined) {\n              return Promise.resolve(renderedNativeConvolverNode);\n            }\n            return createConvolverNode(proxy, nativeOfflineAudioContext);\n          }\n        };\n      };\n    };\n\n    var createCreateNativeOfflineAudioContext = function createCreateNativeOfflineAudioContext(createNotSupportedError, nativeOfflineAudioContextConstructor) {\n      return function (numberOfChannels, length, sampleRate) {\n        if (nativeOfflineAudioContextConstructor === null) {\n          throw new Error('Missing the native OfflineAudioContext constructor.');\n        }\n        try {\n          return new nativeOfflineAudioContextConstructor(numberOfChannels, length, sampleRate);\n        } catch (err) {\n          // Bug #143, #144 & #146: Safari throws a SyntaxError when numberOfChannels, length or sampleRate are invalid.\n          if (err.name === 'SyntaxError') {\n            throw createNotSupportedError();\n          }\n          throw err;\n        }\n      };\n    };\n\n    var createDataCloneError = function createDataCloneError() {\n      return new DOMException('', 'DataCloneError');\n    };\n\n    var detachArrayBuffer = function detachArrayBuffer(arrayBuffer) {\n      var _MessageChannel = new MessageChannel(),\n        port1 = _MessageChannel.port1,\n        port2 = _MessageChannel.port2;\n      return new Promise(function (resolve) {\n        var closeAndResolve = function closeAndResolve() {\n          port2.onmessage = null;\n          port1.close();\n          port2.close();\n          resolve();\n        };\n        port2.onmessage = function () {\n          return closeAndResolve();\n        };\n        try {\n          port1.postMessage(arrayBuffer, [arrayBuffer]);\n        } catch (_unused) {\n          // Ignore errors.\n        } finally {\n          closeAndResolve();\n        }\n      });\n    };\n\n    var createDecodeAudioData = function createDecodeAudioData(audioBufferStore, cacheTestResult, createDataCloneError, createEncodingError, detachedArrayBuffers, getNativeContext, isNativeContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) {\n      return function (anyContext, audioData) {\n        var nativeContext = isNativeContext(anyContext) ? anyContext : getNativeContext(anyContext);\n        // Bug #43: Only Chrome and Edge do throw a DataCloneError.\n        if (detachedArrayBuffers.has(audioData)) {\n          var err = createDataCloneError();\n          return Promise.reject(err);\n        }\n        // The audioData parameter maybe of a type which can't be added to a WeakSet.\n        try {\n          detachedArrayBuffers.add(audioData);\n        } catch (_unused) {\n          // Ignore errors.\n        }\n        // Bug #21: Safari does not support promises yet.\n        if (cacheTestResult(testPromiseSupport, function () {\n          return testPromiseSupport(nativeContext);\n        })) {\n          return nativeContext.decodeAudioData(audioData).then(function (audioBuffer) {\n            // Bug #133: Safari does neuter the ArrayBuffer.\n            detachArrayBuffer(audioData)[\"catch\"](function () {\n              // Ignore errors.\n            });\n            // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.\n            if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, function () {\n              return testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer);\n            })) {\n              wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n            }\n            audioBufferStore.add(audioBuffer);\n            return audioBuffer;\n          });\n        }\n        // Bug #21: Safari does not return a Promise yet.\n        return new Promise(function (resolve, reject) {\n          var complete = /*#__PURE__*/function () {\n            var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n              return _regeneratorRuntime.wrap(function _callee$(_context) {\n                while (1) switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    _context.next = 3;\n                    return detachArrayBuffer(audioData);\n                  case 3:\n                    _context.next = 7;\n                    break;\n                  case 5:\n                    _context.prev = 5;\n                    _context.t0 = _context[\"catch\"](0);\n                  case 7:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }, _callee, null, [[0, 5]]);\n            }));\n            return function complete() {\n              return _ref.apply(this, arguments);\n            };\n          }();\n          var fail = function fail(err) {\n            reject(err);\n            complete();\n          };\n          // Bug #26: Safari throws a synchronous error.\n          try {\n            // Bug #1: Safari requires a successCallback.\n            nativeContext.decodeAudioData(audioData, function (audioBuffer) {\n              // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n              // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n              if (typeof audioBuffer.copyFromChannel !== 'function') {\n                wrapAudioBufferCopyChannelMethods(audioBuffer);\n                wrapAudioBufferGetChannelDataMethod(audioBuffer);\n              }\n              audioBufferStore.add(audioBuffer);\n              complete().then(function () {\n                return resolve(audioBuffer);\n              });\n            }, function (err) {\n              // Bug #4: Safari returns null instead of an error.\n              if (err === null) {\n                fail(createEncodingError());\n              } else {\n                fail(err);\n              }\n            });\n          } catch (err) {\n            fail(err);\n          }\n        });\n      };\n    };\n\n    function _createForOfIteratorHelper$3(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray$3(r)) || e) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\n    function _unsupportedIterableToArray$3(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray$3(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$3(r, a) : void 0; } }\n    function _arrayLikeToArray$3(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n    var createDecrementCycleCounter = function createDecrementCycleCounter(connectNativeAudioNodeToNativeAudioNode, cycleCounters, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, getNativeContext, isActiveAudioNode, isNativeOfflineAudioContext) {\n      return function (audioNode, count) {\n        var cycleCounter = cycleCounters.get(audioNode);\n        if (cycleCounter === undefined) {\n          throw new Error('Missing the expected cycle count.');\n        }\n        var nativeContext = getNativeContext(audioNode.context);\n        var isOffline = isNativeOfflineAudioContext(nativeContext);\n        if (cycleCounter === count) {\n          cycleCounters[\"delete\"](audioNode);\n          if (!isOffline && isActiveAudioNode(audioNode)) {\n            var nativeSourceAudioNode = getNativeAudioNode(audioNode);\n            var _getAudioNodeConnecti = getAudioNodeConnections(audioNode),\n              outputs = _getAudioNodeConnecti.outputs;\n            var _iterator = _createForOfIteratorHelper$3(outputs),\n              _step;\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                var output = _step.value;\n                if (isAudioNodeOutputConnection(output)) {\n                  var nativeDestinationAudioNode = getNativeAudioNode(output[0]);\n                  connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output[1], output[2]);\n                } else {\n                  var nativeDestinationAudioParam = getNativeAudioParam(output[0]);\n                  nativeSourceAudioNode.connect(nativeDestinationAudioParam, output[1]);\n                }\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n          }\n        } else {\n          cycleCounters.set(audioNode, cycleCounter - count);\n        }\n      };\n    };\n\n    function ownKeys$l(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\n    function _objectSpread$l(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$l(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$l(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n    function _callSuper$f(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$f() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n    function _isNativeReflectConstruct$f() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$f = function _isNativeReflectConstruct() { return !!t; })(); }\n    var DEFAULT_OPTIONS$b = {\n      channelCount: 2,\n      channelCountMode: 'max',\n      channelInterpretation: 'speakers',\n      delayTime: 0,\n      maxDelayTime: 1\n    };\n    var createDelayNodeConstructor = function createDelayNodeConstructor(audioNodeConstructor, createAudioParam, createDelayNodeRenderer, createNativeDelayNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) {\n      return /*#__PURE__*/function (_audioNodeConstructor) {\n        function DelayNode(context, options) {\n          var _this;\n          _classCallCheck(this, DelayNode);\n          var nativeContext = getNativeContext(context);\n          var mergedOptions = _objectSpread$l(_objectSpread$l({}, DEFAULT_OPTIONS$b), options);\n          var nativeDelayNode = createNativeDelayNode(nativeContext, mergedOptions);\n          var isOffline = isNativeOfflineAudioContext(nativeContext);\n          var delayNodeRenderer = isOffline ? createDelayNodeRenderer(mergedOptions.maxDelayTime) : null;\n          _this = _callSuper$f(this, DelayNode, [context, false, nativeDelayNode, delayNodeRenderer]);\n          _this._delayTime = createAudioParam(_this, isOffline, nativeDelayNode.delayTime);\n          setAudioNodeTailTime(_this, mergedOptions.maxDelayTime);\n          return _this;\n        }\n        _inherits(DelayNode, _audioNodeConstructor);\n        return _createClass(DelayNode, [{\n          key: \"delayTime\",\n          get: function get() {\n            return this._delayTime;\n          }\n        }]);\n      }(audioNodeConstructor);\n    };\n\n    var createDelayNodeRendererFactory = function createDelayNodeRendererFactory(connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) {\n      return function (maxDelayTime) {\n        var renderedNativeDelayNodes = new WeakMap();\n        var createDelayNode = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(proxy, nativeOfflineAudioContext) {\n            var nativeDelayNode, nativeDelayNodeIsOwnedByContext, options;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  nativeDelayNode = getNativeAudioNode(proxy); // If the initially used nativeDelayNode was not constructed on the same OfflineAudioContext it needs to be created again.\n                  nativeDelayNodeIsOwnedByContext = isOwnedByContext(nativeDelayNode, nativeOfflineAudioContext);\n                  if (!nativeDelayNodeIsOwnedByContext) {\n                    options = {\n                      channelCount: nativeDelayNode.channelCount,\n                      channelCountMode: nativeDelayNode.channelCountMode,\n                      channelInterpretation: nativeDelayNode.channelInterpretation,\n                      delayTime: nativeDelayNode.delayTime.value,\n                      maxDelayTime: maxDelayTime\n                    };\n                    nativeDelayNode = createNativeDelayNode(nativeOfflineAudioContext, options);\n                  }\n                  renderedNativeDelayNodes.set(nativeOfflineAudioContext, nativeDelayNode);\n                  if (nativeDelayNodeIsOwnedByContext) {\n                    _context.next = 9;\n                    break;\n                  }\n                  _context.next = 7;\n                  return renderAutomation(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);\n                case 7:\n                  _context.next = 11;\n                  break;\n                case 9:\n                  _context.next = 11;\n                  return connectAudioParam(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);\n                case 11:\n                  _context.next = 13;\n                  return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDelayNode);\n                case 13:\n                  return _context.abrupt(\"return\", nativeDelayNode);\n                case 14:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _callee);\n          }));\n          return function createDelayNode(_x, _x2) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n        return {\n          render: function render(proxy, nativeOfflineAudioContext) {\n            var renderedNativeDelayNode = renderedNativeDelayNodes.get(nativeOfflineAudioContext);\n            if (renderedNativeDelayNode !== undefined) {\n              return Promise.resolve(renderedNativeDelayNode);\n            }\n            return createDelayNode(proxy, nativeOfflineAudioContext);\n          }\n        };\n      };\n    };\n\n    var createDeleteActiveInputConnectionToAudioNode = function createDeleteActiveInputConnectionToAudioNode(pickElementFromSet) {\n      return function (activeInputs, source, output, input) {\n        return pickElementFromSet(activeInputs[input], function (activeInputConnection) {\n          return activeInputConnection[0] === source && activeInputConnection[1] === output;\n        });\n      };\n    };\n\n    var createDeleteUnrenderedAudioWorkletNode = function createDeleteUnrenderedAudioWorkletNode(getUnrenderedAudioWorkletNodes) {\n      return function (nativeContext, audioWorkletNode) {\n        getUnrenderedAudioWorkletNodes(nativeContext)[\"delete\"](audioWorkletNode);\n      };\n    };\n\n    var isDelayNode = function isDelayNode(audioNode) {\n      return 'delayTime' in audioNode;\n    };\n\n    var createDetectCycles = function createDetectCycles(audioParamAudioNodeStore, getAudioNodeConnections, getValueForKey) {\n      return function detectCycles(chain, nextLink) {\n        var audioNode = isAudioNode(nextLink) ? nextLink : getValueForKey(audioParamAudioNodeStore, nextLink);\n        if (isDelayNode(audioNode)) {\n          return [];\n        }\n        if (chain[0] === audioNode) {\n          return [chain];\n        }\n        if (chain.includes(audioNode)) {\n          return [];\n        }\n        var _getAudioNodeConnecti = getAudioNodeConnections(audioNode),\n          outputs = _getAudioNodeConnecti.outputs;\n        return Array.from(outputs).map(function (outputConnection) {\n          return detectCycles([].concat(_toConsumableArray(chain), [audioNode]), outputConnection[0]);\n        }).reduce(function (mergedCycles, nestedCycles) {\n          return mergedCycles.concat(nestedCycles);\n        }, []);\n      };\n    };\n\n    var getOutputAudioNodeAtIndex = function getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output) {\n      var outputAudioNode = outputAudioNodes[output];\n      if (outputAudioNode === undefined) {\n        throw createIndexSizeError();\n      }\n      return outputAudioNode;\n    };\n    var createDisconnectMultipleOutputs = function createDisconnectMultipleOutputs(createIndexSizeError) {\n      return function (outputAudioNodes) {\n        var destinationOrOutput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n        var output = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n        var input = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n        if (destinationOrOutput === undefined) {\n          return outputAudioNodes.forEach(function (outputAudioNode) {\n            return outputAudioNode.disconnect();\n          });\n        }\n        if (typeof destinationOrOutput === 'number') {\n          return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, destinationOrOutput).disconnect();\n        }\n        if (isNativeAudioNode$1(destinationOrOutput)) {\n          if (output === undefined) {\n            return outputAudioNodes.forEach(function (outputAudioNode) {\n              return outputAudioNode.disconnect(destinationOrOutput);\n            });\n          }\n          if (input === undefined) {\n            return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0);\n          }\n          return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0, input);\n        }\n        if (output === undefined) {\n          return outputAudioNodes.forEach(function (outputAudioNode) {\n            return outputAudioNode.disconnect(destinationOrOutput);\n          });\n        }\n        return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0);\n      };\n    };\n\n    function ownKeys$k(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\n    function _objectSpread$k(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$k(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$k(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n    function _callSuper$e(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$e() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n    function _isNativeReflectConstruct$e() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$e = function _isNativeReflectConstruct() { return !!t; })(); }\n    var DEFAULT_OPTIONS$a = {\n      attack: 0.003,\n      channelCount: 2,\n      channelCountMode: 'clamped-max',\n      channelInterpretation: 'speakers',\n      knee: 30,\n      ratio: 12,\n      release: 0.25,\n      threshold: -24\n    };\n    var createDynamicsCompressorNodeConstructor = function createDynamicsCompressorNodeConstructor(audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) {\n      return /*#__PURE__*/function (_audioNodeConstructor) {\n        function DynamicsCompressorNode(context, options) {\n          var _this;\n          _classCallCheck(this, DynamicsCompressorNode);\n          var nativeContext = getNativeContext(context);\n          var mergedOptions = _objectSpread$k(_objectSpread$k({}, DEFAULT_OPTIONS$a), options);\n          var nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeContext, mergedOptions);\n          var isOffline = isNativeOfflineAudioContext(nativeContext);\n          var dynamicsCompressorNodeRenderer = isOffline ? createDynamicsCompressorNodeRenderer() : null;\n          _this = _callSuper$e(this, DynamicsCompressorNode, [context, false, nativeDynamicsCompressorNode, dynamicsCompressorNodeRenderer]);\n          _this._attack = createAudioParam(_this, isOffline, nativeDynamicsCompressorNode.attack);\n          _this._knee = createAudioParam(_this, isOffline, nativeDynamicsCompressorNode.knee);\n          _this._nativeDynamicsCompressorNode = nativeDynamicsCompressorNode;\n          _this._ratio = createAudioParam(_this, isOffline, nativeDynamicsCompressorNode.ratio);\n          _this._release = createAudioParam(_this, isOffline, nativeDynamicsCompressorNode.release);\n          _this._threshold = createAudioParam(_this, isOffline, nativeDynamicsCompressorNode.threshold);\n          setAudioNodeTailTime(_this, 0.006);\n          return _this;\n        }\n        _inherits(DynamicsCompressorNode, _audioNodeConstructor);\n        return _createClass(DynamicsCompressorNode, [{\n          key: \"attack\",\n          get: function get() {\n            return this._attack;\n          }\n          // Bug #108: Safari allows a channelCount of three and above which is why the getter and setter needs to be overwritten here.\n        }, {\n          key: \"channelCount\",\n          get: function get() {\n            return this._nativeDynamicsCompressorNode.channelCount;\n          },\n          set: function set(value) {\n            var previousChannelCount = this._nativeDynamicsCompressorNode.channelCount;\n            this._nativeDynamicsCompressorNode.channelCount = value;\n            if (value > 2) {\n              this._nativeDynamicsCompressorNode.channelCount = previousChannelCount;\n              throw createNotSupportedError();\n            }\n          }\n          /*\n           * Bug #109: Only Chrome and Firefox disallow a channelCountMode of 'max' yet which is why the getter and setter needs to be\n           * overwritten here.\n           */\n        }, {\n          key: \"channelCountMode\",\n          get: function get() {\n            return this._nativeDynamicsCompressorNode.channelCountMode;\n          },\n          set: function set(value) {\n            var previousChannelCount = this._nativeDynamicsCompressorNode.channelCountMode;\n            this._nativeDynamicsCompressorNode.channelCountMode = value;\n            if (value === 'max') {\n              this._nativeDynamicsCompressorNode.channelCountMode = previousChannelCount;\n              throw createNotSupportedError();\n            }\n          }\n        }, {\n          key: \"knee\",\n          get: function get() {\n            return this._knee;\n          }\n        }, {\n          key: \"ratio\",\n          get: function get() {\n            return this._ratio;\n          }\n        }, {\n          key: \"reduction\",\n          get: function get() {\n            // Bug #111: Safari returns an AudioParam instead of a number.\n            if (typeof this._nativeDynamicsCompressorNode.reduction.value === 'number') {\n              return this._nativeDynamicsCompressorNode.reduction.value;\n            }\n            return this._nativeDynamicsCompressorNode.reduction;\n          }\n        }, {\n          key: \"release\",\n          get: function get() {\n            return this._release;\n          }\n        }, {\n          key: \"threshold\",\n          get: function get() {\n            return this._threshold;\n          }\n        }]);\n      }(audioNodeConstructor);\n    };\n\n    var createDynamicsCompressorNodeRendererFactory = function createDynamicsCompressorNodeRendererFactory(connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) {\n      return function () {\n        var renderedNativeDynamicsCompressorNodes = new WeakMap();\n        var createDynamicsCompressorNode = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(proxy, nativeOfflineAudioContext) {\n            var nativeDynamicsCompressorNode, nativeDynamicsCompressorNodeIsOwnedByContext, options;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  nativeDynamicsCompressorNode = getNativeAudioNode(proxy);\n                  /*\n                   * If the initially used nativeDynamicsCompressorNode was not constructed on the same OfflineAudioContext it needs to be\n                   * created again.\n                   */\n                  nativeDynamicsCompressorNodeIsOwnedByContext = isOwnedByContext(nativeDynamicsCompressorNode, nativeOfflineAudioContext);\n                  if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n                    options = {\n                      attack: nativeDynamicsCompressorNode.attack.value,\n                      channelCount: nativeDynamicsCompressorNode.channelCount,\n                      channelCountMode: nativeDynamicsCompressorNode.channelCountMode,\n                      channelInterpretation: nativeDynamicsCompressorNode.channelInterpretation,\n                      knee: nativeDynamicsCompressorNode.knee.value,\n                      ratio: nativeDynamicsCompressorNode.ratio.value,\n                      release: nativeDynamicsCompressorNode.release.value,\n                      threshold: nativeDynamicsCompressorNode.threshold.value\n                    };\n                    nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeOfflineAudioContext, options);\n                  }\n                  renderedNativeDynamicsCompressorNodes.set(nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n                  if (nativeDynamicsCompressorNodeIsOwnedByContext) {\n                    _context.next = 17;\n                    break;\n                  }\n                  _context.next = 7;\n                  return renderAutomation(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);\n                case 7:\n                  _context.next = 9;\n                  return renderAutomation(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);\n                case 9:\n                  _context.next = 11;\n                  return renderAutomation(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);\n                case 11:\n                  _context.next = 13;\n                  return renderAutomation(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);\n                case 13:\n                  _context.next = 15;\n                  return renderAutomation(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);\n                case 15:\n                  _context.next = 27;\n                  break;\n                case 17:\n                  _context.next = 19;\n                  return connectAudioParam(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);\n                case 19:\n                  _context.next = 21;\n                  return connectAudioParam(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);\n                case 21:\n                  _context.next = 23;\n                  return connectAudioParam(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);\n                case 23:\n                  _context.next = 25;\n                  return connectAudioParam(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);\n                case 25:\n                  _context.next = 27;\n                  return connectAudioParam(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);\n                case 27:\n                  _context.next = 29;\n                  return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n                case 29:\n                  return _context.abrupt(\"return\", nativeDynamicsCompressorNode);\n                case 30:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _callee);\n          }));\n          return function createDynamicsCompressorNode(_x, _x2) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n        return {\n          render: function render(proxy, nativeOfflineAudioContext) {\n            var renderedNativeDynamicsCompressorNode = renderedNativeDynamicsCompressorNodes.get(nativeOfflineAudioContext);\n            if (renderedNativeDynamicsCompressorNode !== undefined) {\n              return Promise.resolve(renderedNativeDynamicsCompressorNode);\n            }\n            return createDynamicsCompressorNode(proxy, nativeOfflineAudioContext);\n          }\n        };\n      };\n    };\n\n    var createEncodingError = function createEncodingError() {\n      return new DOMException('', 'EncodingError');\n    };\n\n    var createEvaluateSource = function createEvaluateSource(window) {\n      return function (source) {\n        return new Promise(function (resolve, reject) {\n          if (window === null) {\n            // Bug #182 Chrome and Edge do throw an instance of a SyntaxError instead of a DOMException.\n            reject(new SyntaxError());\n            return;\n          }\n          var head = window.document.head;\n          if (head === null) {\n            // Bug #182 Chrome and Edge do throw an instance of a SyntaxError instead of a DOMException.\n            reject(new SyntaxError());\n          } else {\n            var script = window.document.createElement('script');\n            // @todo Safari doesn't like URLs with a type of 'application/javascript; charset=utf-8'.\n            var blob = new Blob([source], {\n              type: 'application/javascript'\n            });\n            var url = URL.createObjectURL(blob);\n            var originalOnErrorHandler = window.onerror;\n            var removeErrorEventListenerAndRevokeUrl = function removeErrorEventListenerAndRevokeUrl() {\n              window.onerror = originalOnErrorHandler;\n              URL.revokeObjectURL(url);\n            };\n            window.onerror = function (message, src, lineno, colno, error) {\n              // @todo Edge thinks the source is the one of the html document.\n              if (src === url || src === window.location.href && lineno === 1 && colno === 1) {\n                removeErrorEventListenerAndRevokeUrl();\n                reject(error);\n                return false;\n              }\n              if (originalOnErrorHandler !== null) {\n                return originalOnErrorHandler(message, src, lineno, colno, error);\n              }\n            };\n            script.onerror = function () {\n              removeErrorEventListenerAndRevokeUrl();\n              // Bug #182 Chrome and Edge do throw an instance of a SyntaxError instead of a DOMException.\n              reject(new SyntaxError());\n            };\n            script.onload = function () {\n              removeErrorEventListenerAndRevokeUrl();\n              resolve();\n            };\n            script.src = url;\n            script.type = 'module';\n            head.appendChild(script);\n          }\n        });\n      };\n    };\n\n    var createEventTargetConstructor = function createEventTargetConstructor(wrapEventListener) {\n      return /*#__PURE__*/function () {\n        function EventTarget(_nativeEventTarget) {\n          _classCallCheck(this, EventTarget);\n          this._nativeEventTarget = _nativeEventTarget;\n          this._listeners = new WeakMap();\n        }\n        return _createClass(EventTarget, [{\n          key: \"addEventListener\",\n          value: function addEventListener(type, listener, options) {\n            if (listener !== null) {\n              var wrappedEventListener = this._listeners.get(listener);\n              if (wrappedEventListener === undefined) {\n                wrappedEventListener = wrapEventListener(this, listener);\n                if (typeof listener === 'function') {\n                  this._listeners.set(listener, wrappedEventListener);\n                }\n              }\n              this._nativeEventTarget.addEventListener(type, wrappedEventListener, options);\n            }\n          }\n        }, {\n          key: \"dispatchEvent\",\n          value: function dispatchEvent(event) {\n            return this._nativeEventTarget.dispatchEvent(event);\n          }\n        }, {\n          key: \"removeEventListener\",\n          value: function removeEventListener(type, listener, options) {\n            var wrappedEventListener = listener === null ? undefined : this._listeners.get(listener);\n            this._nativeEventTarget.removeEventListener(type, wrappedEventListener === undefined ? null : wrappedEventListener, options);\n          }\n        }]);\n      }();\n    };\n\n    var createExposeCurrentFrameAndCurrentTime = function createExposeCurrentFrameAndCurrentTime(window) {\n      return function (currentTime, sampleRate, fn) {\n        Object.defineProperties(window, {\n          currentFrame: {\n            configurable: true,\n            get: function get() {\n              return Math.round(currentTime * sampleRate);\n            }\n          },\n          currentTime: {\n            configurable: true,\n            get: function get() {\n              return currentTime;\n            }\n          }\n        });\n        try {\n          return fn();\n        } finally {\n          if (window !== null) {\n            delete window.currentFrame;\n            delete window.currentTime;\n          }\n        }\n      };\n    };\n\n    var createFetchSource = function createFetchSource(createAbortError) {\n      return /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(url) {\n          var response;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return fetch(url);\n              case 3:\n                response = _context.sent;\n                if (!response.ok) {\n                  _context.next = 10;\n                  break;\n                }\n                _context.next = 7;\n                return response.text();\n              case 7:\n                _context.t0 = _context.sent;\n                _context.t1 = response.url;\n                return _context.abrupt(\"return\", [_context.t0, _context.t1]);\n              case 10:\n                _context.next = 14;\n                break;\n              case 12:\n                _context.prev = 12;\n                _context.t2 = _context[\"catch\"](0);\n              case 14:\n                throw createAbortError();\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }, _callee, null, [[0, 12]]);\n        }));\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }();\n    };\n\n    function ownKeys$j(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\n    function _objectSpread$j(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$j(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$j(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n    function _callSuper$d(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$d() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n    function _isNativeReflectConstruct$d() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$d = function _isNativeReflectConstruct() { return !!t; })(); }\n    var DEFAULT_OPTIONS$9 = {\n      channelCount: 2,\n      channelCountMode: 'max',\n      channelInterpretation: 'speakers',\n      gain: 1\n    };\n    var createGainNodeConstructor = function createGainNodeConstructor(audioNodeConstructor, createAudioParam, createGainNodeRenderer, createNativeGainNode, getNativeContext, isNativeOfflineAudioContext) {\n      return /*#__PURE__*/function (_audioNodeConstructor) {\n        function GainNode(context, options) {\n          var _this;\n          _classCallCheck(this, GainNode);\n          var nativeContext = getNativeContext(context);\n          var mergedOptions = _objectSpread$j(_objectSpread$j({}, DEFAULT_OPTIONS$9), options);\n          var nativeGainNode = createNativeGainNode(nativeContext, mergedOptions);\n          var isOffline = isNativeOfflineAudioContext(nativeContext);\n          var gainNodeRenderer = isOffline ? createGainNodeRenderer() : null;\n          _this = _callSuper$d(this, GainNode, [context, false, nativeGainNode, gainNodeRenderer]);\n          // Bug #74: Safari does not export the correct values for maxValue and minValue.\n          _this._gain = createAudioParam(_this, isOffline, nativeGainNode.gain, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n          return _this;\n        }\n        _inherits(GainNode, _audioNodeConstructor);\n        return _createClass(GainNode, [{\n          key: \"gain\",\n          get: function get() {\n            return this._gain;\n          }\n        }]);\n      }(audioNodeConstructor);\n    };\n\n    var createGainNodeRendererFactory = function createGainNodeRendererFactory(connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) {\n      return function () {\n        var renderedNativeGainNodes = new WeakMap();\n        var createGainNode = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(proxy, nativeOfflineAudioContext) {\n            var nativeGainNode, nativeGainNodeIsOwnedByContext, options;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  nativeGainNode = getNativeAudioNode(proxy); // If the initially used nativeGainNode was not constructed on the same OfflineAudioContext it needs to be created again.\n                  nativeGainNodeIsOwnedByContext = isOwnedByContext(nativeGainNode, nativeOfflineAudioContext);\n                  if (!nativeGainNodeIsOwnedByContext) {\n                    options = {\n                      channelCount: nativeGainNode.channelCount,\n                      channelCountMode: nativeGainNode.channelCountMode,\n                      channelInterpretation: nativeGainNode.channelInterpretation,\n                      gain: nativeGainNode.gain.value\n                    };\n                    nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, options);\n                  }\n                  renderedNativeGainNodes.set(nativeOfflineAudioContext, nativeGainNode);\n                  if (nativeGainNodeIsOwnedByContext) {\n                    _context.next = 9;\n                    break;\n                  }\n                  _context.next = 7;\n                  return renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain);\n                case 7:\n                  _context.next = 11;\n                  break;\n                case 9:\n                  _context.next = 11;\n                  return connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain);\n                case 11:\n                  _context.next = 13;\n                  return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeGainNode);\n                case 13:\n                  return _context.abrupt(\"return\", nativeGainNode);\n                case 14:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _callee);\n          }));\n          return function createGainNode(_x, _x2) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n        return {\n          render: function render(proxy, nativeOfflineAudioContext) {\n            var renderedNativeGainNode = renderedNativeGainNodes.get(nativeOfflineAudioContext);\n            if (renderedNativeGainNode !== undefined) {\n              return Promise.resolve(renderedNativeGainNode);\n            }\n            return createGainNode(proxy, nativeOfflineAudioContext);\n          }\n        };\n      };\n    };\n\n    var createGetActiveAudioWorkletNodeInputs = function createGetActiveAudioWorkletNodeInputs(activeAudioWorkletNodeInputsStore, getValueForKey) {\n      return function (nativeAudioWorkletNode) {\n        return getValueForKey(activeAudioWorkletNodeInputsStore, nativeAudioWorkletNode);\n      };\n    };\n\n    var createGetAudioNodeRenderer = function createGetAudioNodeRenderer(getAudioNodeConnections) {\n      return function (audioNode) {\n        var audioNodeConnections = getAudioNodeConnections(audioNode);\n        if (audioNodeConnections.renderer === null) {\n          throw new Error('Missing the renderer of the given AudioNode in the audio graph.');\n        }\n        return audioNodeConnections.renderer;\n      };\n    };\n\n    var createGetAudioNodeTailTime = function createGetAudioNodeTailTime(audioNodeTailTimeStore) {\n      return function (audioNode) {\n        var _a;\n        return (_a = audioNodeTailTimeStore.get(audioNode)) !== null && _a !== void 0 ? _a : 0;\n      };\n    };\n\n    var createGetAudioParamRenderer = function createGetAudioParamRenderer(getAudioParamConnections) {\n      return function (audioParam) {\n        var audioParamConnections = getAudioParamConnections(audioParam);\n        if (audioParamConnections.renderer === null) {\n          throw new Error('Missing the renderer of the given AudioParam in the audio graph.');\n        }\n        return audioParamConnections.renderer;\n      };\n    };\n\n    var createGetBackupOfflineAudioContext = function createGetBackupOfflineAudioContext(backupOfflineAudioContextStore) {\n      return function (nativeContext) {\n        return backupOfflineAudioContextStore.get(nativeContext);\n      };\n    };\n\n    var createInvalidStateError = function createInvalidStateError() {\n      return new DOMException('', 'InvalidStateError');\n    };\n\n    var createGetNativeContext = function createGetNativeContext(contextStore) {\n      return function (context) {\n        var nativeContext = contextStore.get(context);\n        if (nativeContext === undefined) {\n          throw createInvalidStateError();\n        }\n        return nativeContext;\n      };\n    };\n\n    var createGetOrCreateBackupOfflineAudioContext = function createGetOrCreateBackupOfflineAudioContext(backupOfflineAudioContextStore, nativeOfflineAudioContextConstructor) {\n      return function (nativeContext) {\n        var backupOfflineAudioContext = backupOfflineAudioContextStore.get(nativeContext);\n        if (backupOfflineAudioContext !== undefined) {\n          return backupOfflineAudioContext;\n        }\n        if (nativeOfflineAudioContextConstructor === null) {\n          throw new Error('Missing the native OfflineAudioContext constructor.');\n        }\n        // Bug #141: Safari does not support creating an OfflineAudioContext with less than 44100 Hz.\n        backupOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n        backupOfflineAudioContextStore.set(nativeContext, backupOfflineAudioContext);\n        return backupOfflineAudioContext;\n      };\n    };\n\n    var createGetUnrenderedAudioWorkletNodes = function createGetUnrenderedAudioWorkletNodes(unrenderedAudioWorkletNodeStore) {\n      return function (nativeContext) {\n        var unrenderedAudioWorkletNodes = unrenderedAudioWorkletNodeStore.get(nativeContext);\n        if (unrenderedAudioWorkletNodes === undefined) {\n          throw new Error('The context has no set of AudioWorkletNodes.');\n        }\n        return unrenderedAudioWorkletNodes;\n      };\n    };\n\n    var createInvalidAccessError = function createInvalidAccessError() {\n      return new DOMException('', 'InvalidAccessError');\n    };\n\n    var wrapIIRFilterNodeGetFrequencyResponseMethod = function wrapIIRFilterNodeGetFrequencyResponseMethod(nativeIIRFilterNode) {\n      nativeIIRFilterNode.getFrequencyResponse = function (getFrequencyResponse) {\n        return function (frequencyHz, magResponse, phaseResponse) {\n          if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {\n            throw createInvalidAccessError();\n          }\n          return getFrequencyResponse.call(nativeIIRFilterNode, frequencyHz, magResponse, phaseResponse);\n        };\n      }(nativeIIRFilterNode.getFrequencyResponse);\n    };\n\n    function ownKeys$i(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\n    function _objectSpread$i(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$i(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$i(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n    function _callSuper$c(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$c() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n    function _isNativeReflectConstruct$c() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$c = function _isNativeReflectConstruct() { return !!t; })(); }\n    var DEFAULT_OPTIONS$8 = {\n      channelCount: 2,\n      channelCountMode: 'max',\n      channelInterpretation: 'speakers'\n    };\n    var createIIRFilterNodeConstructor = function createIIRFilterNodeConstructor(audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) {\n      return /*#__PURE__*/function (_audioNodeConstructor) {\n        function IIRFilterNode(context, options) {\n          var _this;\n          _classCallCheck(this, IIRFilterNode);\n          var nativeContext = getNativeContext(context);\n          var isOffline = isNativeOfflineAudioContext(nativeContext);\n          var mergedOptions = _objectSpread$i(_objectSpread$i({}, DEFAULT_OPTIONS$8), options);\n          var nativeIIRFilterNode = createNativeIIRFilterNode(nativeContext, isOffline ? null : context.baseLatency, mergedOptions);\n          var iirFilterNodeRenderer = isOffline ? createIIRFilterNodeRenderer(mergedOptions.feedback, mergedOptions.feedforward) : null;\n          _this = _callSuper$c(this, IIRFilterNode, [context, false, nativeIIRFilterNode, iirFilterNodeRenderer]);\n          // Bug #23 & #24: FirefoxDeveloper does not throw an InvalidAccessError.\n          // @todo Write a test which allows other browsers to remain unpatched.\n          wrapIIRFilterNodeGetFrequencyResponseMethod(nativeIIRFilterNode);\n          _this._nativeIIRFilterNode = nativeIIRFilterNode;\n          // @todo Determine a meaningful tail-time instead of just using one second.\n          setAudioNodeTailTime(_this, 1);\n          return _this;\n        }\n        _inherits(IIRFilterNode, _audioNodeConstructor);\n        return _createClass(IIRFilterNode, [{\n          key: \"getFrequencyResponse\",\n          value: function getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n            return this._nativeIIRFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n          }\n        }]);\n      }(audioNodeConstructor);\n    };\n\n    // This implementation as shamelessly inspired by source code of\n    // tslint:disable-next-line:max-line-length\n    // {@link https://chromium.googlesource.com/chromium/src.git/+/master/third_party/WebKit/Source/platform/audio/IIRFilter.cpp|Chromium's IIRFilter}.\n    var filterBuffer = function filterBuffer(feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffer, yBuffer, bufferIndex, bufferLength, input, output) {\n      var inputLength = input.length;\n      var i = bufferIndex;\n      for (var j = 0; j < inputLength; j += 1) {\n        var y = feedforward[0] * input[j];\n        for (var k = 1; k < minLength; k += 1) {\n          var x = i - k & bufferLength - 1; // tslint:disable-line:no-bitwise\n          y += feedforward[k] * xBuffer[x];\n          y -= feedback[k] * yBuffer[x];\n        }\n        for (var _k = minLength; _k < feedforwardLength; _k += 1) {\n          y += feedforward[_k] * xBuffer[i - _k & bufferLength - 1]; // tslint:disable-line:no-bitwise\n        }\n        for (var _k2 = minLength; _k2 < feedbackLength; _k2 += 1) {\n          y -= feedback[_k2] * yBuffer[i - _k2 & bufferLength - 1]; // tslint:disable-line:no-bitwise\n        }\n        xBuffer[i] = input[j];\n        yBuffer[i] = y;\n        i = i + 1 & bufferLength - 1; // tslint:disable-line:no-bitwise\n        output[j] = y;\n      }\n      return i;\n    };\n\n    var filterFullBuffer = function filterFullBuffer(renderedBuffer, nativeOfflineAudioContext, feedback, feedforward) {\n      var convertedFeedback = feedback instanceof Float64Array ? feedback : new Float64Array(feedback);\n      var convertedFeedforward = feedforward instanceof Float64Array ? feedforward : new Float64Array(feedforward);\n      var feedbackLength = convertedFeedback.length;\n      var feedforwardLength = convertedFeedforward.length;\n      var minLength = Math.min(feedbackLength, feedforwardLength);\n      if (convertedFeedback[0] !== 1) {\n        for (var i = 0; i < feedbackLength; i += 1) {\n          convertedFeedforward[i] /= convertedFeedback[0];\n        }\n        for (var _i = 1; _i < feedforwardLength; _i += 1) {\n          convertedFeedback[_i] /= convertedFeedback[0];\n        }\n      }\n      var bufferLength = 32;\n      var xBuffer = new Float32Array(bufferLength);\n      var yBuffer = new Float32Array(bufferLength);\n      var filteredBuffer = nativeOfflineAudioContext.createBuffer(renderedBuffer.numberOfChannels, renderedBuffer.length, renderedBuffer.sampleRate);\n      var numberOfChannels = renderedBuffer.numberOfChannels;\n      for (var _i2 = 0; _i2 < numberOfChannels; _i2 += 1) {\n        var input = renderedBuffer.getChannelData(_i2);\n        var output = filteredBuffer.getChannelData(_i2);\n        xBuffer.fill(0);\n        yBuffer.fill(0);\n        filterBuffer(convertedFeedback, feedbackLength, convertedFeedforward, feedforwardLength, minLength, xBuffer, yBuffer, 0, bufferLength, input, output);\n      }\n      return filteredBuffer;\n    };\n    var createIIRFilterNodeRendererFactory = function createIIRFilterNodeRendererFactory(createNativeAudioBufferSourceNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext) {\n      return function (feedback, feedforward) {\n        var renderedNativeAudioNodes = new WeakMap();\n        var filteredBufferPromise = null;\n        var createAudioNode = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(proxy, nativeOfflineAudioContext) {\n            var nativeAudioBufferSourceNode, nativeIIRFilterNode, nativeIIRFilterNodeIsOwnedByContext, partialOfflineAudioContext, filteredBuffer;\n            return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n              while (1) switch (_context2.prev = _context2.next) {\n                case 0:\n                  nativeAudioBufferSourceNode = null;\n                  nativeIIRFilterNode = getNativeAudioNode(proxy); // If the initially used nativeIIRFilterNode was not constructed on the same OfflineAudioContext it needs to be created again.\n                  nativeIIRFilterNodeIsOwnedByContext = isOwnedByContext(nativeIIRFilterNode, nativeOfflineAudioContext); // Bug #9: Safari does not support IIRFilterNodes.\n                  if (nativeOfflineAudioContext.createIIRFilter === undefined) {\n                    nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, {\n                      buffer: null,\n                      channelCount: 2,\n                      channelCountMode: 'max',\n                      channelInterpretation: 'speakers',\n                      loop: false,\n                      loopEnd: 0,\n                      loopStart: 0,\n                      playbackRate: 1\n                    });\n                  } else if (!nativeIIRFilterNodeIsOwnedByContext) {\n                    // @todo TypeScript defines the parameters of createIIRFilter() as arrays of numbers.\n                    nativeIIRFilterNode = nativeOfflineAudioContext.createIIRFilter(feedforward, feedback);\n                  }\n                  renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode === null ? nativeIIRFilterNode : nativeAudioBufferSourceNode);\n                  if (!(nativeAudioBufferSourceNode !== null)) {\n                    _context2.next = 17;\n                    break;\n                  }\n                  if (!(filteredBufferPromise === null)) {\n                    _context2.next = 11;\n                    break;\n                  }\n                  if (!(nativeOfflineAudioContextConstructor === null)) {\n                    _context2.next = 9;\n                    break;\n                  }\n                  throw new Error('Missing the native OfflineAudioContext constructor.');\n                case 9:\n                  partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(\n                  // Bug #47: The AudioDestinationNode in Safari gets not initialized correctly.\n                  proxy.context.destination.channelCount,\n                  // Bug #17: Safari does not yet expose the length.\n                  proxy.context.length, nativeOfflineAudioContext.sampleRate);\n                  filteredBufferPromise = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                    var renderedBuffer;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return renderInputsOfAudioNode(proxy, partialOfflineAudioContext, partialOfflineAudioContext.destination);\n                        case 2:\n                          _context.next = 4;\n                          return renderNativeOfflineAudioContext(partialOfflineAudioContext);\n                        case 4:\n                          renderedBuffer = _context.sent;\n                          return _context.abrupt(\"return\", filterFullBuffer(renderedBuffer, nativeOfflineAudioContext, feedback, feedforward));\n                        case 6:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }, _callee);\n                  }))();\n                case 11:\n                  _context2.next = 13;\n                  return filteredBufferPromise;\n                case 13:\n                  filteredBuffer = _context2.sent;\n                  nativeAudioBufferSourceNode.buffer = filteredBuffer;\n                  nativeAudioBufferSourceNode.start(0);\n                  return _context2.abrupt(\"return\", nativeAudioBufferSourceNode);\n                case 17:\n                  _context2.next = 19;\n                  return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeIIRFilterNode);\n                case 19:\n                  return _context2.abrupt(\"return\", nativeIIRFilterNode);\n                case 20:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }, _callee2);\n          }));\n          return function createAudioNode(_x, _x2) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n        return {\n          render: function render(proxy, nativeOfflineAudioContext) {\n            var renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n            if (renderedNativeAudioNode !== undefined) {\n              return Promise.resolve(renderedNativeAudioNode);\n            }\n            return createAudioNode(proxy, nativeOfflineAudioContext);\n          }\n        };\n      };\n    };\n\n    function _createForOfIteratorHelper$2(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray$2(r)) || e) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\n    function _unsupportedIterableToArray$2(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray$2(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$2(r, a) : void 0; } }\n    function _arrayLikeToArray$2(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n    var createIncrementCycleCounterFactory = function createIncrementCycleCounterFactory(cycleCounters, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, isActiveAudioNode) {\n      return function (isOffline) {\n        return function (audioNode, count) {\n          var cycleCounter = cycleCounters.get(audioNode);\n          if (cycleCounter === undefined) {\n            if (!isOffline && isActiveAudioNode(audioNode)) {\n              var nativeSourceAudioNode = getNativeAudioNode(audioNode);\n              var _getAudioNodeConnecti = getAudioNodeConnections(audioNode),\n                outputs = _getAudioNodeConnecti.outputs;\n              var _iterator = _createForOfIteratorHelper$2(outputs),\n                _step;\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  var output = _step.value;\n                  if (isAudioNodeOutputConnection(output)) {\n                    var nativeDestinationAudioNode = getNativeAudioNode(output[0]);\n                    disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output[1], output[2]);\n                  } else {\n                    var nativeDestinationAudioParam = getNativeAudioParam(output[0]);\n                    nativeSourceAudioNode.disconnect(nativeDestinationAudioParam, output[1]);\n                  }\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n            }\n            cycleCounters.set(audioNode, count);\n          } else {\n            cycleCounters.set(audioNode, cycleCounter + count);\n          }\n        };\n      };\n    };\n\n    var createIsAnyAudioContext = function createIsAnyAudioContext(contextStore, isNativeAudioContext) {\n      return function (anything) {\n        var nativeContext = contextStore.get(anything);\n        return isNativeAudioContext(nativeContext) || isNativeAudioContext(anything);\n      };\n    };\n\n    var createIsAnyAudioNode = function createIsAnyAudioNode(audioNodeStore, isNativeAudioNode) {\n      return function (anything) {\n        return audioNodeStore.has(anything) || isNativeAudioNode(anything);\n      };\n    };\n\n    var createIsAnyAudioParam = function createIsAnyAudioParam(audioParamStore, isNativeAudioParam) {\n      return function (anything) {\n        return audioParamStore.has(anything) || isNativeAudioParam(anything);\n      };\n    };\n\n    var createIsAnyOfflineAudioContext = function createIsAnyOfflineAudioContext(contextStore, isNativeOfflineAudioContext) {\n      return function (anything) {\n        var nativeContext = contextStore.get(anything);\n        return isNativeOfflineAudioContext(nativeContext) || isNativeOfflineAudioContext(anything);\n      };\n    };\n\n    var createIsNativeAudioContext = function createIsNativeAudioContext(nativeAudioContextConstructor) {\n      return function (anything) {\n        return nativeAudioContextConstructor !== null && anything instanceof nativeAudioContextConstructor;\n      };\n    };\n\n    var createIsNativeAudioNode = function createIsNativeAudioNode(window) {\n      return function (anything) {\n        return window !== null && typeof window.AudioNode === 'function' && anything instanceof window.AudioNode;\n      };\n    };\n\n    var createIsNativeAudioParam = function createIsNativeAudioParam(window) {\n      return function (anything) {\n        return window !== null && typeof window.AudioParam === 'function' && anything instanceof window.AudioParam;\n      };\n    };\n\n    var createIsNativeContext = function createIsNativeContext(isNativeAudioContext, isNativeOfflineAudioContext) {\n      return function (anything) {\n        return isNativeAudioContext(anything) || isNativeOfflineAudioContext(anything);\n      };\n    };\n\n    var createIsNativeOfflineAudioContext = function createIsNativeOfflineAudioContext(nativeOfflineAudioContextConstructor) {\n      return function (anything) {\n        return nativeOfflineAudioContextConstructor !== null && anything instanceof nativeOfflineAudioContextConstructor;\n      };\n    };\n\n    var createIsSecureContext = function createIsSecureContext(window) {\n      return window !== null && window.isSecureContext;\n    };\n\n    var createIsSupportedPromise = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(cacheTestResult, testAudioBufferCopyChannelMethodsSubarraySupport, testAudioContextCloseMethodSupport, testAudioContextDecodeAudioDataMethodTypeErrorSupport, testAudioContextOptionsSupport, testAudioNodeConnectMethodSupport, testAudioWorkletProcessorNoOutputsSupport, testChannelMergerNodeChannelCountSupport, testConstantSourceNodeAccurateSchedulingSupport, testConvolverNodeBufferReassignabilitySupport, testConvolverNodeChannelCountSupport, testDomExceptionContrucorSupport, testIsSecureContextSupport, testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport, testStereoPannerNodeDefaultValueSupport, testTransferablesSupport) {\n        var results;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!(cacheTestResult(testAudioBufferCopyChannelMethodsSubarraySupport, testAudioBufferCopyChannelMethodsSubarraySupport) && cacheTestResult(testAudioContextCloseMethodSupport, testAudioContextCloseMethodSupport) && cacheTestResult(testAudioContextOptionsSupport, testAudioContextOptionsSupport) && cacheTestResult(testAudioNodeConnectMethodSupport, testAudioNodeConnectMethodSupport) && cacheTestResult(testChannelMergerNodeChannelCountSupport, testChannelMergerNodeChannelCountSupport) && cacheTestResult(testConstantSourceNodeAccurateSchedulingSupport, testConstantSourceNodeAccurateSchedulingSupport) && cacheTestResult(testConvolverNodeBufferReassignabilitySupport, testConvolverNodeBufferReassignabilitySupport) && cacheTestResult(testConvolverNodeChannelCountSupport, testConvolverNodeChannelCountSupport) && cacheTestResult(testDomExceptionContrucorSupport, testDomExceptionContrucorSupport) && cacheTestResult(testIsSecureContextSupport, testIsSecureContextSupport) && cacheTestResult(testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport, testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport))) {\n                _context.next = 5;\n                break;\n              }\n              _context.next = 3;\n              return Promise.all([cacheTestResult(testAudioContextDecodeAudioDataMethodTypeErrorSupport, testAudioContextDecodeAudioDataMethodTypeErrorSupport), cacheTestResult(testAudioWorkletProcessorNoOutputsSupport, testAudioWorkletProcessorNoOutputsSupport), cacheTestResult(testStereoPannerNodeDefaultValueSupport, testStereoPannerNodeDefaultValueSupport), cacheTestResult(testTransferablesSupport, testTransferablesSupport)]);\n            case 3:\n              results = _context.sent;\n              return _context.abrupt(\"return\", results.every(function (result) {\n                return result;\n              }));\n            case 5:\n              return _context.abrupt(\"return\", false);\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return function createIsSupportedPromise(_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8, _x9, _x10, _x11, _x12, _x13, _x14, _x15, _x16) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    function _callSuper$b(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$b() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n    function _isNativeReflectConstruct$b() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$b = function _isNativeReflectConstruct() { return !!t; })(); }\n    var createMediaElementAudioSourceNodeConstructor = function createMediaElementAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaElementAudioSourceNode, getNativeContext, isNativeOfflineAudioContext) {\n      return /*#__PURE__*/function (_audioNodeConstructor) {\n        function MediaElementAudioSourceNode(context, options) {\n          var _this;\n          _classCallCheck(this, MediaElementAudioSourceNode);\n          var nativeContext = getNativeContext(context);\n          var nativeMediaElementAudioSourceNode = createNativeMediaElementAudioSourceNode(nativeContext, options);\n          // Bug #171: Safari allows to create a MediaElementAudioSourceNode with an OfflineAudioContext.\n          if (isNativeOfflineAudioContext(nativeContext)) {\n            throw TypeError();\n          }\n          _this = _callSuper$b(this, MediaElementAudioSourceNode, [context, true, nativeMediaElementAudioSourceNode, null]);\n          _this._nativeMediaElementAudioSourceNode = nativeMediaElementAudioSourceNode;\n          return _this;\n        }\n        _inherits(MediaElementAudioSourceNode, _audioNodeConstructor);\n        return _createClass(MediaElementAudioSourceNode, [{\n          key: \"mediaElement\",\n          get: function get() {\n            return this._nativeMediaElementAudioSourceNode.mediaElement;\n          }\n        }]);\n      }(audioNodeConstructor);\n    };\n\n    function ownKeys$h(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\n    function _objectSpread$h(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$h(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$h(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n    function _callSuper$a(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$a() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n    function _isNativeReflectConstruct$a() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$a = function _isNativeReflectConstruct() { return !!t; })(); }\n    var DEFAULT_OPTIONS$7 = {\n      channelCount: 2,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'speakers'\n    };\n    var createMediaStreamAudioDestinationNodeConstructor = function createMediaStreamAudioDestinationNodeConstructor(audioNodeConstructor, createNativeMediaStreamAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext) {\n      return /*#__PURE__*/function (_audioNodeConstructor) {\n        function MediaStreamAudioDestinationNode(context, options) {\n          var _this;\n          _classCallCheck(this, MediaStreamAudioDestinationNode);\n          var nativeContext = getNativeContext(context);\n          // Bug #173: Safari allows to create a MediaStreamAudioDestinationNode with an OfflineAudioContext.\n          if (isNativeOfflineAudioContext(nativeContext)) {\n            throw new TypeError();\n          }\n          var mergedOptions = _objectSpread$h(_objectSpread$h({}, DEFAULT_OPTIONS$7), options);\n          var nativeMediaStreamAudioDestinationNode = createNativeMediaStreamAudioDestinationNode(nativeContext, mergedOptions);\n          _this = _callSuper$a(this, MediaStreamAudioDestinationNode, [context, false, nativeMediaStreamAudioDestinationNode, null]);\n          _this._nativeMediaStreamAudioDestinationNode = nativeMediaStreamAudioDestinationNode;\n          return _this;\n        }\n        _inherits(MediaStreamAudioDestinationNode, _audioNodeConstructor);\n        return _createClass(MediaStreamAudioDestinationNode, [{\n          key: \"stream\",\n          get: function get() {\n            return this._nativeMediaStreamAudioDestinationNode.stream;\n          }\n        }]);\n      }(audioNodeConstructor);\n    };\n\n    function _callSuper$9(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$9() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n    function _isNativeReflectConstruct$9() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$9 = function _isNativeReflectConstruct() { return !!t; })(); }\n    var createMediaStreamAudioSourceNodeConstructor = function createMediaStreamAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamAudioSourceNode, getNativeContext, isNativeOfflineAudioContext) {\n      return /*#__PURE__*/function (_audioNodeConstructor) {\n        function MediaStreamAudioSourceNode(context, options) {\n          var _this;\n          _classCallCheck(this, MediaStreamAudioSourceNode);\n          var nativeContext = getNativeContext(context);\n          var nativeMediaStreamAudioSourceNode = createNativeMediaStreamAudioSourceNode(nativeContext, options);\n          // Bug #172: Safari allows to create a MediaStreamAudioSourceNode with an OfflineAudioContext.\n          if (isNativeOfflineAudioContext(nativeContext)) {\n            throw new TypeError();\n          }\n          _this = _callSuper$9(this, MediaStreamAudioSourceNode, [context, true, nativeMediaStreamAudioSourceNode, null]);\n          _this._nativeMediaStreamAudioSourceNode = nativeMediaStreamAudioSourceNode;\n          return _this;\n        }\n        _inherits(MediaStreamAudioSourceNode, _audioNodeConstructor);\n        return _createClass(MediaStreamAudioSourceNode, [{\n          key: \"mediaStream\",\n          get: function get() {\n            return this._nativeMediaStreamAudioSourceNode.mediaStream;\n          }\n        }]);\n      }(audioNodeConstructor);\n    };\n\n    function _callSuper$8(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$8() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n    function _isNativeReflectConstruct$8() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$8 = function _isNativeReflectConstruct() { return !!t; })(); }\n    var createMediaStreamTrackAudioSourceNodeConstructor = function createMediaStreamTrackAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamTrackAudioSourceNode, getNativeContext) {\n      return /*#__PURE__*/function (_audioNodeConstructor) {\n        function MediaStreamTrackAudioSourceNode(context, options) {\n          _classCallCheck(this, MediaStreamTrackAudioSourceNode);\n          var nativeContext = getNativeContext(context);\n          var nativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNode(nativeContext, options);\n          return _callSuper$8(this, MediaStreamTrackAudioSourceNode, [context, true, nativeMediaStreamTrackAudioSourceNode, null]);\n        }\n        _inherits(MediaStreamTrackAudioSourceNode, _audioNodeConstructor);\n        return _createClass(MediaStreamTrackAudioSourceNode);\n      }(audioNodeConstructor);\n    };\n\n    function _callSuper$7(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$7() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n    function _isNativeReflectConstruct$7() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$7 = function _isNativeReflectConstruct() { return !!t; })(); }\n    var createMinimalAudioContextConstructor = function createMinimalAudioContextConstructor(createInvalidStateError, createNotSupportedError, createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor) {\n      return /*#__PURE__*/function (_minimalBaseAudioCont) {\n        function MinimalAudioContext() {\n          var _this;\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          _classCallCheck(this, MinimalAudioContext);\n          if (nativeAudioContextConstructor === null) {\n            throw new Error('Missing the native AudioContext constructor.');\n          }\n          var nativeAudioContext;\n          try {\n            nativeAudioContext = new nativeAudioContextConstructor(options);\n          } catch (err) {\n            // Bug #192 Safari does throw a SyntaxError if the sampleRate is not supported.\n            if (err.code === 12 && err.message === 'sampleRate is not in range') {\n              throw createNotSupportedError();\n            }\n            throw err;\n          }\n          // Bug #131 Safari returns null when there are four other AudioContexts running already.\n          if (nativeAudioContext === null) {\n            throw createUnknownError();\n          }\n          // Bug #51 Only Chrome and Edge throw an error if the given latencyHint is invalid.\n          if (!isValidLatencyHint(options.latencyHint)) {\n            throw new TypeError(\"The provided value '\".concat(options.latencyHint, \"' is not a valid enum value of type AudioContextLatencyCategory.\"));\n          }\n          // Bug #150 Safari does not support setting the sampleRate.\n          if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {\n            throw createNotSupportedError();\n          }\n          _this = _callSuper$7(this, MinimalAudioContext, [nativeAudioContext, 2]);\n          var latencyHint = options.latencyHint;\n          var _nativeAudioContext = nativeAudioContext,\n            sampleRate = _nativeAudioContext.sampleRate;\n          // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.\n          _this._baseLatency = typeof nativeAudioContext.baseLatency === 'number' ? nativeAudioContext.baseLatency : latencyHint === 'balanced' ? 512 / sampleRate : latencyHint === 'interactive' || latencyHint === undefined ? 256 / sampleRate : latencyHint === 'playback' ? 1024 / sampleRate :\n          /*\n           * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a\n           * ScriptProcessorNode.\n           */\n          Math.max(2, Math.min(128, Math.round(latencyHint * sampleRate / 128))) * 128 / sampleRate;\n          _this._nativeAudioContext = nativeAudioContext;\n          // Bug #188: Safari will set the context's state to 'interrupted' in case the user switches tabs.\n          if (nativeAudioContextConstructor.name === 'webkitAudioContext') {\n            _this._nativeGainNode = nativeAudioContext.createGain();\n            _this._nativeOscillatorNode = nativeAudioContext.createOscillator();\n            _this._nativeGainNode.gain.value = 1e-37;\n            _this._nativeOscillatorNode.connect(_this._nativeGainNode).connect(nativeAudioContext.destination);\n            _this._nativeOscillatorNode.start();\n          } else {\n            _this._nativeGainNode = null;\n            _this._nativeOscillatorNode = null;\n          }\n          _this._state = null;\n          /*\n           * Bug #34: Chrome and Edge pretend to be running right away, but fire an onstatechange event when the state actually changes\n           * to 'running'.\n           */\n          if (nativeAudioContext.state === 'running') {\n            _this._state = 'suspended';\n            var _revokeState = function revokeState() {\n              if (_this._state === 'suspended') {\n                _this._state = null;\n              }\n              nativeAudioContext.removeEventListener('statechange', _revokeState);\n            };\n            nativeAudioContext.addEventListener('statechange', _revokeState);\n          }\n          return _this;\n        }\n        _inherits(MinimalAudioContext, _minimalBaseAudioCont);\n        return _createClass(MinimalAudioContext, [{\n          key: \"baseLatency\",\n          get: function get() {\n            return this._baseLatency;\n          }\n        }, {\n          key: \"state\",\n          get: function get() {\n            return this._state !== null ? this._state : this._nativeAudioContext.state;\n          }\n        }, {\n          key: \"close\",\n          value: function close() {\n            var _this2 = this;\n            // Bug #35: Firefox does not throw an error if the AudioContext was closed before.\n            if (this.state === 'closed') {\n              return this._nativeAudioContext.close().then(function () {\n                throw createInvalidStateError();\n              });\n            }\n            // Bug #34: If the state was set to suspended before it should be revoked now.\n            if (this._state === 'suspended') {\n              this._state = null;\n            }\n            return this._nativeAudioContext.close().then(function () {\n              if (_this2._nativeGainNode !== null && _this2._nativeOscillatorNode !== null) {\n                _this2._nativeOscillatorNode.stop();\n                _this2._nativeGainNode.disconnect();\n                _this2._nativeOscillatorNode.disconnect();\n              }\n              deactivateAudioGraph(_this2);\n            });\n          }\n        }, {\n          key: \"resume\",\n          value: function resume() {\n            var _this3 = this;\n            if (this._state === 'suspended') {\n              return new Promise(function (resolve, reject) {\n                var _resolvePromise = function resolvePromise() {\n                  _this3._nativeAudioContext.removeEventListener('statechange', _resolvePromise);\n                  if (_this3._nativeAudioContext.state === 'running') {\n                    resolve();\n                  } else {\n                    _this3.resume().then(resolve, reject);\n                  }\n                };\n                _this3._nativeAudioContext.addEventListener('statechange', _resolvePromise);\n              });\n            }\n            return this._nativeAudioContext.resume()[\"catch\"](function (err) {\n              // Bug #55: Chrome and Edge do throw an InvalidAccessError instead of an InvalidStateError.\n              // Bug #56: Safari invokes the catch handler but without an error.\n              if (err === undefined || err.code === 15) {\n                throw createInvalidStateError();\n              }\n              throw err;\n            });\n          }\n        }, {\n          key: \"suspend\",\n          value: function suspend() {\n            return this._nativeAudioContext.suspend()[\"catch\"](function (err) {\n              // Bug #56: Safari invokes the catch handler but without an error.\n              if (err === undefined) {\n                throw createInvalidStateError();\n              }\n              throw err;\n            });\n          }\n        }]);\n      }(minimalBaseAudioContextConstructor);\n    };\n\n    function _callSuper$6(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$6() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n    function _isNativeReflectConstruct$6() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$6 = function _isNativeReflectConstruct() { return !!t; })(); }\n    var createMinimalBaseAudioContextConstructor = function createMinimalBaseAudioContextConstructor(audioDestinationNodeConstructor, createAudioListener, eventTargetConstructor, isNativeOfflineAudioContext, unrenderedAudioWorkletNodeStore, wrapEventListener) {\n      return /*#__PURE__*/function (_eventTargetConstruct) {\n        function MinimalBaseAudioContext(_nativeContext, numberOfChannels) {\n          var _this;\n          _classCallCheck(this, MinimalBaseAudioContext);\n          _this = _callSuper$6(this, MinimalBaseAudioContext, [_nativeContext]);\n          _this._nativeContext = _nativeContext;\n          CONTEXT_STORE.set(_this, _nativeContext);\n          if (isNativeOfflineAudioContext(_nativeContext)) {\n            unrenderedAudioWorkletNodeStore.set(_nativeContext, new Set());\n          }\n          _this._destination = new audioDestinationNodeConstructor(_this, numberOfChannels);\n          _this._listener = createAudioListener(_this, _nativeContext);\n          _this._onstatechange = null;\n          return _this;\n        }\n        _inherits(MinimalBaseAudioContext, _eventTargetConstruct);\n        return _createClass(MinimalBaseAudioContext, [{\n          key: \"currentTime\",\n          get: function get() {\n            return this._nativeContext.currentTime;\n          }\n        }, {\n          key: \"destination\",\n          get: function get() {\n            return this._destination;\n          }\n        }, {\n          key: \"listener\",\n          get: function get() {\n            return this._listener;\n          }\n        }, {\n          key: \"onstatechange\",\n          get: function get() {\n            return this._onstatechange;\n          },\n          set: function set(value) {\n            var wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n            this._nativeContext.onstatechange = wrappedListener;\n            var nativeOnStateChange = this._nativeContext.onstatechange;\n            this._onstatechange = nativeOnStateChange !== null && nativeOnStateChange === wrappedListener ? value : nativeOnStateChange;\n          }\n        }, {\n          key: \"sampleRate\",\n          get: function get() {\n            return this._nativeContext.sampleRate;\n          }\n        }, {\n          key: \"state\",\n          get: function get() {\n            return this._nativeContext.state;\n          }\n        }]);\n      }(eventTargetConstructor);\n    };\n\n    var testPromiseSupport = function testPromiseSupport(nativeContext) {\n      // This 12 numbers represent the 48 bytes of an empty WAVE file with a single sample.\n      var uint32Array = new Uint32Array([1179011410, 40, 1163280727, 544501094, 16, 131073, 44100, 176400, 1048580, 1635017060, 4, 0]);\n      try {\n        // Bug #1: Safari requires a successCallback.\n        var promise = nativeContext.decodeAudioData(uint32Array.buffer, function () {\n          // Ignore the success callback.\n        });\n        if (promise === undefined) {\n          return false;\n        }\n        promise[\"catch\"](function () {\n          // Ignore rejected errors.\n        });\n        return true;\n      } catch (_unused) {\n        // Ignore errors.\n      }\n      return false;\n    };\n\n    function ownKeys$g(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\n    function _objectSpread$g(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$g(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$g(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n    function _callSuper$5(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$5() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n    function _isNativeReflectConstruct$5() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$5 = function _isNativeReflectConstruct() { return !!t; })(); }\n    var DEFAULT_OPTIONS$6 = {\n      numberOfChannels: 1\n    };\n    var createMinimalOfflineAudioContextConstructor = function createMinimalOfflineAudioContextConstructor(cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, _startRendering) {\n      return /*#__PURE__*/function (_minimalBaseAudioCont) {\n        function MinimalOfflineAudioContext(options) {\n          var _this;\n          _classCallCheck(this, MinimalOfflineAudioContext);\n          var _DEFAULT_OPTIONS$opti = _objectSpread$g(_objectSpread$g({}, DEFAULT_OPTIONS$6), options),\n            length = _DEFAULT_OPTIONS$opti.length,\n            numberOfChannels = _DEFAULT_OPTIONS$opti.numberOfChannels,\n            sampleRate = _DEFAULT_OPTIONS$opti.sampleRate;\n          var nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate);\n          // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.\n          if (!cacheTestResult(testPromiseSupport, function () {\n            return testPromiseSupport(nativeOfflineAudioContext);\n          })) {\n            nativeOfflineAudioContext.addEventListener('statechange', function () {\n              var i = 0;\n              var _delayStateChangeEvent = function delayStateChangeEvent(event) {\n                if (_this._state === 'running') {\n                  if (i > 0) {\n                    nativeOfflineAudioContext.removeEventListener('statechange', _delayStateChangeEvent);\n                    event.stopImmediatePropagation();\n                    _this._waitForThePromiseToSettle(event);\n                  } else {\n                    i += 1;\n                  }\n                }\n              };\n              return _delayStateChangeEvent;\n            }());\n          }\n          _this = _callSuper$5(this, MinimalOfflineAudioContext, [nativeOfflineAudioContext, numberOfChannels]);\n          _this._length = length;\n          _this._nativeOfflineAudioContext = nativeOfflineAudioContext;\n          _this._state = null;\n          return _this;\n        }\n        _inherits(MinimalOfflineAudioContext, _minimalBaseAudioCont);\n        return _createClass(MinimalOfflineAudioContext, [{\n          key: \"length\",\n          get: function get() {\n            // Bug #17: Safari does not yet expose the length.\n            if (this._nativeOfflineAudioContext.length === undefined) {\n              return this._length;\n            }\n            return this._nativeOfflineAudioContext.length;\n          }\n        }, {\n          key: \"state\",\n          get: function get() {\n            return this._state === null ? this._nativeOfflineAudioContext.state : this._state;\n          }\n        }, {\n          key: \"startRendering\",\n          value: function startRendering() {\n            var _this2 = this;\n            /*\n             * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore\n             * the state of the nativeOfflineAudioContext might no transition to running immediately.\n             */\n            if (this._state === 'running') {\n              return Promise.reject(createInvalidStateError());\n            }\n            this._state = 'running';\n            return _startRendering(this.destination, this._nativeOfflineAudioContext)[\"finally\"](function () {\n              _this2._state = null;\n              deactivateAudioGraph(_this2);\n            });\n          }\n        }, {\n          key: \"_waitForThePromiseToSettle\",\n          value: function _waitForThePromiseToSettle(event) {\n            var _this3 = this;\n            if (this._state === null) {\n              this._nativeOfflineAudioContext.dispatchEvent(event);\n            } else {\n              setTimeout(function () {\n                return _this3._waitForThePromiseToSettle(event);\n              });\n            }\n          }\n        }]);\n      }(minimalBaseAudioContextConstructor);\n    };\n\n    function _createForOfIteratorHelper$1(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray$1(r)) || e) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\n    function _unsupportedIterableToArray$1(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray$1(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray$1(r, a) : void 0; } }\n    function _arrayLikeToArray$1(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n    var createMonitorConnections = function createMonitorConnections(insertElementInSet, isNativeAudioNode) {\n      return function (nativeAudioNode, whenConnected, whenDisconnected) {\n        var connections = new Set();\n        nativeAudioNode.connect = function (connect) {\n          // tslint:disable-next-line:invalid-void no-inferrable-types\n          return function (destination) {\n            var output = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n            var input = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n            var wasDisconnected = connections.size === 0;\n            if (isNativeAudioNode(destination)) {\n              // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n              connect.call(nativeAudioNode, destination, output, input);\n              insertElementInSet(connections, [destination, output, input], function (connection) {\n                return connection[0] === destination && connection[1] === output && connection[2] === input;\n              }, true);\n              if (wasDisconnected) {\n                whenConnected();\n              }\n              return destination;\n            }\n            connect.call(nativeAudioNode, destination, output);\n            insertElementInSet(connections, [destination, output], function (connection) {\n              return connection[0] === destination && connection[1] === output;\n            }, true);\n            if (wasDisconnected) {\n              whenConnected();\n            }\n            return;\n          };\n        }(nativeAudioNode.connect);\n        nativeAudioNode.disconnect = function (disconnect) {\n          return function (destinationOrOutput, output, input) {\n            var wasConnected = connections.size > 0;\n            if (destinationOrOutput === undefined) {\n              disconnect.apply(nativeAudioNode);\n              connections.clear();\n            } else if (typeof destinationOrOutput === 'number') {\n              // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.\n              disconnect.call(nativeAudioNode, destinationOrOutput);\n              var _iterator = _createForOfIteratorHelper$1(connections),\n                _step;\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  var connection = _step.value;\n                  if (connection[1] === destinationOrOutput) {\n                    connections[\"delete\"](connection);\n                  }\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n            } else {\n              if (isNativeAudioNode(destinationOrOutput)) {\n                // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n                disconnect.call(nativeAudioNode, destinationOrOutput, output, input);\n              } else {\n                // @todo TypeScript cannot infer the overloaded signature with 2 arguments yet.\n                disconnect.call(nativeAudioNode, destinationOrOutput, output);\n              }\n              var _iterator2 = _createForOfIteratorHelper$1(connections),\n                _step2;\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  var _connection = _step2.value;\n                  if (_connection[0] === destinationOrOutput && (output === undefined || _connection[1] === output) && (input === undefined || _connection[2] === input)) {\n                    connections[\"delete\"](_connection);\n                  }\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n            }\n            var isDisconnected = connections.size === 0;\n            if (wasConnected && isDisconnected) {\n              whenDisconnected();\n            }\n          };\n        }(nativeAudioNode.disconnect);\n        return nativeAudioNode;\n      };\n    };\n\n    var assignNativeAudioNodeOption = function assignNativeAudioNodeOption(nativeAudioNode, options, option) {\n      var value = options[option];\n      if (value !== undefined && value !== nativeAudioNode[option]) {\n        nativeAudioNode[option] = value;\n      }\n    };\n\n    var assignNativeAudioNodeOptions = function assignNativeAudioNodeOptions(nativeAudioNode, options) {\n      assignNativeAudioNodeOption(nativeAudioNode, options, 'channelCount');\n      assignNativeAudioNodeOption(nativeAudioNode, options, 'channelCountMode');\n      assignNativeAudioNodeOption(nativeAudioNode, options, 'channelInterpretation');\n    };\n\n    var testAnalyserNodeGetFloatTimeDomainDataMethodSupport = function testAnalyserNodeGetFloatTimeDomainDataMethodSupport(nativeAnalyserNode) {\n      return typeof nativeAnalyserNode.getFloatTimeDomainData === 'function';\n    };\n\n    var wrapAnalyserNodeGetFloatTimeDomainDataMethod = function wrapAnalyserNodeGetFloatTimeDomainDataMethod(nativeAnalyserNode) {\n      nativeAnalyserNode.getFloatTimeDomainData = function (array) {\n        var byteTimeDomainData = new Uint8Array(array.length);\n        nativeAnalyserNode.getByteTimeDomainData(byteTimeDomainData);\n        var length = Math.max(byteTimeDomainData.length, nativeAnalyserNode.fftSize);\n        for (var i = 0; i < length; i += 1) {\n          array[i] = (byteTimeDomainData[i] - 128) * 0.0078125;\n        }\n        return array;\n      };\n    };\n\n    var createNativeAnalyserNodeFactory = function createNativeAnalyserNodeFactory(cacheTestResult, createIndexSizeError) {\n      return function (nativeContext, options) {\n        var nativeAnalyserNode = nativeContext.createAnalyser();\n        // Bug #37: Firefox does not create an AnalyserNode with the default properties.\n        assignNativeAudioNodeOptions(nativeAnalyserNode, options);\n        // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n        if (!(options.maxDecibels > options.minDecibels)) {\n          throw createIndexSizeError();\n        }\n        assignNativeAudioNodeOption(nativeAnalyserNode, options, 'fftSize');\n        assignNativeAudioNodeOption(nativeAnalyserNode, options, 'maxDecibels');\n        assignNativeAudioNodeOption(nativeAnalyserNode, options, 'minDecibels');\n        assignNativeAudioNodeOption(nativeAnalyserNode, options, 'smoothingTimeConstant');\n        // Bug #36: Safari does not support getFloatTimeDomainData() yet.\n        if (!cacheTestResult(testAnalyserNodeGetFloatTimeDomainDataMethodSupport, function () {\n          return testAnalyserNodeGetFloatTimeDomainDataMethodSupport(nativeAnalyserNode);\n        })) {\n          wrapAnalyserNodeGetFloatTimeDomainDataMethod(nativeAnalyserNode);\n        }\n        return nativeAnalyserNode;\n      };\n    };\n\n    var createNativeAudioBufferConstructor = function createNativeAudioBufferConstructor(window) {\n      if (window === null) {\n        return null;\n      }\n      if (window.hasOwnProperty('AudioBuffer')) {\n        return window.AudioBuffer;\n      }\n      return null;\n    };\n\n    var assignNativeAudioNodeAudioParamValue = function assignNativeAudioNodeAudioParamValue(nativeAudioNode, options, audioParam) {\n      var value = options[audioParam];\n      if (value !== undefined && value !== nativeAudioNode[audioParam].value) {\n        nativeAudioNode[audioParam].value = value;\n      }\n    };\n\n    var wrapAudioBufferSourceNodeStartMethodConsecutiveCalls = function wrapAudioBufferSourceNodeStartMethodConsecutiveCalls(nativeAudioBufferSourceNode) {\n      nativeAudioBufferSourceNode.start = function (start) {\n        var isScheduled = false;\n        return function () {\n          var when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n          var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n          var duration = arguments.length > 2 ? arguments[2] : undefined;\n          if (isScheduled) {\n            throw createInvalidStateError();\n          }\n          start.call(nativeAudioBufferSourceNode, when, offset, duration);\n          isScheduled = true;\n        };\n      }(nativeAudioBufferSourceNode.start);\n    };\n\n    var wrapAudioScheduledSourceNodeStartMethodNegativeParameters = function wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeAudioScheduledSourceNode) {\n      nativeAudioScheduledSourceNode.start = function (start) {\n        return function () {\n          var when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n          var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n          var duration = arguments.length > 2 ? arguments[2] : undefined;\n          if (typeof duration === 'number' && duration < 0 || offset < 0 || when < 0) {\n            throw new RangeError(\"The parameters can't be negative.\");\n          }\n          // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n          start.call(nativeAudioScheduledSourceNode, when, offset, duration);\n        };\n      }(nativeAudioScheduledSourceNode.start);\n    };\n\n    var wrapAudioScheduledSourceNodeStopMethodNegativeParameters = function wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeAudioScheduledSourceNode) {\n      nativeAudioScheduledSourceNode.stop = function (stop) {\n        return function () {\n          var when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n          if (when < 0) {\n            throw new RangeError(\"The parameter can't be negative.\");\n          }\n          stop.call(nativeAudioScheduledSourceNode, when);\n        };\n      }(nativeAudioScheduledSourceNode.stop);\n    };\n\n    var createNativeAudioBufferSourceNodeFactory = function createNativeAudioBufferSourceNodeFactory(addSilentConnection, cacheTestResult, testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, testAudioBufferSourceNodeStartMethodOffsetClampingSupport, testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClampling, wrapAudioBufferSourceNodeStopMethodNullifiedBuffer, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls) {\n      return function (nativeContext, options) {\n        var nativeAudioBufferSourceNode = nativeContext.createBufferSource();\n        assignNativeAudioNodeOptions(nativeAudioBufferSourceNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeAudioBufferSourceNode, options, 'playbackRate');\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'buffer');\n        // Bug #149: Safari does not yet support the detune AudioParam.\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loop');\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loopEnd');\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loopStart');\n        // Bug #69: Safari does allow calls to start() of an already scheduled AudioBufferSourceNode.\n        if (!cacheTestResult(testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, function () {\n          return testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport(nativeContext);\n        })) {\n          wrapAudioBufferSourceNodeStartMethodConsecutiveCalls(nativeAudioBufferSourceNode);\n        }\n        // Bug #154 & #155: Safari does not handle offsets which are equal to or greater than the duration of the buffer.\n        if (!cacheTestResult(testAudioBufferSourceNodeStartMethodOffsetClampingSupport, function () {\n          return testAudioBufferSourceNodeStartMethodOffsetClampingSupport(nativeContext);\n        })) {\n          wrapAudioBufferSourceNodeStartMethodOffsetClampling(nativeAudioBufferSourceNode);\n        }\n        // Bug #162: Safari does throw an error when stop() is called on an AudioBufferSourceNode which has no buffer assigned to it.\n        if (!cacheTestResult(testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, function () {\n          return testAudioBufferSourceNodeStopMethodNullifiedBufferSupport(nativeContext);\n        })) {\n          wrapAudioBufferSourceNodeStopMethodNullifiedBuffer(nativeAudioBufferSourceNode, nativeContext);\n        }\n        // Bug #44: Safari does not throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, function () {\n          return testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext);\n        })) {\n          wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeAudioBufferSourceNode);\n        }\n        // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, function () {\n          return testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext);\n        })) {\n          wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeAudioBufferSourceNode, nativeContext);\n        }\n        // Bug #44: Only Firefox does not throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, function () {\n          return testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext);\n        })) {\n          wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeAudioBufferSourceNode);\n        }\n        // Bug #175: Safari will not fire an ended event if the AudioBufferSourceNode is unconnected.\n        addSilentConnection(nativeContext, nativeAudioBufferSourceNode);\n        return nativeAudioBufferSourceNode;\n      };\n    };\n\n    var createNativeAudioContextConstructor = function createNativeAudioContextConstructor(window) {\n      if (window === null) {\n        return null;\n      }\n      if (window.hasOwnProperty('AudioContext')) {\n        return window.AudioContext;\n      }\n      return window.hasOwnProperty('webkitAudioContext') ? window.webkitAudioContext : null;\n    };\n\n    var createNativeAudioDestinationNodeFactory = function createNativeAudioDestinationNodeFactory(createNativeGainNode, overwriteAccessors) {\n      return function (nativeContext, channelCount, isNodeOfNativeOfflineAudioContext) {\n        var nativeAudioDestinationNode = nativeContext.destination;\n        // Bug #132: Safari does not have the correct channelCount.\n        if (nativeAudioDestinationNode.channelCount !== channelCount) {\n          try {\n            nativeAudioDestinationNode.channelCount = channelCount;\n          } catch (_unused) {\n            // Bug #169: Safari throws an error on each attempt to change the channelCount.\n          }\n        }\n        // Bug #83: Safari does not have the correct channelCountMode.\n        if (isNodeOfNativeOfflineAudioContext && nativeAudioDestinationNode.channelCountMode !== 'explicit') {\n          nativeAudioDestinationNode.channelCountMode = 'explicit';\n        }\n        // Bug #47: The AudioDestinationNode in Safari does not initialize the maxChannelCount property correctly.\n        if (nativeAudioDestinationNode.maxChannelCount === 0) {\n          Object.defineProperty(nativeAudioDestinationNode, 'maxChannelCount', {\n            value: channelCount\n          });\n        }\n        // Bug #168: No browser does yet have an AudioDestinationNode with an output.\n        var gainNode = createNativeGainNode(nativeContext, {\n          channelCount: channelCount,\n          channelCountMode: nativeAudioDestinationNode.channelCountMode,\n          channelInterpretation: nativeAudioDestinationNode.channelInterpretation,\n          gain: 1\n        });\n        overwriteAccessors(gainNode, 'channelCount', function (get) {\n          return function () {\n            return get.call(gainNode);\n          };\n        }, function (set) {\n          return function (value) {\n            set.call(gainNode, value);\n            try {\n              nativeAudioDestinationNode.channelCount = value;\n            } catch (err) {\n              // Bug #169: Safari throws an error on each attempt to change the channelCount.\n              if (value > nativeAudioDestinationNode.maxChannelCount) {\n                throw err;\n              }\n            }\n          };\n        });\n        overwriteAccessors(gainNode, 'channelCountMode', function (get) {\n          return function () {\n            return get.call(gainNode);\n          };\n        }, function (set) {\n          return function (value) {\n            set.call(gainNode, value);\n            nativeAudioDestinationNode.channelCountMode = value;\n          };\n        });\n        overwriteAccessors(gainNode, 'channelInterpretation', function (get) {\n          return function () {\n            return get.call(gainNode);\n          };\n        }, function (set) {\n          return function (value) {\n            set.call(gainNode, value);\n            nativeAudioDestinationNode.channelInterpretation = value;\n          };\n        });\n        Object.defineProperty(gainNode, 'maxChannelCount', {\n          get: function get() {\n            return nativeAudioDestinationNode.maxChannelCount;\n          }\n        });\n        // @todo This should be disconnected when the context is closed.\n        gainNode.connect(nativeAudioDestinationNode);\n        return gainNode;\n      };\n    };\n\n    var createNativeAudioWorkletNodeConstructor = function createNativeAudioWorkletNodeConstructor(window) {\n      if (window === null) {\n        return null;\n      }\n      return window.hasOwnProperty('AudioWorkletNode') ? window.AudioWorkletNode : null;\n    };\n\n    var testClonabilityOfAudioWorkletNodeOptions = function testClonabilityOfAudioWorkletNodeOptions(audioWorkletNodeOptions) {\n      var _MessageChannel = new MessageChannel(),\n        port1 = _MessageChannel.port1;\n      try {\n        // This will throw an error if the audioWorkletNodeOptions are not clonable.\n        port1.postMessage(audioWorkletNodeOptions);\n      } finally {\n        port1.close();\n      }\n    };\n\n    function ownKeys$f(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\n    function _objectSpread$f(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$f(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$f(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n    var createNativeAudioWorkletNodeFactory = function createNativeAudioWorkletNodeFactory(createInvalidStateError, createNativeAudioWorkletNodeFaker, createNativeGainNode, createNotSupportedError, monitorConnections) {\n      return function (nativeContext, baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, options) {\n        if (nativeAudioWorkletNodeConstructor !== null) {\n          try {\n            var nativeAudioWorkletNode = new nativeAudioWorkletNodeConstructor(nativeContext, name, options);\n            var patchedEventListeners = new Map();\n            var onprocessorerror = null;\n            Object.defineProperties(nativeAudioWorkletNode, {\n              /*\n               * Bug #61: Overwriting the property accessors for channelCount and channelCountMode is necessary as long as some\n               * browsers have no native implementation to achieve a consistent behavior.\n               */\n              channelCount: {\n                get: function get() {\n                  return options.channelCount;\n                },\n                set: function set() {\n                  throw createInvalidStateError();\n                }\n              },\n              channelCountMode: {\n                get: function get() {\n                  return 'explicit';\n                },\n                set: function set() {\n                  throw createInvalidStateError();\n                }\n              },\n              // Bug #156: Chrome and Edge do not yet fire an ErrorEvent.\n              onprocessorerror: {\n                get: function get() {\n                  return onprocessorerror;\n                },\n                set: function set(value) {\n                  if (typeof onprocessorerror === 'function') {\n                    nativeAudioWorkletNode.removeEventListener('processorerror', onprocessorerror);\n                  }\n                  onprocessorerror = typeof value === 'function' ? value : null;\n                  if (typeof onprocessorerror === 'function') {\n                    nativeAudioWorkletNode.addEventListener('processorerror', onprocessorerror);\n                  }\n                }\n              }\n            });\n            nativeAudioWorkletNode.addEventListener = function (addEventListener) {\n              return function () {\n                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                  args[_key] = arguments[_key];\n                }\n                if (args[0] === 'processorerror') {\n                  var unpatchedEventListener = typeof args[1] === 'function' ? args[1] : _typeof(args[1]) === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function' ? args[1].handleEvent : null;\n                  if (unpatchedEventListener !== null) {\n                    var patchedEventListener = patchedEventListeners.get(args[1]);\n                    if (patchedEventListener !== undefined) {\n                      args[1] = patchedEventListener;\n                    } else {\n                      args[1] = function (event) {\n                        // Bug #178: Chrome and Edge do fire an event of type error.\n                        if (event.type === 'error') {\n                          Object.defineProperties(event, {\n                            type: {\n                              value: 'processorerror'\n                            }\n                          });\n                          unpatchedEventListener(event);\n                        } else {\n                          unpatchedEventListener(new ErrorEvent(args[0], _objectSpread$f({}, event)));\n                        }\n                      };\n                      patchedEventListeners.set(unpatchedEventListener, args[1]);\n                    }\n                  }\n                }\n                // Bug #178: Chrome and Edge do fire an event of type error.\n                addEventListener.call(nativeAudioWorkletNode, 'error', args[1], args[2]);\n                return addEventListener.call.apply(addEventListener, [nativeAudioWorkletNode].concat(args));\n              };\n            }(nativeAudioWorkletNode.addEventListener);\n            nativeAudioWorkletNode.removeEventListener = function (removeEventListener) {\n              return function () {\n                for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n                  args[_key2] = arguments[_key2];\n                }\n                if (args[0] === 'processorerror') {\n                  var patchedEventListener = patchedEventListeners.get(args[1]);\n                  if (patchedEventListener !== undefined) {\n                    patchedEventListeners[\"delete\"](args[1]);\n                    args[1] = patchedEventListener;\n                  }\n                }\n                // Bug #178: Chrome and Edge do fire an event of type error.\n                removeEventListener.call(nativeAudioWorkletNode, 'error', args[1], args[2]);\n                return removeEventListener.call(nativeAudioWorkletNode, args[0], args[1], args[2]);\n              };\n            }(nativeAudioWorkletNode.removeEventListener);\n            /*\n             * Bug #86: Chrome and Edge do not invoke the process() function if the corresponding AudioWorkletNode is unconnected but\n             * has an output.\n             */\n            if (options.numberOfOutputs !== 0) {\n              var nativeGainNode = createNativeGainNode(nativeContext, {\n                channelCount: 1,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'discrete',\n                gain: 0\n              });\n              nativeAudioWorkletNode.connect(nativeGainNode).connect(nativeContext.destination);\n              var whenConnected = function whenConnected() {\n                return nativeGainNode.disconnect();\n              };\n              var whenDisconnected = function whenDisconnected() {\n                return nativeGainNode.connect(nativeContext.destination);\n              };\n              // @todo Disconnect the connection when the process() function of the AudioWorkletNode returns false.\n              return monitorConnections(nativeAudioWorkletNode, whenConnected, whenDisconnected);\n            }\n            return nativeAudioWorkletNode;\n          } catch (err) {\n            // Bug #60: Chrome & Edge throw an InvalidStateError instead of a NotSupportedError.\n            if (err.code === 11) {\n              throw createNotSupportedError();\n            }\n            throw err;\n          }\n        }\n        // Bug #61: Only Chrome & Edge have an implementation of the AudioWorkletNode yet.\n        if (processorConstructor === undefined) {\n          throw createNotSupportedError();\n        }\n        testClonabilityOfAudioWorkletNodeOptions(options);\n        return createNativeAudioWorkletNodeFaker(nativeContext, baseLatency, processorConstructor, options);\n      };\n    };\n\n    var computeBufferSize = function computeBufferSize(baseLatency, sampleRate) {\n      if (baseLatency === null) {\n        return 512;\n      }\n      return Math.max(512, Math.min(16384, Math.pow(2, Math.round(Math.log2(baseLatency * sampleRate)))));\n    };\n\n    var cloneAudioWorkletNodeOptions = function cloneAudioWorkletNodeOptions(audioWorkletNodeOptions) {\n      return new Promise(function (resolve, reject) {\n        var _MessageChannel = new MessageChannel(),\n          port1 = _MessageChannel.port1,\n          port2 = _MessageChannel.port2;\n        port1.onmessage = function (_ref) {\n          var data = _ref.data;\n          port1.close();\n          port2.close();\n          resolve(data);\n        };\n        port1.onmessageerror = function (_ref2) {\n          var data = _ref2.data;\n          port1.close();\n          port2.close();\n          reject(data);\n        };\n        // This will throw an error if the audioWorkletNodeOptions are not clonable.\n        port2.postMessage(audioWorkletNodeOptions);\n      });\n    };\n\n    var createAudioWorkletProcessorPromise = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(processorConstructor, audioWorkletNodeOptions) {\n        var clonedAudioWorkletNodeOptions;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return cloneAudioWorkletNodeOptions(audioWorkletNodeOptions);\n            case 2:\n              clonedAudioWorkletNodeOptions = _context.sent;\n              return _context.abrupt(\"return\", new processorConstructor(clonedAudioWorkletNodeOptions));\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return function createAudioWorkletProcessorPromise(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    var createAudioWorkletProcessor = function createAudioWorkletProcessor(nativeContext, nativeAudioWorkletNode, processorConstructor, audioWorkletNodeOptions) {\n      var nodeToProcessorMap = NODE_TO_PROCESSOR_MAPS.get(nativeContext);\n      if (nodeToProcessorMap === undefined) {\n        nodeToProcessorMap = new WeakMap();\n        NODE_TO_PROCESSOR_MAPS.set(nativeContext, nodeToProcessorMap);\n      }\n      var audioWorkletProcessorPromise = createAudioWorkletProcessorPromise(processorConstructor, audioWorkletNodeOptions);\n      nodeToProcessorMap.set(nativeAudioWorkletNode, audioWorkletProcessorPromise);\n      return audioWorkletProcessorPromise;\n    };\n\n    function ownKeys$e(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\n    function _objectSpread$e(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$e(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$e(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n    function _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\n    function _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\n    function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n    var createNativeAudioWorkletNodeFakerFactory = function createNativeAudioWorkletNodeFakerFactory(connectMultipleOutputs, createIndexSizeError, createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getActiveAudioWorkletNodeInputs, monitorConnections) {\n      return function (nativeContext, baseLatency, processorConstructor, options) {\n        if (options.numberOfInputs === 0 && options.numberOfOutputs === 0) {\n          throw createNotSupportedError();\n        }\n        var outputChannelCount = Array.isArray(options.outputChannelCount) ? options.outputChannelCount : Array.from(options.outputChannelCount);\n        // @todo Check if any of the channelCount values is greater than the implementation's maximum number of channels.\n        if (outputChannelCount.some(function (channelCount) {\n          return channelCount < 1;\n        })) {\n          throw createNotSupportedError();\n        }\n        if (outputChannelCount.length !== options.numberOfOutputs) {\n          throw createIndexSizeError();\n        }\n        // Bug #61: This is not part of the standard but required for the faker to work.\n        if (options.channelCountMode !== 'explicit') {\n          throw createNotSupportedError();\n        }\n        var numberOfInputChannels = options.channelCount * options.numberOfInputs;\n        var numberOfOutputChannels = outputChannelCount.reduce(function (sum, value) {\n          return sum + value;\n        }, 0);\n        var numberOfParameters = processorConstructor.parameterDescriptors === undefined ? 0 : processorConstructor.parameterDescriptors.length;\n        // Bug #61: This is not part of the standard but required for the faker to work.\n        if (numberOfInputChannels + numberOfParameters > 6 || numberOfOutputChannels > 6) {\n          throw createNotSupportedError();\n        }\n        var messageChannel = new MessageChannel();\n        var gainNodes = [];\n        var inputChannelSplitterNodes = [];\n        for (var i = 0; i < options.numberOfInputs; i += 1) {\n          gainNodes.push(createNativeGainNode(nativeContext, {\n            channelCount: options.channelCount,\n            channelCountMode: options.channelCountMode,\n            channelInterpretation: options.channelInterpretation,\n            gain: 1\n          }));\n          inputChannelSplitterNodes.push(createNativeChannelSplitterNode(nativeContext, {\n            channelCount: options.channelCount,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            numberOfOutputs: options.channelCount\n          }));\n        }\n        var constantSourceNodes = [];\n        if (processorConstructor.parameterDescriptors !== undefined) {\n          var _iterator = _createForOfIteratorHelper(processorConstructor.parameterDescriptors),\n            _step;\n          try {\n            var _loop = function _loop() {\n              var _step$value = _step.value,\n                defaultValue = _step$value.defaultValue,\n                maxValue = _step$value.maxValue,\n                minValue = _step$value.minValue,\n                name = _step$value.name;\n              var constantSourceNode = createNativeConstantSourceNode(nativeContext, {\n                channelCount: 1,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'discrete',\n                offset: options.parameterData[name] !== undefined ? options.parameterData[name] : defaultValue === undefined ? 0 : defaultValue\n              });\n              Object.defineProperties(constantSourceNode.offset, {\n                defaultValue: {\n                  get: function get() {\n                    return defaultValue === undefined ? 0 : defaultValue;\n                  }\n                },\n                maxValue: {\n                  get: function get() {\n                    return maxValue === undefined ? MOST_POSITIVE_SINGLE_FLOAT : maxValue;\n                  }\n                },\n                minValue: {\n                  get: function get() {\n                    return minValue === undefined ? MOST_NEGATIVE_SINGLE_FLOAT : minValue;\n                  }\n                }\n              });\n              constantSourceNodes.push(constantSourceNode);\n            };\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              _loop();\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        }\n        var inputChannelMergerNode = createNativeChannelMergerNode(nativeContext, {\n          channelCount: 1,\n          channelCountMode: 'explicit',\n          channelInterpretation: 'speakers',\n          numberOfInputs: Math.max(1, numberOfInputChannels + numberOfParameters)\n        });\n        var bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);\n        var scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, numberOfInputChannels + numberOfParameters,\n        // Bug #87: Only Firefox will fire an AudioProcessingEvent if there is no connected output.\n        Math.max(1, numberOfOutputChannels));\n        var outputChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, {\n          channelCount: Math.max(1, numberOfOutputChannels),\n          channelCountMode: 'explicit',\n          channelInterpretation: 'discrete',\n          numberOfOutputs: Math.max(1, numberOfOutputChannels)\n        });\n        var outputChannelMergerNodes = [];\n        for (var _i = 0; _i < options.numberOfOutputs; _i += 1) {\n          outputChannelMergerNodes.push(createNativeChannelMergerNode(nativeContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'speakers',\n            numberOfInputs: outputChannelCount[_i]\n          }));\n        }\n        for (var _i2 = 0; _i2 < options.numberOfInputs; _i2 += 1) {\n          gainNodes[_i2].connect(inputChannelSplitterNodes[_i2]);\n          for (var j = 0; j < options.channelCount; j += 1) {\n            inputChannelSplitterNodes[_i2].connect(inputChannelMergerNode, j, _i2 * options.channelCount + j);\n          }\n        }\n        var parameterMap = new ReadOnlyMap(processorConstructor.parameterDescriptors === undefined ? [] : processorConstructor.parameterDescriptors.map(function (_ref, index) {\n          var name = _ref.name;\n          var constantSourceNode = constantSourceNodes[index];\n          constantSourceNode.connect(inputChannelMergerNode, 0, numberOfInputChannels + index);\n          constantSourceNode.start(0);\n          return [name, constantSourceNode.offset];\n        }));\n        inputChannelMergerNode.connect(scriptProcessorNode);\n        var channelInterpretation = options.channelInterpretation;\n        var onprocessorerror = null;\n        // Bug #87: Expose at least one output to make this node connectable.\n        var outputAudioNodes = options.numberOfOutputs === 0 ? [scriptProcessorNode] : outputChannelMergerNodes;\n        var nativeAudioWorkletNodeFaker = {\n          get bufferSize() {\n            return bufferSize;\n          },\n          get channelCount() {\n            return options.channelCount;\n          },\n          set channelCount(_) {\n            // Bug #61: This is not part of the standard but required for the faker to work.\n            throw createInvalidStateError();\n          },\n          get channelCountMode() {\n            return options.channelCountMode;\n          },\n          set channelCountMode(_) {\n            // Bug #61: This is not part of the standard but required for the faker to work.\n            throw createInvalidStateError();\n          },\n          get channelInterpretation() {\n            return channelInterpretation;\n          },\n          set channelInterpretation(value) {\n            for (var _i3 = 0, _gainNodes = gainNodes; _i3 < _gainNodes.length; _i3++) {\n              var gainNode = _gainNodes[_i3];\n              gainNode.channelInterpretation = value;\n            }\n            channelInterpretation = value;\n          },\n          get context() {\n            return scriptProcessorNode.context;\n          },\n          get inputs() {\n            return gainNodes;\n          },\n          get numberOfInputs() {\n            return options.numberOfInputs;\n          },\n          get numberOfOutputs() {\n            return options.numberOfOutputs;\n          },\n          get onprocessorerror() {\n            return onprocessorerror;\n          },\n          set onprocessorerror(value) {\n            if (typeof onprocessorerror === 'function') {\n              nativeAudioWorkletNodeFaker.removeEventListener('processorerror', onprocessorerror);\n            }\n            onprocessorerror = typeof value === 'function' ? value : null;\n            if (typeof onprocessorerror === 'function') {\n              nativeAudioWorkletNodeFaker.addEventListener('processorerror', onprocessorerror);\n            }\n          },\n          get parameters() {\n            return parameterMap;\n          },\n          get port() {\n            return messageChannel.port2;\n          },\n          addEventListener: function addEventListener() {\n            return scriptProcessorNode.addEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n          },\n          connect: connectMultipleOutputs.bind(null, outputAudioNodes),\n          disconnect: disconnectMultipleOutputs.bind(null, outputAudioNodes),\n          dispatchEvent: function dispatchEvent() {\n            return scriptProcessorNode.dispatchEvent(arguments.length <= 0 ? undefined : arguments[0]);\n          },\n          removeEventListener: function removeEventListener() {\n            return scriptProcessorNode.removeEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n          }\n        };\n        var patchedEventListeners = new Map();\n        messageChannel.port1.addEventListener = function (addEventListener) {\n          return function () {\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n            if (args[0] === 'message') {\n              var unpatchedEventListener = typeof args[1] === 'function' ? args[1] : _typeof(args[1]) === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function' ? args[1].handleEvent : null;\n              if (unpatchedEventListener !== null) {\n                var patchedEventListener = patchedEventListeners.get(args[1]);\n                if (patchedEventListener !== undefined) {\n                  args[1] = patchedEventListener;\n                } else {\n                  args[1] = function (event) {\n                    exposeCurrentFrameAndCurrentTime(nativeContext.currentTime, nativeContext.sampleRate, function () {\n                      return unpatchedEventListener(event);\n                    });\n                  };\n                  patchedEventListeners.set(unpatchedEventListener, args[1]);\n                }\n              }\n            }\n            return addEventListener.call(messageChannel.port1, args[0], args[1], args[2]);\n          };\n        }(messageChannel.port1.addEventListener);\n        messageChannel.port1.removeEventListener = function (removeEventListener) {\n          return function () {\n            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n              args[_key2] = arguments[_key2];\n            }\n            if (args[0] === 'message') {\n              var patchedEventListener = patchedEventListeners.get(args[1]);\n              if (patchedEventListener !== undefined) {\n                patchedEventListeners[\"delete\"](args[1]);\n                args[1] = patchedEventListener;\n              }\n            }\n            return removeEventListener.call(messageChannel.port1, args[0], args[1], args[2]);\n          };\n        }(messageChannel.port1.removeEventListener);\n        var onmessage = null;\n        Object.defineProperty(messageChannel.port1, 'onmessage', {\n          get: function get() {\n            return onmessage;\n          },\n          set: function set(value) {\n            if (typeof onmessage === 'function') {\n              messageChannel.port1.removeEventListener('message', onmessage);\n            }\n            onmessage = typeof value === 'function' ? value : null;\n            if (typeof onmessage === 'function') {\n              messageChannel.port1.addEventListener('message', onmessage);\n              messageChannel.port1.start();\n            }\n          }\n        });\n        processorConstructor.prototype.port = messageChannel.port1;\n        var audioWorkletProcessor = null;\n        var audioWorkletProcessorPromise = createAudioWorkletProcessor(nativeContext, nativeAudioWorkletNodeFaker, processorConstructor, options);\n        audioWorkletProcessorPromise.then(function (dWrkltPrcssr) {\n          return audioWorkletProcessor = dWrkltPrcssr;\n        });\n        var inputs = createNestedArrays(options.numberOfInputs, options.channelCount);\n        var outputs = createNestedArrays(options.numberOfOutputs, outputChannelCount);\n        var parameters = processorConstructor.parameterDescriptors === undefined ? [] : processorConstructor.parameterDescriptors.reduce(function (prmtrs, _ref2) {\n          var name = _ref2.name;\n          return _objectSpread$e(_objectSpread$e({}, prmtrs), {}, _defineProperty({}, name, new Float32Array(128)));\n        }, {});\n        var isActive = true;\n        var disconnectOutputsGraph = function disconnectOutputsGraph() {\n          if (options.numberOfOutputs > 0) {\n            scriptProcessorNode.disconnect(outputChannelSplitterNode);\n          }\n          for (var _i4 = 0, outputChannelSplitterNodeOutput = 0; _i4 < options.numberOfOutputs; _i4 += 1) {\n            var outputChannelMergerNode = outputChannelMergerNodes[_i4];\n            for (var _j = 0; _j < outputChannelCount[_i4]; _j += 1) {\n              outputChannelSplitterNode.disconnect(outputChannelMergerNode, outputChannelSplitterNodeOutput + _j, _j);\n            }\n            outputChannelSplitterNodeOutput += outputChannelCount[_i4];\n          }\n        };\n        var activeInputIndexes = new Map();\n        // tslint:disable-next-line:deprecation\n        scriptProcessorNode.onaudioprocess = function (_ref3) {\n          var inputBuffer = _ref3.inputBuffer,\n            outputBuffer = _ref3.outputBuffer;\n          if (audioWorkletProcessor !== null) {\n            var activeInputs = getActiveAudioWorkletNodeInputs(nativeAudioWorkletNodeFaker);\n            var _loop2 = function _loop2(_i5) {\n              for (var _j2 = 0; _j2 < options.numberOfInputs; _j2 += 1) {\n                for (var k = 0; k < options.channelCount; k += 1) {\n                  copyFromChannel(inputBuffer, inputs[_j2], k, k, _i5);\n                }\n              }\n              if (processorConstructor.parameterDescriptors !== undefined) {\n                processorConstructor.parameterDescriptors.forEach(function (_ref4, index) {\n                  var name = _ref4.name;\n                  copyFromChannel(inputBuffer, parameters, name, numberOfInputChannels + index, _i5);\n                });\n              }\n              for (var _j3 = 0; _j3 < options.numberOfInputs; _j3 += 1) {\n                for (var _k = 0; _k < outputChannelCount[_j3]; _k += 1) {\n                  // The byteLength will be 0 when the ArrayBuffer was transferred.\n                  if (outputs[_j3][_k].byteLength === 0) {\n                    outputs[_j3][_k] = new Float32Array(128);\n                  }\n                }\n              }\n              try {\n                var potentiallyEmptyInputs = inputs.map(function (input, index) {\n                  var activeInput = activeInputs[index];\n                  if (activeInput.size > 0) {\n                    activeInputIndexes.set(index, bufferSize / 128);\n                    return input;\n                  }\n                  var count = activeInputIndexes.get(index);\n                  if (count === undefined) {\n                    return [];\n                  }\n                  if (input.every(function (channelData) {\n                    return channelData.every(function (sample) {\n                      return sample === 0;\n                    });\n                  })) {\n                    if (count === 1) {\n                      activeInputIndexes[\"delete\"](index);\n                    } else {\n                      activeInputIndexes.set(index, count - 1);\n                    }\n                  }\n                  return input;\n                });\n                var activeSourceFlag = exposeCurrentFrameAndCurrentTime(nativeContext.currentTime + _i5 / nativeContext.sampleRate, nativeContext.sampleRate, function () {\n                  return audioWorkletProcessor.process(potentiallyEmptyInputs, outputs, parameters);\n                });\n                isActive = activeSourceFlag;\n                for (var _j4 = 0, outputChannelSplitterNodeOutput = 0; _j4 < options.numberOfOutputs; _j4 += 1) {\n                  for (var _k2 = 0; _k2 < outputChannelCount[_j4]; _k2 += 1) {\n                    copyToChannel(outputBuffer, outputs[_j4], _k2, outputChannelSplitterNodeOutput + _k2, _i5);\n                  }\n                  outputChannelSplitterNodeOutput += outputChannelCount[_j4];\n                }\n              } catch (error) {\n                isActive = false;\n                nativeAudioWorkletNodeFaker.dispatchEvent(new ErrorEvent('processorerror', {\n                  colno: error.colno,\n                  filename: error.filename,\n                  lineno: error.lineno,\n                  message: error.message\n                }));\n              }\n              if (!isActive) {\n                for (var _j5 = 0; _j5 < options.numberOfInputs; _j5 += 1) {\n                  gainNodes[_j5].disconnect(inputChannelSplitterNodes[_j5]);\n                  for (var _k3 = 0; _k3 < options.channelCount; _k3 += 1) {\n                    inputChannelSplitterNodes[_i5].disconnect(inputChannelMergerNode, _k3, _j5 * options.channelCount + _k3);\n                  }\n                }\n                if (processorConstructor.parameterDescriptors !== undefined) {\n                  var length = processorConstructor.parameterDescriptors.length;\n                  for (var _j6 = 0; _j6 < length; _j6 += 1) {\n                    var constantSourceNode = constantSourceNodes[_j6];\n                    constantSourceNode.disconnect(inputChannelMergerNode, 0, numberOfInputChannels + _j6);\n                    constantSourceNode.stop();\n                  }\n                }\n                inputChannelMergerNode.disconnect(scriptProcessorNode);\n                scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation\n                if (isConnected) {\n                  disconnectOutputsGraph();\n                } else {\n                  disconnectFakeGraph();\n                }\n                return 1; // break\n              }\n            };\n            for (var _i5 = 0; _i5 < bufferSize; _i5 += 128) {\n              if (_loop2(_i5)) break;\n            }\n          }\n        };\n        var isConnected = false;\n        // Bug #87: Only Firefox will fire an AudioProcessingEvent if there is no connected output.\n        var nativeGainNode = createNativeGainNode(nativeContext, {\n          channelCount: 1,\n          channelCountMode: 'explicit',\n          channelInterpretation: 'discrete',\n          gain: 0\n        });\n        var connectFakeGraph = function connectFakeGraph() {\n          return scriptProcessorNode.connect(nativeGainNode).connect(nativeContext.destination);\n        };\n        var disconnectFakeGraph = function disconnectFakeGraph() {\n          scriptProcessorNode.disconnect(nativeGainNode);\n          nativeGainNode.disconnect();\n        };\n        var whenConnected = function whenConnected() {\n          if (isActive) {\n            disconnectFakeGraph();\n            if (options.numberOfOutputs > 0) {\n              scriptProcessorNode.connect(outputChannelSplitterNode);\n            }\n            for (var _i6 = 0, outputChannelSplitterNodeOutput = 0; _i6 < options.numberOfOutputs; _i6 += 1) {\n              var outputChannelMergerNode = outputChannelMergerNodes[_i6];\n              for (var _j7 = 0; _j7 < outputChannelCount[_i6]; _j7 += 1) {\n                outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + _j7, _j7);\n              }\n              outputChannelSplitterNodeOutput += outputChannelCount[_i6];\n            }\n          }\n          isConnected = true;\n        };\n        var whenDisconnected = function whenDisconnected() {\n          if (isActive) {\n            connectFakeGraph();\n            disconnectOutputsGraph();\n          }\n          isConnected = false;\n        };\n        connectFakeGraph();\n        return monitorConnections(nativeAudioWorkletNodeFaker, whenConnected, whenDisconnected);\n      };\n    };\n\n    var createNativeBiquadFilterNode = function createNativeBiquadFilterNode(nativeContext, options) {\n      var nativeBiquadFilterNode = nativeContext.createBiquadFilter();\n      assignNativeAudioNodeOptions(nativeBiquadFilterNode, options);\n      assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'Q');\n      assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'detune');\n      assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'frequency');\n      assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'gain');\n      assignNativeAudioNodeOption(nativeBiquadFilterNode, options, 'type');\n      return nativeBiquadFilterNode;\n    };\n\n    var createNativeChannelMergerNodeFactory = function createNativeChannelMergerNodeFactory(nativeAudioContextConstructor, wrapChannelMergerNode) {\n      return function (nativeContext, options) {\n        var nativeChannelMergerNode = nativeContext.createChannelMerger(options.numberOfInputs);\n        /*\n         * Bug #20: Safari requires a connection of any kind to treat the input signal correctly.\n         * @todo Unfortunately there is no way to test for this behavior in a synchronous fashion which is why testing for the existence of\n         * the webkitAudioContext is used as a workaround here.\n         */\n        if (nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name === 'webkitAudioContext') {\n          wrapChannelMergerNode(nativeContext, nativeChannelMergerNode);\n        }\n        assignNativeAudioNodeOptions(nativeChannelMergerNode, options);\n        return nativeChannelMergerNode;\n      };\n    };\n\n    var wrapChannelSplitterNode = function wrapChannelSplitterNode(channelSplitterNode) {\n      var channelCount = channelSplitterNode.numberOfOutputs;\n      // Bug #97: Safari does not throw an error when attempting to change the channelCount to something other than its initial value.\n      Object.defineProperty(channelSplitterNode, 'channelCount', {\n        get: function get() {\n          return channelCount;\n        },\n        set: function set(value) {\n          if (value !== channelCount) {\n            throw createInvalidStateError();\n          }\n        }\n      });\n      // Bug #30: Safari does not throw an error when attempting to change the channelCountMode to something other than explicit.\n      Object.defineProperty(channelSplitterNode, 'channelCountMode', {\n        get: function get() {\n          return 'explicit';\n        },\n        set: function set(value) {\n          if (value !== 'explicit') {\n            throw createInvalidStateError();\n          }\n        }\n      });\n      // Bug #32: Safari does not throw an error when attempting to change the channelInterpretation to something other than discrete.\n      Object.defineProperty(channelSplitterNode, 'channelInterpretation', {\n        get: function get() {\n          return 'discrete';\n        },\n        set: function set(value) {\n          if (value !== 'discrete') {\n            throw createInvalidStateError();\n          }\n        }\n      });\n    };\n\n    var createNativeChannelSplitterNode = function createNativeChannelSplitterNode(nativeContext, options) {\n      var nativeChannelSplitterNode = nativeContext.createChannelSplitter(options.numberOfOutputs);\n      // Bug #96: Safari does not have the correct channelCount.\n      // Bug #29: Safari does not have the correct channelCountMode.\n      // Bug #31: Safari does not have the correct channelInterpretation.\n      assignNativeAudioNodeOptions(nativeChannelSplitterNode, options);\n      // Bug #29, #30, #31, #32, #96 & #97: Only Chrome, Edge & Firefox partially support the spec yet.\n      wrapChannelSplitterNode(nativeChannelSplitterNode);\n      return nativeChannelSplitterNode;\n    };\n\n    var createNativeConstantSourceNodeFactory = function createNativeConstantSourceNodeFactory(addSilentConnection, cacheTestResult, createNativeConstantSourceNodeFaker, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport) {\n      return function (nativeContext, options) {\n        // Bug #62: Safari does not support ConstantSourceNodes.\n        if (nativeContext.createConstantSource === undefined) {\n          return createNativeConstantSourceNodeFaker(nativeContext, options);\n        }\n        var nativeConstantSourceNode = nativeContext.createConstantSource();\n        assignNativeAudioNodeOptions(nativeConstantSourceNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeConstantSourceNode, options, 'offset');\n        // Bug #44: Safari does not throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, function () {\n          return testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext);\n        })) {\n          wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeConstantSourceNode);\n        }\n        // Bug #44: Only Firefox does not throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, function () {\n          return testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext);\n        })) {\n          wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeConstantSourceNode);\n        }\n        // Bug #175: Safari will not fire an ended event if the ConstantSourceNode is unconnected.\n        addSilentConnection(nativeContext, nativeConstantSourceNode);\n        return nativeConstantSourceNode;\n      };\n    };\n\n    var interceptConnections = function interceptConnections(original, interceptor) {\n      original.connect = interceptor.connect.bind(interceptor);\n      original.disconnect = interceptor.disconnect.bind(interceptor);\n      return original;\n    };\n\n    var _excluded$3 = [\"offset\"];\n    function ownKeys$d(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\n    function _objectSpread$d(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$d(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$d(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n    var createNativeConstantSourceNodeFakerFactory = function createNativeConstantSourceNodeFakerFactory(addSilentConnection, createNativeAudioBufferSourceNode, createNativeGainNode, monitorConnections) {\n      return function (nativeContext, _ref) {\n        var offset = _ref.offset,\n          audioNodeOptions = _objectWithoutProperties(_ref, _excluded$3);\n        var audioBuffer = nativeContext.createBuffer(1, 2, 44100);\n        var audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, {\n          buffer: null,\n          channelCount: 2,\n          channelCountMode: 'max',\n          channelInterpretation: 'speakers',\n          loop: false,\n          loopEnd: 0,\n          loopStart: 0,\n          playbackRate: 1\n        });\n        var gainNode = createNativeGainNode(nativeContext, _objectSpread$d(_objectSpread$d({}, audioNodeOptions), {}, {\n          gain: offset\n        }));\n        // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n        var channelData = audioBuffer.getChannelData(0);\n        // Bug #95: Safari does not play or loop one sample buffers.\n        channelData[0] = 1;\n        channelData[1] = 1;\n        audioBufferSourceNode.buffer = audioBuffer;\n        audioBufferSourceNode.loop = true;\n        var nativeConstantSourceNodeFaker = {\n          get bufferSize() {\n            return undefined;\n          },\n          get channelCount() {\n            return gainNode.channelCount;\n          },\n          set channelCount(value) {\n            gainNode.channelCount = value;\n          },\n          get channelCountMode() {\n            return gainNode.channelCountMode;\n          },\n          set channelCountMode(value) {\n            gainNode.channelCountMode = value;\n          },\n          get channelInterpretation() {\n            return gainNode.channelInterpretation;\n          },\n          set channelInterpretation(value) {\n            gainNode.channelInterpretation = value;\n          },\n          get context() {\n            return gainNode.context;\n          },\n          get inputs() {\n            return [];\n          },\n          get numberOfInputs() {\n            return audioBufferSourceNode.numberOfInputs;\n          },\n          get numberOfOutputs() {\n            return gainNode.numberOfOutputs;\n          },\n          get offset() {\n            return gainNode.gain;\n          },\n          get onended() {\n            return audioBufferSourceNode.onended;\n          },\n          set onended(value) {\n            audioBufferSourceNode.onended = value;\n          },\n          addEventListener: function addEventListener() {\n            return audioBufferSourceNode.addEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n          },\n          dispatchEvent: function dispatchEvent() {\n            return audioBufferSourceNode.dispatchEvent(arguments.length <= 0 ? undefined : arguments[0]);\n          },\n          removeEventListener: function removeEventListener() {\n            return audioBufferSourceNode.removeEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n          },\n          start: function start() {\n            var when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n            audioBufferSourceNode.start.call(audioBufferSourceNode, when);\n          },\n          stop: function stop() {\n            var when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n            audioBufferSourceNode.stop.call(audioBufferSourceNode, when);\n          }\n        };\n        var whenConnected = function whenConnected() {\n          return audioBufferSourceNode.connect(gainNode);\n        };\n        var whenDisconnected = function whenDisconnected() {\n          return audioBufferSourceNode.disconnect(gainNode);\n        };\n        // Bug #175: Safari will not fire an ended event if the AudioBufferSourceNode is unconnected.\n        addSilentConnection(nativeContext, audioBufferSourceNode);\n        return monitorConnections(interceptConnections(nativeConstantSourceNodeFaker, gainNode), whenConnected, whenDisconnected);\n      };\n    };\n\n    var createNativeConvolverNodeFactory = function createNativeConvolverNodeFactory(createNotSupportedError, overwriteAccessors) {\n      return function (nativeContext, options) {\n        var nativeConvolverNode = nativeContext.createConvolver();\n        assignNativeAudioNodeOptions(nativeConvolverNode, options);\n        // The normalize property needs to be set before setting the buffer.\n        if (options.disableNormalization === nativeConvolverNode.normalize) {\n          nativeConvolverNode.normalize = !options.disableNormalization;\n        }\n        assignNativeAudioNodeOption(nativeConvolverNode, options, 'buffer');\n        // Bug #113: Safari does allow to set the channelCount to a value larger than 2.\n        if (options.channelCount > 2) {\n          throw createNotSupportedError();\n        }\n        overwriteAccessors(nativeConvolverNode, 'channelCount', function (get) {\n          return function () {\n            return get.call(nativeConvolverNode);\n          };\n        }, function (set) {\n          return function (value) {\n            if (value > 2) {\n              throw createNotSupportedError();\n            }\n            return set.call(nativeConvolverNode, value);\n          };\n        });\n        // Bug #114: Safari allows to set the channelCountMode to 'max'.\n        if (options.channelCountMode === 'max') {\n          throw createNotSupportedError();\n        }\n        overwriteAccessors(nativeConvolverNode, 'channelCountMode', function (get) {\n          return function () {\n            return get.call(nativeConvolverNode);\n          };\n        }, function (set) {\n          return function (value) {\n            if (value === 'max') {\n              throw createNotSupportedError();\n            }\n            return set.call(nativeConvolverNode, value);\n          };\n        });\n        return nativeConvolverNode;\n      };\n    };\n\n    var createNativeDelayNode = function createNativeDelayNode(nativeContext, options) {\n      var nativeDelayNode = nativeContext.createDelay(options.maxDelayTime);\n      assignNativeAudioNodeOptions(nativeDelayNode, options);\n      assignNativeAudioNodeAudioParamValue(nativeDelayNode, options, 'delayTime');\n      return nativeDelayNode;\n    };\n\n    var createNativeDynamicsCompressorNodeFactory = function createNativeDynamicsCompressorNodeFactory(createNotSupportedError) {\n      return function (nativeContext, options) {\n        var nativeDynamicsCompressorNode = nativeContext.createDynamicsCompressor();\n        assignNativeAudioNodeOptions(nativeDynamicsCompressorNode, options);\n        // Bug #108: Safari allows a channelCount of three and above.\n        if (options.channelCount > 2) {\n          throw createNotSupportedError();\n        }\n        // Bug #109: Only Chrome and Firefox disallow a channelCountMode of 'max'.\n        if (options.channelCountMode === 'max') {\n          throw createNotSupportedError();\n        }\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'attack');\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'knee');\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'ratio');\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'release');\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'threshold');\n        return nativeDynamicsCompressorNode;\n      };\n    };\n\n    var createNativeGainNode = function createNativeGainNode(nativeContext, options) {\n      var nativeGainNode = nativeContext.createGain();\n      assignNativeAudioNodeOptions(nativeGainNode, options);\n      assignNativeAudioNodeAudioParamValue(nativeGainNode, options, 'gain');\n      return nativeGainNode;\n    };\n\n    var createNativeIIRFilterNodeFactory = function createNativeIIRFilterNodeFactory(createNativeIIRFilterNodeFaker) {\n      return function (nativeContext, baseLatency, options) {\n        // Bug #9: Safari does not support IIRFilterNodes.\n        if (nativeContext.createIIRFilter === undefined) {\n          return createNativeIIRFilterNodeFaker(nativeContext, baseLatency, options);\n        }\n        // @todo TypeScript defines the parameters of createIIRFilter() as arrays of numbers.\n        var nativeIIRFilterNode = nativeContext.createIIRFilter(options.feedforward, options.feedback);\n        assignNativeAudioNodeOptions(nativeIIRFilterNode, options);\n        return nativeIIRFilterNode;\n      };\n    };\n\n    function divide(a, b) {\n      var denominator = b[0] * b[0] + b[1] * b[1];\n      return [(a[0] * b[0] + a[1] * b[1]) / denominator, (a[1] * b[0] - a[0] * b[1]) / denominator];\n    }\n    function multiply(a, b) {\n      return [a[0] * b[0] - a[1] * b[1], a[0] * b[1] + a[1] * b[0]];\n    }\n    function evaluatePolynomial(coefficient, z) {\n      var result = [0, 0];\n      for (var i = coefficient.length - 1; i >= 0; i -= 1) {\n        result = multiply(result, z);\n        result[0] += coefficient[i];\n      }\n      return result;\n    }\n    var createNativeIIRFilterNodeFakerFactory = function createNativeIIRFilterNodeFakerFactory(createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError) {\n      return function (nativeContext, baseLatency, _ref) {\n        var channelCount = _ref.channelCount,\n          channelCountMode = _ref.channelCountMode,\n          channelInterpretation = _ref.channelInterpretation,\n          feedback = _ref.feedback,\n          feedforward = _ref.feedforward;\n        var bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);\n        var convertedFeedback = feedback instanceof Float64Array ? feedback : new Float64Array(feedback);\n        var convertedFeedforward = feedforward instanceof Float64Array ? feedforward : new Float64Array(feedforward);\n        var feedbackLength = convertedFeedback.length;\n        var feedforwardLength = convertedFeedforward.length;\n        var minLength = Math.min(feedbackLength, feedforwardLength);\n        if (feedbackLength === 0 || feedbackLength > 20) {\n          throw createNotSupportedError();\n        }\n        if (convertedFeedback[0] === 0) {\n          throw createInvalidStateError();\n        }\n        if (feedforwardLength === 0 || feedforwardLength > 20) {\n          throw createNotSupportedError();\n        }\n        if (convertedFeedforward[0] === 0) {\n          throw createInvalidStateError();\n        }\n        if (convertedFeedback[0] !== 1) {\n          for (var i = 0; i < feedforwardLength; i += 1) {\n            convertedFeedforward[i] /= convertedFeedback[0];\n          }\n          for (var _i = 1; _i < feedbackLength; _i += 1) {\n            convertedFeedback[_i] /= convertedFeedback[0];\n          }\n        }\n        var scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, channelCount, channelCount);\n        scriptProcessorNode.channelCount = channelCount;\n        scriptProcessorNode.channelCountMode = channelCountMode;\n        scriptProcessorNode.channelInterpretation = channelInterpretation;\n        var bufferLength = 32;\n        var bufferIndexes = [];\n        var xBuffers = [];\n        var yBuffers = [];\n        for (var _i2 = 0; _i2 < channelCount; _i2 += 1) {\n          bufferIndexes.push(0);\n          var xBuffer = new Float32Array(bufferLength);\n          var yBuffer = new Float32Array(bufferLength);\n          xBuffer.fill(0);\n          yBuffer.fill(0);\n          xBuffers.push(xBuffer);\n          yBuffers.push(yBuffer);\n        }\n        // tslint:disable-next-line:deprecation\n        scriptProcessorNode.onaudioprocess = function (event) {\n          var inputBuffer = event.inputBuffer;\n          var outputBuffer = event.outputBuffer;\n          var numberOfChannels = inputBuffer.numberOfChannels;\n          for (var _i3 = 0; _i3 < numberOfChannels; _i3 += 1) {\n            var input = inputBuffer.getChannelData(_i3);\n            var output = outputBuffer.getChannelData(_i3);\n            bufferIndexes[_i3] = filterBuffer(convertedFeedback, feedbackLength, convertedFeedforward, feedforwardLength, minLength, xBuffers[_i3], yBuffers[_i3], bufferIndexes[_i3], bufferLength, input, output);\n          }\n        };\n        var nyquist = nativeContext.sampleRate / 2;\n        var nativeIIRFilterNodeFaker = {\n          get bufferSize() {\n            return bufferSize;\n          },\n          get channelCount() {\n            return scriptProcessorNode.channelCount;\n          },\n          set channelCount(value) {\n            scriptProcessorNode.channelCount = value;\n          },\n          get channelCountMode() {\n            return scriptProcessorNode.channelCountMode;\n          },\n          set channelCountMode(value) {\n            scriptProcessorNode.channelCountMode = value;\n          },\n          get channelInterpretation() {\n            return scriptProcessorNode.channelInterpretation;\n          },\n          set channelInterpretation(value) {\n            scriptProcessorNode.channelInterpretation = value;\n          },\n          get context() {\n            return scriptProcessorNode.context;\n          },\n          get inputs() {\n            return [scriptProcessorNode];\n          },\n          get numberOfInputs() {\n            return scriptProcessorNode.numberOfInputs;\n          },\n          get numberOfOutputs() {\n            return scriptProcessorNode.numberOfOutputs;\n          },\n          addEventListener: function addEventListener() {\n            // @todo Dissallow adding an audioprocess listener.\n            return scriptProcessorNode.addEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n          },\n          dispatchEvent: function dispatchEvent() {\n            return scriptProcessorNode.dispatchEvent(arguments.length <= 0 ? undefined : arguments[0]);\n          },\n          getFrequencyResponse: function getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n            if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {\n              throw createInvalidAccessError();\n            }\n            var length = frequencyHz.length;\n            for (var _i4 = 0; _i4 < length; _i4 += 1) {\n              var omega = -Math.PI * (frequencyHz[_i4] / nyquist);\n              var z = [Math.cos(omega), Math.sin(omega)];\n              var numerator = evaluatePolynomial(convertedFeedforward, z);\n              var denominator = evaluatePolynomial(convertedFeedback, z);\n              var response = divide(numerator, denominator);\n              magResponse[_i4] = Math.sqrt(response[0] * response[0] + response[1] * response[1]);\n              phaseResponse[_i4] = Math.atan2(response[1], response[0]);\n            }\n          },\n          removeEventListener: function removeEventListener() {\n            return scriptProcessorNode.removeEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n          }\n        };\n        return interceptConnections(nativeIIRFilterNodeFaker, scriptProcessorNode);\n      };\n    };\n\n    var createNativeMediaElementAudioSourceNode = function createNativeMediaElementAudioSourceNode(nativeAudioContext, options) {\n      return nativeAudioContext.createMediaElementSource(options.mediaElement);\n    };\n\n    var createNativeMediaStreamAudioDestinationNode = function createNativeMediaStreamAudioDestinationNode(nativeAudioContext, options) {\n      var nativeMediaStreamAudioDestinationNode = nativeAudioContext.createMediaStreamDestination();\n      assignNativeAudioNodeOptions(nativeMediaStreamAudioDestinationNode, options);\n      // Bug #174: Safari does expose a wrong numberOfOutputs.\n      if (nativeMediaStreamAudioDestinationNode.numberOfOutputs === 1) {\n        Object.defineProperty(nativeMediaStreamAudioDestinationNode, 'numberOfOutputs', {\n          get: function get() {\n            return 0;\n          }\n        });\n      }\n      return nativeMediaStreamAudioDestinationNode;\n    };\n\n    var createNativeMediaStreamAudioSourceNode = function createNativeMediaStreamAudioSourceNode(nativeAudioContext, _ref) {\n      var mediaStream = _ref.mediaStream;\n      var audioStreamTracks = mediaStream.getAudioTracks();\n      /*\n       * Bug #151: Safari does not use the audio track as input anymore if it gets removed from the mediaStream after construction.\n       * Bug #159: Safari picks the first audio track if the MediaStream has more than one audio track.\n       */\n      audioStreamTracks.sort(function (a, b) {\n        return a.id < b.id ? -1 : a.id > b.id ? 1 : 0;\n      });\n      var filteredAudioStreamTracks = audioStreamTracks.slice(0, 1);\n      var nativeMediaStreamAudioSourceNode = nativeAudioContext.createMediaStreamSource(new MediaStream(filteredAudioStreamTracks));\n      /*\n       * Bug #151 & #159: The given mediaStream gets reconstructed before it gets passed to the native node which is why the accessor needs\n       * to be overwritten as it would otherwise expose the reconstructed version.\n       */\n      Object.defineProperty(nativeMediaStreamAudioSourceNode, 'mediaStream', {\n        value: mediaStream\n      });\n      return nativeMediaStreamAudioSourceNode;\n    };\n\n    var createNativeMediaStreamTrackAudioSourceNodeFactory = function createNativeMediaStreamTrackAudioSourceNodeFactory(createInvalidStateError, isNativeOfflineAudioContext) {\n      return function (nativeAudioContext, _ref) {\n        var mediaStreamTrack = _ref.mediaStreamTrack;\n        // Bug #121: Only Firefox does yet support the MediaStreamTrackAudioSourceNode.\n        if (typeof nativeAudioContext.createMediaStreamTrackSource === 'function') {\n          return nativeAudioContext.createMediaStreamTrackSource(mediaStreamTrack);\n        }\n        var mediaStream = new MediaStream([mediaStreamTrack]);\n        var nativeMediaStreamAudioSourceNode = nativeAudioContext.createMediaStreamSource(mediaStream);\n        // Bug #120: Firefox does not throw an error if the mediaStream has no audio track.\n        if (mediaStreamTrack.kind !== 'audio') {\n          throw createInvalidStateError();\n        }\n        // Bug #172: Safari allows to create a MediaStreamAudioSourceNode with an OfflineAudioContext.\n        if (isNativeOfflineAudioContext(nativeAudioContext)) {\n          throw new TypeError();\n        }\n        return nativeMediaStreamAudioSourceNode;\n      };\n    };\n\n    var createNativeOfflineAudioContextConstructor = function createNativeOfflineAudioContextConstructor(window) {\n      if (window === null) {\n        return null;\n      }\n      if (window.hasOwnProperty('OfflineAudioContext')) {\n        return window.OfflineAudioContext;\n      }\n      return window.hasOwnProperty('webkitOfflineAudioContext') ? window.webkitOfflineAudioContext : null;\n    };\n\n    var createNativeOscillatorNodeFactory = function createNativeOscillatorNodeFactory(addSilentConnection, cacheTestResult, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls) {\n      return function (nativeContext, options) {\n        var nativeOscillatorNode = nativeContext.createOscillator();\n        assignNativeAudioNodeOptions(nativeOscillatorNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeOscillatorNode, options, 'detune');\n        assignNativeAudioNodeAudioParamValue(nativeOscillatorNode, options, 'frequency');\n        if (options.periodicWave !== undefined) {\n          nativeOscillatorNode.setPeriodicWave(options.periodicWave);\n        } else {\n          assignNativeAudioNodeOption(nativeOscillatorNode, options, 'type');\n        }\n        // Bug #44: Only Chrome & Edge throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, function () {\n          return testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext);\n        })) {\n          wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeOscillatorNode);\n        }\n        // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, function () {\n          return testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext);\n        })) {\n          wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeOscillatorNode, nativeContext);\n        }\n        // Bug #44: Only Firefox does not throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, function () {\n          return testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext);\n        })) {\n          wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeOscillatorNode);\n        }\n        // Bug #175: Safari will not fire an ended event if the OscillatorNode is unconnected.\n        addSilentConnection(nativeContext, nativeOscillatorNode);\n        return nativeOscillatorNode;\n      };\n    };\n\n    var createNativePannerNodeFactory = function createNativePannerNodeFactory(createNativePannerNodeFaker) {\n      return function (nativeContext, options) {\n        var nativePannerNode = nativeContext.createPanner();\n        // Bug #124: Safari does not support modifying the orientation and the position with AudioParams.\n        if (nativePannerNode.orientationX === undefined) {\n          return createNativePannerNodeFaker(nativeContext, options);\n        }\n        assignNativeAudioNodeOptions(nativePannerNode, options);\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'orientationX');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'orientationY');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'orientationZ');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'positionX');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'positionY');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'positionZ');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'coneInnerAngle');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'coneOuterAngle');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'coneOuterGain');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'distanceModel');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'maxDistance');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'panningModel');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'refDistance');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'rolloffFactor');\n        return nativePannerNode;\n      };\n    };\n\n    var _excluded$2 = [\"coneInnerAngle\", \"coneOuterAngle\", \"coneOuterGain\", \"distanceModel\", \"maxDistance\", \"orientationX\", \"orientationY\", \"orientationZ\", \"panningModel\", \"positionX\", \"positionY\", \"positionZ\", \"refDistance\", \"rolloffFactor\"];\n    function ownKeys$c(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\n    function _objectSpread$c(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$c(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$c(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n    var createNativePannerNodeFakerFactory = function createNativePannerNodeFakerFactory(connectNativeAudioNodeToNativeAudioNode, createInvalidStateError, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError, disconnectNativeAudioNodeFromNativeAudioNode, getFirstSample, monitorConnections) {\n      return function (nativeContext, _ref) {\n        var coneInnerAngle = _ref.coneInnerAngle,\n          coneOuterAngle = _ref.coneOuterAngle,\n          coneOuterGain = _ref.coneOuterGain,\n          distanceModel = _ref.distanceModel,\n          maxDistance = _ref.maxDistance,\n          orientationX = _ref.orientationX,\n          orientationY = _ref.orientationY,\n          orientationZ = _ref.orientationZ,\n          panningModel = _ref.panningModel,\n          positionX = _ref.positionX,\n          positionY = _ref.positionY,\n          positionZ = _ref.positionZ,\n          refDistance = _ref.refDistance,\n          rolloffFactor = _ref.rolloffFactor,\n          audioNodeOptions = _objectWithoutProperties(_ref, _excluded$2);\n        var pannerNode = nativeContext.createPanner();\n        // Bug #125: Safari does not throw an error yet.\n        if (audioNodeOptions.channelCount > 2) {\n          throw createNotSupportedError();\n        }\n        // Bug #126: Safari does not throw an error yet.\n        if (audioNodeOptions.channelCountMode === 'max') {\n          throw createNotSupportedError();\n        }\n        assignNativeAudioNodeOptions(pannerNode, audioNodeOptions);\n        var SINGLE_CHANNEL_OPTIONS = {\n          channelCount: 1,\n          channelCountMode: 'explicit',\n          channelInterpretation: 'discrete'\n        };\n        var channelMergerNode = createNativeChannelMergerNode(nativeContext, _objectSpread$c(_objectSpread$c({}, SINGLE_CHANNEL_OPTIONS), {}, {\n          channelInterpretation: 'speakers',\n          numberOfInputs: 6\n        }));\n        var inputGainNode = createNativeGainNode(nativeContext, _objectSpread$c(_objectSpread$c({}, audioNodeOptions), {}, {\n          gain: 1\n        }));\n        var orientationXGainNode = createNativeGainNode(nativeContext, _objectSpread$c(_objectSpread$c({}, SINGLE_CHANNEL_OPTIONS), {}, {\n          gain: 1\n        }));\n        var orientationYGainNode = createNativeGainNode(nativeContext, _objectSpread$c(_objectSpread$c({}, SINGLE_CHANNEL_OPTIONS), {}, {\n          gain: 0\n        }));\n        var orientationZGainNode = createNativeGainNode(nativeContext, _objectSpread$c(_objectSpread$c({}, SINGLE_CHANNEL_OPTIONS), {}, {\n          gain: 0\n        }));\n        var positionXGainNode = createNativeGainNode(nativeContext, _objectSpread$c(_objectSpread$c({}, SINGLE_CHANNEL_OPTIONS), {}, {\n          gain: 0\n        }));\n        var positionYGainNode = createNativeGainNode(nativeContext, _objectSpread$c(_objectSpread$c({}, SINGLE_CHANNEL_OPTIONS), {}, {\n          gain: 0\n        }));\n        var positionZGainNode = createNativeGainNode(nativeContext, _objectSpread$c(_objectSpread$c({}, SINGLE_CHANNEL_OPTIONS), {}, {\n          gain: 0\n        }));\n        var scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 6, 1);\n        var waveShaperNode = createNativeWaveShaperNode(nativeContext, _objectSpread$c(_objectSpread$c({}, SINGLE_CHANNEL_OPTIONS), {}, {\n          curve: new Float32Array([1, 1]),\n          oversample: 'none'\n        }));\n        var lastOrientation = [orientationX, orientationY, orientationZ];\n        var lastPosition = [positionX, positionY, positionZ];\n        var buffer = new Float32Array(1);\n        // tslint:disable-next-line:deprecation\n        scriptProcessorNode.onaudioprocess = function (_ref2) {\n          var inputBuffer = _ref2.inputBuffer;\n          var orientation = [getFirstSample(inputBuffer, buffer, 0), getFirstSample(inputBuffer, buffer, 1), getFirstSample(inputBuffer, buffer, 2)];\n          if (orientation.some(function (value, index) {\n            return value !== lastOrientation[index];\n          })) {\n            pannerNode.setOrientation.apply(pannerNode, orientation); // tslint:disable-line:deprecation\n            lastOrientation = orientation;\n          }\n          var positon = [getFirstSample(inputBuffer, buffer, 3), getFirstSample(inputBuffer, buffer, 4), getFirstSample(inputBuffer, buffer, 5)];\n          if (positon.some(function (value, index) {\n            return value !== lastPosition[index];\n          })) {\n            pannerNode.setPosition.apply(pannerNode, positon); // tslint:disable-line:deprecation\n            lastPosition = positon;\n          }\n        };\n        Object.defineProperty(orientationYGainNode.gain, 'defaultValue', {\n          get: function get() {\n            return 0;\n          }\n        });\n        Object.defineProperty(orientationZGainNode.gain, 'defaultValue', {\n          get: function get() {\n            return 0;\n          }\n        });\n        Object.defineProperty(positionXGainNode.gain, 'defaultValue', {\n          get: function get() {\n            return 0;\n          }\n        });\n        Object.defineProperty(positionYGainNode.gain, 'defaultValue', {\n          get: function get() {\n            return 0;\n          }\n        });\n        Object.defineProperty(positionZGainNode.gain, 'defaultValue', {\n          get: function get() {\n            return 0;\n          }\n        });\n        var nativePannerNodeFaker = {\n          get bufferSize() {\n            return undefined;\n          },\n          get channelCount() {\n            return pannerNode.channelCount;\n          },\n          set channelCount(value) {\n            // Bug #125: Safari does not throw an error yet.\n            if (value > 2) {\n              throw createNotSupportedError();\n            }\n            inputGainNode.channelCount = value;\n            pannerNode.channelCount = value;\n          },\n          get channelCountMode() {\n            return pannerNode.channelCountMode;\n          },\n          set channelCountMode(value) {\n            // Bug #126: Safari does not throw an error yet.\n            if (value === 'max') {\n              throw createNotSupportedError();\n            }\n            inputGainNode.channelCountMode = value;\n            pannerNode.channelCountMode = value;\n          },\n          get channelInterpretation() {\n            return pannerNode.channelInterpretation;\n          },\n          set channelInterpretation(value) {\n            inputGainNode.channelInterpretation = value;\n            pannerNode.channelInterpretation = value;\n          },\n          get coneInnerAngle() {\n            return pannerNode.coneInnerAngle;\n          },\n          set coneInnerAngle(value) {\n            pannerNode.coneInnerAngle = value;\n          },\n          get coneOuterAngle() {\n            return pannerNode.coneOuterAngle;\n          },\n          set coneOuterAngle(value) {\n            pannerNode.coneOuterAngle = value;\n          },\n          get coneOuterGain() {\n            return pannerNode.coneOuterGain;\n          },\n          set coneOuterGain(value) {\n            // Bug #127: Safari does not throw an InvalidStateError yet.\n            if (value < 0 || value > 1) {\n              throw createInvalidStateError();\n            }\n            pannerNode.coneOuterGain = value;\n          },\n          get context() {\n            return pannerNode.context;\n          },\n          get distanceModel() {\n            return pannerNode.distanceModel;\n          },\n          set distanceModel(value) {\n            pannerNode.distanceModel = value;\n          },\n          get inputs() {\n            return [inputGainNode];\n          },\n          get maxDistance() {\n            return pannerNode.maxDistance;\n          },\n          set maxDistance(value) {\n            // Bug #128: Safari does not throw an error yet.\n            if (value < 0) {\n              throw new RangeError();\n            }\n            pannerNode.maxDistance = value;\n          },\n          get numberOfInputs() {\n            return pannerNode.numberOfInputs;\n          },\n          get numberOfOutputs() {\n            return pannerNode.numberOfOutputs;\n          },\n          get orientationX() {\n            return orientationXGainNode.gain;\n          },\n          get orientationY() {\n            return orientationYGainNode.gain;\n          },\n          get orientationZ() {\n            return orientationZGainNode.gain;\n          },\n          get panningModel() {\n            return pannerNode.panningModel;\n          },\n          set panningModel(value) {\n            pannerNode.panningModel = value;\n          },\n          get positionX() {\n            return positionXGainNode.gain;\n          },\n          get positionY() {\n            return positionYGainNode.gain;\n          },\n          get positionZ() {\n            return positionZGainNode.gain;\n          },\n          get refDistance() {\n            return pannerNode.refDistance;\n          },\n          set refDistance(value) {\n            // Bug #129: Safari does not throw an error yet.\n            if (value < 0) {\n              throw new RangeError();\n            }\n            pannerNode.refDistance = value;\n          },\n          get rolloffFactor() {\n            return pannerNode.rolloffFactor;\n          },\n          set rolloffFactor(value) {\n            // Bug #130: Safari does not throw an error yet.\n            if (value < 0) {\n              throw new RangeError();\n            }\n            pannerNode.rolloffFactor = value;\n          },\n          addEventListener: function addEventListener() {\n            return inputGainNode.addEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n          },\n          dispatchEvent: function dispatchEvent() {\n            return inputGainNode.dispatchEvent(arguments.length <= 0 ? undefined : arguments[0]);\n          },\n          removeEventListener: function removeEventListener() {\n            return inputGainNode.removeEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n          }\n        };\n        if (coneInnerAngle !== nativePannerNodeFaker.coneInnerAngle) {\n          nativePannerNodeFaker.coneInnerAngle = coneInnerAngle;\n        }\n        if (coneOuterAngle !== nativePannerNodeFaker.coneOuterAngle) {\n          nativePannerNodeFaker.coneOuterAngle = coneOuterAngle;\n        }\n        if (coneOuterGain !== nativePannerNodeFaker.coneOuterGain) {\n          nativePannerNodeFaker.coneOuterGain = coneOuterGain;\n        }\n        if (distanceModel !== nativePannerNodeFaker.distanceModel) {\n          nativePannerNodeFaker.distanceModel = distanceModel;\n        }\n        if (maxDistance !== nativePannerNodeFaker.maxDistance) {\n          nativePannerNodeFaker.maxDistance = maxDistance;\n        }\n        if (orientationX !== nativePannerNodeFaker.orientationX.value) {\n          nativePannerNodeFaker.orientationX.value = orientationX;\n        }\n        if (orientationY !== nativePannerNodeFaker.orientationY.value) {\n          nativePannerNodeFaker.orientationY.value = orientationY;\n        }\n        if (orientationZ !== nativePannerNodeFaker.orientationZ.value) {\n          nativePannerNodeFaker.orientationZ.value = orientationZ;\n        }\n        if (panningModel !== nativePannerNodeFaker.panningModel) {\n          nativePannerNodeFaker.panningModel = panningModel;\n        }\n        if (positionX !== nativePannerNodeFaker.positionX.value) {\n          nativePannerNodeFaker.positionX.value = positionX;\n        }\n        if (positionY !== nativePannerNodeFaker.positionY.value) {\n          nativePannerNodeFaker.positionY.value = positionY;\n        }\n        if (positionZ !== nativePannerNodeFaker.positionZ.value) {\n          nativePannerNodeFaker.positionZ.value = positionZ;\n        }\n        if (refDistance !== nativePannerNodeFaker.refDistance) {\n          nativePannerNodeFaker.refDistance = refDistance;\n        }\n        if (rolloffFactor !== nativePannerNodeFaker.rolloffFactor) {\n          nativePannerNodeFaker.rolloffFactor = rolloffFactor;\n        }\n        if (lastOrientation[0] !== 1 || lastOrientation[1] !== 0 || lastOrientation[2] !== 0) {\n          pannerNode.setOrientation.apply(pannerNode, _toConsumableArray(lastOrientation)); // tslint:disable-line:deprecation\n        }\n        if (lastPosition[0] !== 0 || lastPosition[1] !== 0 || lastPosition[2] !== 0) {\n          pannerNode.setPosition.apply(pannerNode, _toConsumableArray(lastPosition)); // tslint:disable-line:deprecation\n        }\n        var whenConnected = function whenConnected() {\n          inputGainNode.connect(pannerNode);\n          // Bug #119: Safari does not fully support the WaveShaperNode.\n          connectNativeAudioNodeToNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);\n          waveShaperNode.connect(orientationXGainNode).connect(channelMergerNode, 0, 0);\n          waveShaperNode.connect(orientationYGainNode).connect(channelMergerNode, 0, 1);\n          waveShaperNode.connect(orientationZGainNode).connect(channelMergerNode, 0, 2);\n          waveShaperNode.connect(positionXGainNode).connect(channelMergerNode, 0, 3);\n          waveShaperNode.connect(positionYGainNode).connect(channelMergerNode, 0, 4);\n          waveShaperNode.connect(positionZGainNode).connect(channelMergerNode, 0, 5);\n          channelMergerNode.connect(scriptProcessorNode).connect(nativeContext.destination);\n        };\n        var whenDisconnected = function whenDisconnected() {\n          inputGainNode.disconnect(pannerNode);\n          // Bug #119: Safari does not fully support the WaveShaperNode.\n          disconnectNativeAudioNodeFromNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);\n          waveShaperNode.disconnect(orientationXGainNode);\n          orientationXGainNode.disconnect(channelMergerNode);\n          waveShaperNode.disconnect(orientationYGainNode);\n          orientationYGainNode.disconnect(channelMergerNode);\n          waveShaperNode.disconnect(orientationZGainNode);\n          orientationZGainNode.disconnect(channelMergerNode);\n          waveShaperNode.disconnect(positionXGainNode);\n          positionXGainNode.disconnect(channelMergerNode);\n          waveShaperNode.disconnect(positionYGainNode);\n          positionYGainNode.disconnect(channelMergerNode);\n          waveShaperNode.disconnect(positionZGainNode);\n          positionZGainNode.disconnect(channelMergerNode);\n          channelMergerNode.disconnect(scriptProcessorNode);\n          scriptProcessorNode.disconnect(nativeContext.destination);\n        };\n        return monitorConnections(interceptConnections(nativePannerNodeFaker, pannerNode), whenConnected, whenDisconnected);\n      };\n    };\n\n    var createNativePeriodicWaveFactory = function createNativePeriodicWaveFactory(createIndexSizeError) {\n      return function (nativeContext, _ref) {\n        var disableNormalization = _ref.disableNormalization,\n          imag = _ref.imag,\n          real = _ref.real;\n        // Bug #180: Safari does not allow to use ordinary arrays.\n        var convertedImag = imag instanceof Float32Array ? imag : new Float32Array(imag);\n        var convertedReal = real instanceof Float32Array ? real : new Float32Array(real);\n        var nativePeriodicWave = nativeContext.createPeriodicWave(convertedReal, convertedImag, {\n          disableNormalization: disableNormalization\n        });\n        // Bug #181: Safari does not throw an IndexSizeError so far if the given arrays have less than two values.\n        if (Array.from(imag).length < 2) {\n          throw createIndexSizeError();\n        }\n        return nativePeriodicWave;\n      };\n    };\n\n    var createNativeScriptProcessorNode = function createNativeScriptProcessorNode(nativeContext, bufferSize, numberOfInputChannels, numberOfOutputChannels) {\n      return nativeContext.createScriptProcessor(bufferSize, numberOfInputChannels, numberOfOutputChannels); // tslint:disable-line deprecation\n    };\n\n    var createNativeStereoPannerNodeFactory = function createNativeStereoPannerNodeFactory(createNativeStereoPannerNodeFaker, createNotSupportedError) {\n      return function (nativeContext, options) {\n        var channelCountMode = options.channelCountMode;\n        /*\n         * Bug #105: The channelCountMode of 'clamped-max' should be supported. However it is not possible to write a polyfill for Safari\n         * which supports it and therefore it can't be supported at all.\n         */\n        if (channelCountMode === 'clamped-max') {\n          throw createNotSupportedError();\n        }\n        // Bug #105: Safari does not support the StereoPannerNode.\n        if (nativeContext.createStereoPanner === undefined) {\n          return createNativeStereoPannerNodeFaker(nativeContext, options);\n        }\n        var nativeStereoPannerNode = nativeContext.createStereoPanner();\n        assignNativeAudioNodeOptions(nativeStereoPannerNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeStereoPannerNode, options, 'pan');\n        /*\n         * Bug #105: The channelCountMode of 'clamped-max' should be supported. However it is not possible to write a polyfill for Safari\n         * which supports it and therefore it can't be supported at all.\n         */\n        Object.defineProperty(nativeStereoPannerNode, 'channelCountMode', {\n          get: function get() {\n            return channelCountMode;\n          },\n          set: function set(value) {\n            if (value !== channelCountMode) {\n              throw createNotSupportedError();\n            }\n          }\n        });\n        return nativeStereoPannerNode;\n      };\n    };\n\n    var _excluded$1 = [\"channelCount\", \"channelCountMode\", \"pan\"];\n    function ownKeys$b(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\n    function _objectSpread$b(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$b(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$b(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n    var createNativeStereoPannerNodeFakerFactory = function createNativeStereoPannerNodeFakerFactory(createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError, monitorConnections) {\n      // The curve has a size of 14bit plus 1 value to have an exact representation for zero. This value has been determined experimentally.\n      var CURVE_SIZE = 16385;\n      var DC_CURVE = new Float32Array([1, 1]);\n      var HALF_PI = Math.PI / 2;\n      var SINGLE_CHANNEL_OPTIONS = {\n        channelCount: 1,\n        channelCountMode: 'explicit',\n        channelInterpretation: 'discrete'\n      };\n      var SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS = _objectSpread$b(_objectSpread$b({}, SINGLE_CHANNEL_OPTIONS), {}, {\n        oversample: 'none'\n      });\n      var buildInternalGraphForMono = function buildInternalGraphForMono(nativeContext, inputGainNode, panGainNode, channelMergerNode) {\n        var leftWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        var rightWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        for (var i = 0; i < CURVE_SIZE; i += 1) {\n          var x = i / (CURVE_SIZE - 1) * HALF_PI;\n          leftWaveShaperCurve[i] = Math.cos(x);\n          rightWaveShaperCurve[i] = Math.sin(x);\n        }\n        var leftGainNode = createNativeGainNode(nativeContext, _objectSpread$b(_objectSpread$b({}, SINGLE_CHANNEL_OPTIONS), {}, {\n          gain: 0\n        }));\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        var leftWaveShaperNode = createNativeWaveShaperNode(nativeContext, _objectSpread$b(_objectSpread$b({}, SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS), {}, {\n          curve: leftWaveShaperCurve\n        }));\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        var panWaveShaperNode = createNativeWaveShaperNode(nativeContext, _objectSpread$b(_objectSpread$b({}, SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS), {}, {\n          curve: DC_CURVE\n        }));\n        var rightGainNode = createNativeGainNode(nativeContext, _objectSpread$b(_objectSpread$b({}, SINGLE_CHANNEL_OPTIONS), {}, {\n          gain: 0\n        }));\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        var rightWaveShaperNode = createNativeWaveShaperNode(nativeContext, _objectSpread$b(_objectSpread$b({}, SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS), {}, {\n          curve: rightWaveShaperCurve\n        }));\n        return {\n          connectGraph: function connectGraph() {\n            inputGainNode.connect(leftGainNode);\n            inputGainNode.connect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);\n            inputGainNode.connect(rightGainNode);\n            panWaveShaperNode.connect(panGainNode);\n            panGainNode.connect(leftWaveShaperNode.inputs === undefined ? leftWaveShaperNode : leftWaveShaperNode.inputs[0]);\n            panGainNode.connect(rightWaveShaperNode.inputs === undefined ? rightWaveShaperNode : rightWaveShaperNode.inputs[0]);\n            leftWaveShaperNode.connect(leftGainNode.gain);\n            rightWaveShaperNode.connect(rightGainNode.gain);\n            leftGainNode.connect(channelMergerNode, 0, 0);\n            rightGainNode.connect(channelMergerNode, 0, 1);\n          },\n          disconnectGraph: function disconnectGraph() {\n            inputGainNode.disconnect(leftGainNode);\n            inputGainNode.disconnect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);\n            inputGainNode.disconnect(rightGainNode);\n            panWaveShaperNode.disconnect(panGainNode);\n            panGainNode.disconnect(leftWaveShaperNode.inputs === undefined ? leftWaveShaperNode : leftWaveShaperNode.inputs[0]);\n            panGainNode.disconnect(rightWaveShaperNode.inputs === undefined ? rightWaveShaperNode : rightWaveShaperNode.inputs[0]);\n            leftWaveShaperNode.disconnect(leftGainNode.gain);\n            rightWaveShaperNode.disconnect(rightGainNode.gain);\n            leftGainNode.disconnect(channelMergerNode, 0, 0);\n            rightGainNode.disconnect(channelMergerNode, 0, 1);\n          }\n        };\n      };\n      var buildInternalGraphForStereo = function buildInternalGraphForStereo(nativeContext, inputGainNode, panGainNode, channelMergerNode) {\n        var leftInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        var leftInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        var rightInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        var rightInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        var centerIndex = Math.floor(CURVE_SIZE / 2);\n        for (var i = 0; i < CURVE_SIZE; i += 1) {\n          if (i > centerIndex) {\n            var x = (i - centerIndex) / (CURVE_SIZE - 1 - centerIndex) * HALF_PI;\n            leftInputForLeftOutputWaveShaperCurve[i] = Math.cos(x);\n            leftInputForRightOutputWaveShaperCurve[i] = Math.sin(x);\n            rightInputForLeftOutputWaveShaperCurve[i] = 0;\n            rightInputForRightOutputWaveShaperCurve[i] = 1;\n          } else {\n            var _x = i / (CURVE_SIZE - 1 - centerIndex) * HALF_PI;\n            leftInputForLeftOutputWaveShaperCurve[i] = 1;\n            leftInputForRightOutputWaveShaperCurve[i] = 0;\n            rightInputForLeftOutputWaveShaperCurve[i] = Math.cos(_x);\n            rightInputForRightOutputWaveShaperCurve[i] = Math.sin(_x);\n          }\n        }\n        var channelSplitterNode = createNativeChannelSplitterNode(nativeContext, {\n          channelCount: 2,\n          channelCountMode: 'explicit',\n          channelInterpretation: 'discrete',\n          numberOfOutputs: 2\n        });\n        var leftInputForLeftOutputGainNode = createNativeGainNode(nativeContext, _objectSpread$b(_objectSpread$b({}, SINGLE_CHANNEL_OPTIONS), {}, {\n          gain: 0\n        }));\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        var leftInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, _objectSpread$b(_objectSpread$b({}, SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS), {}, {\n          curve: leftInputForLeftOutputWaveShaperCurve\n        }));\n        var leftInputForRightOutputGainNode = createNativeGainNode(nativeContext, _objectSpread$b(_objectSpread$b({}, SINGLE_CHANNEL_OPTIONS), {}, {\n          gain: 0\n        }));\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        var leftInputForRightOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, _objectSpread$b(_objectSpread$b({}, SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS), {}, {\n          curve: leftInputForRightOutputWaveShaperCurve\n        }));\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        var panWaveShaperNode = createNativeWaveShaperNode(nativeContext, _objectSpread$b(_objectSpread$b({}, SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS), {}, {\n          curve: DC_CURVE\n        }));\n        var rightInputForLeftOutputGainNode = createNativeGainNode(nativeContext, _objectSpread$b(_objectSpread$b({}, SINGLE_CHANNEL_OPTIONS), {}, {\n          gain: 0\n        }));\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        var rightInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, _objectSpread$b(_objectSpread$b({}, SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS), {}, {\n          curve: rightInputForLeftOutputWaveShaperCurve\n        }));\n        var rightInputForRightOutputGainNode = createNativeGainNode(nativeContext, _objectSpread$b(_objectSpread$b({}, SINGLE_CHANNEL_OPTIONS), {}, {\n          gain: 0\n        }));\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        var rightInputForRightOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, _objectSpread$b(_objectSpread$b({}, SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS), {}, {\n          curve: rightInputForRightOutputWaveShaperCurve\n        }));\n        return {\n          connectGraph: function connectGraph() {\n            inputGainNode.connect(channelSplitterNode);\n            inputGainNode.connect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);\n            channelSplitterNode.connect(leftInputForLeftOutputGainNode, 0);\n            channelSplitterNode.connect(leftInputForRightOutputGainNode, 0);\n            channelSplitterNode.connect(rightInputForLeftOutputGainNode, 1);\n            channelSplitterNode.connect(rightInputForRightOutputGainNode, 1);\n            panWaveShaperNode.connect(panGainNode);\n            panGainNode.connect(leftInputForLeftOutputWaveShaperNode.inputs === undefined ? leftInputForLeftOutputWaveShaperNode : leftInputForLeftOutputWaveShaperNode.inputs[0]);\n            panGainNode.connect(leftInputForRightOutputWaveShaperNode.inputs === undefined ? leftInputForRightOutputWaveShaperNode : leftInputForRightOutputWaveShaperNode.inputs[0]);\n            panGainNode.connect(rightInputForLeftOutputWaveShaperNode.inputs === undefined ? rightInputForLeftOutputWaveShaperNode : rightInputForLeftOutputWaveShaperNode.inputs[0]);\n            panGainNode.connect(rightInputForRightOutputWaveShaperNode.inputs === undefined ? rightInputForRightOutputWaveShaperNode : rightInputForRightOutputWaveShaperNode.inputs[0]);\n            leftInputForLeftOutputWaveShaperNode.connect(leftInputForLeftOutputGainNode.gain);\n            leftInputForRightOutputWaveShaperNode.connect(leftInputForRightOutputGainNode.gain);\n            rightInputForLeftOutputWaveShaperNode.connect(rightInputForLeftOutputGainNode.gain);\n            rightInputForRightOutputWaveShaperNode.connect(rightInputForRightOutputGainNode.gain);\n            leftInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);\n            rightInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);\n            leftInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);\n            rightInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);\n          },\n          disconnectGraph: function disconnectGraph() {\n            inputGainNode.disconnect(channelSplitterNode);\n            inputGainNode.disconnect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);\n            channelSplitterNode.disconnect(leftInputForLeftOutputGainNode, 0);\n            channelSplitterNode.disconnect(leftInputForRightOutputGainNode, 0);\n            channelSplitterNode.disconnect(rightInputForLeftOutputGainNode, 1);\n            channelSplitterNode.disconnect(rightInputForRightOutputGainNode, 1);\n            panWaveShaperNode.disconnect(panGainNode);\n            panGainNode.disconnect(leftInputForLeftOutputWaveShaperNode.inputs === undefined ? leftInputForLeftOutputWaveShaperNode : leftInputForLeftOutputWaveShaperNode.inputs[0]);\n            panGainNode.disconnect(leftInputForRightOutputWaveShaperNode.inputs === undefined ? leftInputForRightOutputWaveShaperNode : leftInputForRightOutputWaveShaperNode.inputs[0]);\n            panGainNode.disconnect(rightInputForLeftOutputWaveShaperNode.inputs === undefined ? rightInputForLeftOutputWaveShaperNode : rightInputForLeftOutputWaveShaperNode.inputs[0]);\n            panGainNode.disconnect(rightInputForRightOutputWaveShaperNode.inputs === undefined ? rightInputForRightOutputWaveShaperNode : rightInputForRightOutputWaveShaperNode.inputs[0]);\n            leftInputForLeftOutputWaveShaperNode.disconnect(leftInputForLeftOutputGainNode.gain);\n            leftInputForRightOutputWaveShaperNode.disconnect(leftInputForRightOutputGainNode.gain);\n            rightInputForLeftOutputWaveShaperNode.disconnect(rightInputForLeftOutputGainNode.gain);\n            rightInputForRightOutputWaveShaperNode.disconnect(rightInputForRightOutputGainNode.gain);\n            leftInputForLeftOutputGainNode.disconnect(channelMergerNode, 0, 0);\n            rightInputForLeftOutputGainNode.disconnect(channelMergerNode, 0, 0);\n            leftInputForRightOutputGainNode.disconnect(channelMergerNode, 0, 1);\n            rightInputForRightOutputGainNode.disconnect(channelMergerNode, 0, 1);\n          }\n        };\n      };\n      var buildInternalGraph = function buildInternalGraph(nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode) {\n        if (channelCount === 1) {\n          return buildInternalGraphForMono(nativeContext, inputGainNode, panGainNode, channelMergerNode);\n        }\n        if (channelCount === 2) {\n          return buildInternalGraphForStereo(nativeContext, inputGainNode, panGainNode, channelMergerNode);\n        }\n        throw createNotSupportedError();\n      };\n      return function (nativeContext, _ref) {\n        var channelCount = _ref.channelCount,\n          channelCountMode = _ref.channelCountMode,\n          pan = _ref.pan,\n          audioNodeOptions = _objectWithoutProperties(_ref, _excluded$1);\n        if (channelCountMode === 'max') {\n          throw createNotSupportedError();\n        }\n        var channelMergerNode = createNativeChannelMergerNode(nativeContext, _objectSpread$b(_objectSpread$b({}, audioNodeOptions), {}, {\n          channelCount: 1,\n          channelCountMode: channelCountMode,\n          numberOfInputs: 2\n        }));\n        var inputGainNode = createNativeGainNode(nativeContext, _objectSpread$b(_objectSpread$b({}, audioNodeOptions), {}, {\n          channelCount: channelCount,\n          channelCountMode: channelCountMode,\n          gain: 1\n        }));\n        var panGainNode = createNativeGainNode(nativeContext, {\n          channelCount: 1,\n          channelCountMode: 'explicit',\n          channelInterpretation: 'discrete',\n          gain: pan\n        });\n        var _buildInternalGraph = buildInternalGraph(nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode),\n          connectGraph = _buildInternalGraph.connectGraph,\n          disconnectGraph = _buildInternalGraph.disconnectGraph;\n        Object.defineProperty(panGainNode.gain, 'defaultValue', {\n          get: function get() {\n            return 0;\n          }\n        });\n        Object.defineProperty(panGainNode.gain, 'maxValue', {\n          get: function get() {\n            return 1;\n          }\n        });\n        Object.defineProperty(panGainNode.gain, 'minValue', {\n          get: function get() {\n            return -1;\n          }\n        });\n        var nativeStereoPannerNodeFakerFactory = {\n          get bufferSize() {\n            return undefined;\n          },\n          get channelCount() {\n            return inputGainNode.channelCount;\n          },\n          set channelCount(value) {\n            if (inputGainNode.channelCount !== value) {\n              if (isConnected) {\n                disconnectGraph();\n              }\n              var _buildInternalGraph2 = buildInternalGraph(nativeContext, value, inputGainNode, panGainNode, channelMergerNode);\n              connectGraph = _buildInternalGraph2.connectGraph;\n              disconnectGraph = _buildInternalGraph2.disconnectGraph;\n              if (isConnected) {\n                connectGraph();\n              }\n            }\n            inputGainNode.channelCount = value;\n          },\n          get channelCountMode() {\n            return inputGainNode.channelCountMode;\n          },\n          set channelCountMode(value) {\n            if (value === 'clamped-max' || value === 'max') {\n              throw createNotSupportedError();\n            }\n            inputGainNode.channelCountMode = value;\n          },\n          get channelInterpretation() {\n            return inputGainNode.channelInterpretation;\n          },\n          set channelInterpretation(value) {\n            inputGainNode.channelInterpretation = value;\n          },\n          get context() {\n            return inputGainNode.context;\n          },\n          get inputs() {\n            return [inputGainNode];\n          },\n          get numberOfInputs() {\n            return inputGainNode.numberOfInputs;\n          },\n          get numberOfOutputs() {\n            return inputGainNode.numberOfOutputs;\n          },\n          get pan() {\n            return panGainNode.gain;\n          },\n          addEventListener: function addEventListener() {\n            return inputGainNode.addEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n          },\n          dispatchEvent: function dispatchEvent() {\n            return inputGainNode.dispatchEvent(arguments.length <= 0 ? undefined : arguments[0]);\n          },\n          removeEventListener: function removeEventListener() {\n            return inputGainNode.removeEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n          }\n        };\n        var isConnected = false;\n        var whenConnected = function whenConnected() {\n          connectGraph();\n          isConnected = true;\n        };\n        var whenDisconnected = function whenDisconnected() {\n          disconnectGraph();\n          isConnected = false;\n        };\n        return monitorConnections(interceptConnections(nativeStereoPannerNodeFakerFactory, channelMergerNode), whenConnected, whenDisconnected);\n      };\n    };\n\n    var createNativeWaveShaperNodeFactory = function createNativeWaveShaperNodeFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeWaveShaperNodeFaker, isDCCurve, monitorConnections, nativeAudioContextConstructor, overwriteAccessors) {\n      return function (nativeContext, options) {\n        var nativeWaveShaperNode = nativeContext.createWaveShaper();\n        /*\n         * Bug #119: Safari does not correctly map the values.\n         * @todo Unfortunately there is no way to test for this behavior in a synchronous fashion which is why testing for the existence of\n         * the webkitAudioContext is used as a workaround here. Testing for the automationRate property is necessary because this workaround\n         * isn't necessary anymore since v14.0.2 of Safari.\n         */\n        if (nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name === 'webkitAudioContext' && nativeContext.createGain().gain.automationRate === undefined) {\n          return createNativeWaveShaperNodeFaker(nativeContext, options);\n        }\n        assignNativeAudioNodeOptions(nativeWaveShaperNode, options);\n        var curve = options.curve === null || options.curve instanceof Float32Array ? options.curve : new Float32Array(options.curve);\n        // Bug #104: Chrome and Edge will throw an InvalidAccessError when the curve has less than two samples.\n        if (curve !== null && curve.length < 2) {\n          throw createInvalidStateError();\n        }\n        // Only values of type Float32Array can be assigned to the curve property.\n        assignNativeAudioNodeOption(nativeWaveShaperNode, {\n          curve: curve\n        }, 'curve');\n        assignNativeAudioNodeOption(nativeWaveShaperNode, options, 'oversample');\n        var disconnectNativeAudioBufferSourceNode = null;\n        var isConnected = false;\n        overwriteAccessors(nativeWaveShaperNode, 'curve', function (get) {\n          return function () {\n            return get.call(nativeWaveShaperNode);\n          };\n        }, function (set) {\n          return function (value) {\n            set.call(nativeWaveShaperNode, value);\n            if (isConnected) {\n              if (isDCCurve(value) && disconnectNativeAudioBufferSourceNode === null) {\n                disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, nativeWaveShaperNode);\n              } else if (!isDCCurve(value) && disconnectNativeAudioBufferSourceNode !== null) {\n                disconnectNativeAudioBufferSourceNode();\n                disconnectNativeAudioBufferSourceNode = null;\n              }\n            }\n            return value;\n          };\n        });\n        var whenConnected = function whenConnected() {\n          isConnected = true;\n          if (isDCCurve(nativeWaveShaperNode.curve)) {\n            disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, nativeWaveShaperNode);\n          }\n        };\n        var whenDisconnected = function whenDisconnected() {\n          isConnected = false;\n          if (disconnectNativeAudioBufferSourceNode !== null) {\n            disconnectNativeAudioBufferSourceNode();\n            disconnectNativeAudioBufferSourceNode = null;\n          }\n        };\n        return monitorConnections(nativeWaveShaperNode, whenConnected, whenDisconnected);\n      };\n    };\n\n    var _excluded = [\"curve\", \"oversample\"];\n    function ownKeys$a(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\n    function _objectSpread$a(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$a(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$a(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n    var createNativeWaveShaperNodeFakerFactory = function createNativeWaveShaperNodeFakerFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeGainNode, isDCCurve, monitorConnections) {\n      return function (nativeContext, _ref) {\n        var curve = _ref.curve,\n          oversample = _ref.oversample,\n          audioNodeOptions = _objectWithoutProperties(_ref, _excluded);\n        var negativeWaveShaperNode = nativeContext.createWaveShaper();\n        var positiveWaveShaperNode = nativeContext.createWaveShaper();\n        assignNativeAudioNodeOptions(negativeWaveShaperNode, audioNodeOptions);\n        assignNativeAudioNodeOptions(positiveWaveShaperNode, audioNodeOptions);\n        var inputGainNode = createNativeGainNode(nativeContext, _objectSpread$a(_objectSpread$a({}, audioNodeOptions), {}, {\n          gain: 1\n        }));\n        var invertGainNode = createNativeGainNode(nativeContext, _objectSpread$a(_objectSpread$a({}, audioNodeOptions), {}, {\n          gain: -1\n        }));\n        var outputGainNode = createNativeGainNode(nativeContext, _objectSpread$a(_objectSpread$a({}, audioNodeOptions), {}, {\n          gain: 1\n        }));\n        var revertGainNode = createNativeGainNode(nativeContext, _objectSpread$a(_objectSpread$a({}, audioNodeOptions), {}, {\n          gain: -1\n        }));\n        var disconnectNativeAudioBufferSourceNode = null;\n        var isConnected = false;\n        var unmodifiedCurve = null;\n        var nativeWaveShaperNodeFaker = {\n          get bufferSize() {\n            return undefined;\n          },\n          get channelCount() {\n            return negativeWaveShaperNode.channelCount;\n          },\n          set channelCount(value) {\n            inputGainNode.channelCount = value;\n            invertGainNode.channelCount = value;\n            negativeWaveShaperNode.channelCount = value;\n            outputGainNode.channelCount = value;\n            positiveWaveShaperNode.channelCount = value;\n            revertGainNode.channelCount = value;\n          },\n          get channelCountMode() {\n            return negativeWaveShaperNode.channelCountMode;\n          },\n          set channelCountMode(value) {\n            inputGainNode.channelCountMode = value;\n            invertGainNode.channelCountMode = value;\n            negativeWaveShaperNode.channelCountMode = value;\n            outputGainNode.channelCountMode = value;\n            positiveWaveShaperNode.channelCountMode = value;\n            revertGainNode.channelCountMode = value;\n          },\n          get channelInterpretation() {\n            return negativeWaveShaperNode.channelInterpretation;\n          },\n          set channelInterpretation(value) {\n            inputGainNode.channelInterpretation = value;\n            invertGainNode.channelInterpretation = value;\n            negativeWaveShaperNode.channelInterpretation = value;\n            outputGainNode.channelInterpretation = value;\n            positiveWaveShaperNode.channelInterpretation = value;\n            revertGainNode.channelInterpretation = value;\n          },\n          get context() {\n            return negativeWaveShaperNode.context;\n          },\n          get curve() {\n            return unmodifiedCurve;\n          },\n          set curve(value) {\n            // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n            if (value !== null && value.length < 2) {\n              throw createInvalidStateError();\n            }\n            if (value === null) {\n              negativeWaveShaperNode.curve = value;\n              positiveWaveShaperNode.curve = value;\n            } else {\n              var curveLength = value.length;\n              var negativeCurve = new Float32Array(curveLength + 2 - curveLength % 2);\n              var positiveCurve = new Float32Array(curveLength + 2 - curveLength % 2);\n              negativeCurve[0] = value[0];\n              positiveCurve[0] = -value[curveLength - 1];\n              var length = Math.ceil((curveLength + 1) / 2);\n              var centerIndex = (curveLength + 1) / 2 - 1;\n              for (var i = 1; i < length; i += 1) {\n                var theoreticIndex = i / length * centerIndex;\n                var lowerIndex = Math.floor(theoreticIndex);\n                var upperIndex = Math.ceil(theoreticIndex);\n                negativeCurve[i] = lowerIndex === upperIndex ? value[lowerIndex] : (1 - (theoreticIndex - lowerIndex)) * value[lowerIndex] + (1 - (upperIndex - theoreticIndex)) * value[upperIndex];\n                positiveCurve[i] = lowerIndex === upperIndex ? -value[curveLength - 1 - lowerIndex] : -((1 - (theoreticIndex - lowerIndex)) * value[curveLength - 1 - lowerIndex]) - (1 - (upperIndex - theoreticIndex)) * value[curveLength - 1 - upperIndex];\n              }\n              negativeCurve[length] = curveLength % 2 === 1 ? value[length - 1] : (value[length - 2] + value[length - 1]) / 2;\n              negativeWaveShaperNode.curve = negativeCurve;\n              positiveWaveShaperNode.curve = positiveCurve;\n            }\n            unmodifiedCurve = value;\n            if (isConnected) {\n              if (isDCCurve(unmodifiedCurve) && disconnectNativeAudioBufferSourceNode === null) {\n                disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, inputGainNode);\n              } else if (disconnectNativeAudioBufferSourceNode !== null) {\n                disconnectNativeAudioBufferSourceNode();\n                disconnectNativeAudioBufferSourceNode = null;\n              }\n            }\n          },\n          get inputs() {\n            return [inputGainNode];\n          },\n          get numberOfInputs() {\n            return negativeWaveShaperNode.numberOfInputs;\n          },\n          get numberOfOutputs() {\n            return negativeWaveShaperNode.numberOfOutputs;\n          },\n          get oversample() {\n            return negativeWaveShaperNode.oversample;\n          },\n          set oversample(value) {\n            negativeWaveShaperNode.oversample = value;\n            positiveWaveShaperNode.oversample = value;\n          },\n          addEventListener: function addEventListener() {\n            return inputGainNode.addEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n          },\n          dispatchEvent: function dispatchEvent() {\n            return inputGainNode.dispatchEvent(arguments.length <= 0 ? undefined : arguments[0]);\n          },\n          removeEventListener: function removeEventListener() {\n            return inputGainNode.removeEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n          }\n        };\n        if (curve !== null) {\n          // Only values of type Float32Array can be assigned to the curve property.\n          nativeWaveShaperNodeFaker.curve = curve instanceof Float32Array ? curve : new Float32Array(curve);\n        }\n        if (oversample !== nativeWaveShaperNodeFaker.oversample) {\n          nativeWaveShaperNodeFaker.oversample = oversample;\n        }\n        var whenConnected = function whenConnected() {\n          inputGainNode.connect(negativeWaveShaperNode).connect(outputGainNode);\n          inputGainNode.connect(invertGainNode).connect(positiveWaveShaperNode).connect(revertGainNode).connect(outputGainNode);\n          isConnected = true;\n          if (isDCCurve(unmodifiedCurve)) {\n            disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, inputGainNode);\n          }\n        };\n        var whenDisconnected = function whenDisconnected() {\n          inputGainNode.disconnect(negativeWaveShaperNode);\n          negativeWaveShaperNode.disconnect(outputGainNode);\n          inputGainNode.disconnect(invertGainNode);\n          invertGainNode.disconnect(positiveWaveShaperNode);\n          positiveWaveShaperNode.disconnect(revertGainNode);\n          revertGainNode.disconnect(outputGainNode);\n          isConnected = false;\n          if (disconnectNativeAudioBufferSourceNode !== null) {\n            disconnectNativeAudioBufferSourceNode();\n            disconnectNativeAudioBufferSourceNode = null;\n          }\n        };\n        return monitorConnections(interceptConnections(nativeWaveShaperNodeFaker, outputGainNode), whenConnected, whenDisconnected);\n      };\n    };\n\n    var createNotSupportedError = function createNotSupportedError() {\n      return new DOMException('', 'NotSupportedError');\n    };\n\n    function ownKeys$9(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\n    function _objectSpread$9(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$9(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$9(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n    function _callSuper$4(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$4() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n    function _isNativeReflectConstruct$4() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$4 = function _isNativeReflectConstruct() { return !!t; })(); }\n    var DEFAULT_OPTIONS$5 = {\n      numberOfChannels: 1\n    };\n    var createOfflineAudioContextConstructor = function createOfflineAudioContextConstructor(baseAudioContextConstructor, cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, _startRendering) {\n      return /*#__PURE__*/function (_baseAudioContextCons) {\n        function OfflineAudioContext(a, b, c) {\n          var _this;\n          _classCallCheck(this, OfflineAudioContext);\n          var options;\n          if (typeof a === 'number' && b !== undefined && c !== undefined) {\n            options = {\n              length: b,\n              numberOfChannels: a,\n              sampleRate: c\n            };\n          } else if (_typeof(a) === 'object') {\n            options = a;\n          } else {\n            throw new Error('The given parameters are not valid.');\n          }\n          var _DEFAULT_OPTIONS$opti = _objectSpread$9(_objectSpread$9({}, DEFAULT_OPTIONS$5), options),\n            length = _DEFAULT_OPTIONS$opti.length,\n            numberOfChannels = _DEFAULT_OPTIONS$opti.numberOfChannels,\n            sampleRate = _DEFAULT_OPTIONS$opti.sampleRate;\n          var nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate);\n          // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.\n          if (!cacheTestResult(testPromiseSupport, function () {\n            return testPromiseSupport(nativeOfflineAudioContext);\n          })) {\n            nativeOfflineAudioContext.addEventListener('statechange', function () {\n              var i = 0;\n              var _delayStateChangeEvent = function delayStateChangeEvent(event) {\n                if (_this._state === 'running') {\n                  if (i > 0) {\n                    nativeOfflineAudioContext.removeEventListener('statechange', _delayStateChangeEvent);\n                    event.stopImmediatePropagation();\n                    _this._waitForThePromiseToSettle(event);\n                  } else {\n                    i += 1;\n                  }\n                }\n              };\n              return _delayStateChangeEvent;\n            }());\n          }\n          _this = _callSuper$4(this, OfflineAudioContext, [nativeOfflineAudioContext, numberOfChannels]);\n          _this._length = length;\n          _this._nativeOfflineAudioContext = nativeOfflineAudioContext;\n          _this._state = null;\n          return _this;\n        }\n        _inherits(OfflineAudioContext, _baseAudioContextCons);\n        return _createClass(OfflineAudioContext, [{\n          key: \"length\",\n          get: function get() {\n            // Bug #17: Safari does not yet expose the length.\n            if (this._nativeOfflineAudioContext.length === undefined) {\n              return this._length;\n            }\n            return this._nativeOfflineAudioContext.length;\n          }\n        }, {\n          key: \"state\",\n          get: function get() {\n            return this._state === null ? this._nativeOfflineAudioContext.state : this._state;\n          }\n        }, {\n          key: \"startRendering\",\n          value: function startRendering() {\n            var _this2 = this;\n            /*\n             * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore\n             * the state of the nativeOfflineAudioContext might no transition to running immediately.\n             */\n            if (this._state === 'running') {\n              return Promise.reject(createInvalidStateError());\n            }\n            this._state = 'running';\n            return _startRendering(this.destination, this._nativeOfflineAudioContext)[\"finally\"](function () {\n              _this2._state = null;\n              deactivateAudioGraph(_this2);\n            });\n          }\n        }, {\n          key: \"_waitForThePromiseToSettle\",\n          value: function _waitForThePromiseToSettle(event) {\n            var _this3 = this;\n            if (this._state === null) {\n              this._nativeOfflineAudioContext.dispatchEvent(event);\n            } else {\n              setTimeout(function () {\n                return _this3._waitForThePromiseToSettle(event);\n              });\n            }\n          }\n        }]);\n      }(baseAudioContextConstructor);\n    };\n\n    function ownKeys$8(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\n    function _objectSpread$8(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$8(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$8(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n    function _callSuper$3(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$3() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n    function _isNativeReflectConstruct$3() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$3 = function _isNativeReflectConstruct() { return !!t; })(); }\n    var DEFAULT_OPTIONS$4 = {\n      channelCount: 2,\n      channelCountMode: 'max',\n      // This attribute has no effect for nodes with no inputs.\n      channelInterpretation: 'speakers',\n      // This attribute has no effect for nodes with no inputs.\n      detune: 0,\n      frequency: 440,\n      periodicWave: undefined,\n      type: 'sine'\n    };\n    var createOscillatorNodeConstructor = function createOscillatorNodeConstructor(audioNodeConstructor, createAudioParam, createNativeOscillatorNode, createOscillatorNodeRenderer, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) {\n      return /*#__PURE__*/function (_audioNodeConstructor) {\n        function OscillatorNode(context, options) {\n          var _this;\n          _classCallCheck(this, OscillatorNode);\n          var nativeContext = getNativeContext(context);\n          var mergedOptions = _objectSpread$8(_objectSpread$8({}, DEFAULT_OPTIONS$4), options);\n          var nativeOscillatorNode = createNativeOscillatorNode(nativeContext, mergedOptions);\n          var isOffline = isNativeOfflineAudioContext(nativeContext);\n          var oscillatorNodeRenderer = isOffline ? createOscillatorNodeRenderer() : null;\n          var nyquist = context.sampleRate / 2;\n          _this = _callSuper$3(this, OscillatorNode, [context, false, nativeOscillatorNode, oscillatorNodeRenderer]);\n          // Bug #81: Firefox & Safari do not export the correct values for maxValue and minValue.\n          _this._detune = createAudioParam(_this, isOffline, nativeOscillatorNode.detune, 153600, -153600);\n          // Bug #76: Safari does not export the correct values for maxValue and minValue.\n          _this._frequency = createAudioParam(_this, isOffline, nativeOscillatorNode.frequency, nyquist, -nyquist);\n          _this._nativeOscillatorNode = nativeOscillatorNode;\n          _this._onended = null;\n          _this._oscillatorNodeRenderer = oscillatorNodeRenderer;\n          if (_this._oscillatorNodeRenderer !== null && mergedOptions.periodicWave !== undefined) {\n            _this._oscillatorNodeRenderer.periodicWave = mergedOptions.periodicWave;\n          }\n          return _this;\n        }\n        _inherits(OscillatorNode, _audioNodeConstructor);\n        return _createClass(OscillatorNode, [{\n          key: \"detune\",\n          get: function get() {\n            return this._detune;\n          }\n        }, {\n          key: \"frequency\",\n          get: function get() {\n            return this._frequency;\n          }\n        }, {\n          key: \"onended\",\n          get: function get() {\n            return this._onended;\n          },\n          set: function set(value) {\n            var wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n            this._nativeOscillatorNode.onended = wrappedListener;\n            var nativeOnEnded = this._nativeOscillatorNode.onended;\n            this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n          }\n        }, {\n          key: \"type\",\n          get: function get() {\n            return this._nativeOscillatorNode.type;\n          },\n          set: function set(value) {\n            this._nativeOscillatorNode.type = value;\n            if (this._oscillatorNodeRenderer !== null) {\n              this._oscillatorNodeRenderer.periodicWave = null;\n            }\n          }\n        }, {\n          key: \"setPeriodicWave\",\n          value: function setPeriodicWave(periodicWave) {\n            this._nativeOscillatorNode.setPeriodicWave(periodicWave);\n            if (this._oscillatorNodeRenderer !== null) {\n              this._oscillatorNodeRenderer.periodicWave = periodicWave;\n            }\n          }\n        }, {\n          key: \"start\",\n          value: function start() {\n            var _this2 = this;\n            var when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n            this._nativeOscillatorNode.start(when);\n            if (this._oscillatorNodeRenderer !== null) {\n              this._oscillatorNodeRenderer.start = when;\n            }\n            if (this.context.state !== 'closed') {\n              setInternalStateToActive(this);\n              var _resetInternalStateToPassive = function resetInternalStateToPassive() {\n                _this2._nativeOscillatorNode.removeEventListener('ended', _resetInternalStateToPassive);\n                if (isActiveAudioNode(_this2)) {\n                  setInternalStateToPassive(_this2);\n                }\n              };\n              this._nativeOscillatorNode.addEventListener('ended', _resetInternalStateToPassive);\n            }\n          }\n        }, {\n          key: \"stop\",\n          value: function stop() {\n            var when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n            this._nativeOscillatorNode.stop(when);\n            if (this._oscillatorNodeRenderer !== null) {\n              this._oscillatorNodeRenderer.stop = when;\n            }\n          }\n        }]);\n      }(audioNodeConstructor);\n    };\n\n    var createOscillatorNodeRendererFactory = function createOscillatorNodeRendererFactory(connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) {\n      return function () {\n        var renderedNativeOscillatorNodes = new WeakMap();\n        var periodicWave = null;\n        var start = null;\n        var stop = null;\n        var createOscillatorNode = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(proxy, nativeOfflineAudioContext) {\n            var nativeOscillatorNode, nativeOscillatorNodeIsOwnedByContext, options;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  nativeOscillatorNode = getNativeAudioNode(proxy); // If the initially used nativeOscillatorNode was not constructed on the same OfflineAudioContext it needs to be created again.\n                  nativeOscillatorNodeIsOwnedByContext = isOwnedByContext(nativeOscillatorNode, nativeOfflineAudioContext);\n                  if (!nativeOscillatorNodeIsOwnedByContext) {\n                    options = {\n                      channelCount: nativeOscillatorNode.channelCount,\n                      channelCountMode: nativeOscillatorNode.channelCountMode,\n                      channelInterpretation: nativeOscillatorNode.channelInterpretation,\n                      detune: nativeOscillatorNode.detune.value,\n                      frequency: nativeOscillatorNode.frequency.value,\n                      periodicWave: periodicWave === null ? undefined : periodicWave,\n                      type: nativeOscillatorNode.type\n                    };\n                    nativeOscillatorNode = createNativeOscillatorNode(nativeOfflineAudioContext, options);\n                    if (start !== null) {\n                      nativeOscillatorNode.start(start);\n                    }\n                    if (stop !== null) {\n                      nativeOscillatorNode.stop(stop);\n                    }\n                  }\n                  renderedNativeOscillatorNodes.set(nativeOfflineAudioContext, nativeOscillatorNode);\n                  if (nativeOscillatorNodeIsOwnedByContext) {\n                    _context.next = 11;\n                    break;\n                  }\n                  _context.next = 7;\n                  return renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);\n                case 7:\n                  _context.next = 9;\n                  return renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);\n                case 9:\n                  _context.next = 15;\n                  break;\n                case 11:\n                  _context.next = 13;\n                  return connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);\n                case 13:\n                  _context.next = 15;\n                  return connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);\n                case 15:\n                  _context.next = 17;\n                  return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeOscillatorNode);\n                case 17:\n                  return _context.abrupt(\"return\", nativeOscillatorNode);\n                case 18:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _callee);\n          }));\n          return function createOscillatorNode(_x, _x2) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n        return {\n          set periodicWave(value) {\n            periodicWave = value;\n          },\n          set start(value) {\n            start = value;\n          },\n          set stop(value) {\n            stop = value;\n          },\n          render: function render(proxy, nativeOfflineAudioContext) {\n            var renderedNativeOscillatorNode = renderedNativeOscillatorNodes.get(nativeOfflineAudioContext);\n            if (renderedNativeOscillatorNode !== undefined) {\n              return Promise.resolve(renderedNativeOscillatorNode);\n            }\n            return createOscillatorNode(proxy, nativeOfflineAudioContext);\n          }\n        };\n      };\n    };\n\n    function ownKeys$7(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\n    function _objectSpread$7(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$7(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$7(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n    function _callSuper$2(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$2() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n    function _isNativeReflectConstruct$2() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$2 = function _isNativeReflectConstruct() { return !!t; })(); }\n    var DEFAULT_OPTIONS$3 = {\n      channelCount: 2,\n      channelCountMode: 'clamped-max',\n      channelInterpretation: 'speakers',\n      coneInnerAngle: 360,\n      coneOuterAngle: 360,\n      coneOuterGain: 0,\n      distanceModel: 'inverse',\n      maxDistance: 10000,\n      orientationX: 1,\n      orientationY: 0,\n      orientationZ: 0,\n      panningModel: 'equalpower',\n      positionX: 0,\n      positionY: 0,\n      positionZ: 0,\n      refDistance: 1,\n      rolloffFactor: 1\n    };\n    var createPannerNodeConstructor = function createPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativePannerNode, createPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) {\n      return /*#__PURE__*/function (_audioNodeConstructor) {\n        function PannerNode(context, options) {\n          var _this;\n          _classCallCheck(this, PannerNode);\n          var nativeContext = getNativeContext(context);\n          var mergedOptions = _objectSpread$7(_objectSpread$7({}, DEFAULT_OPTIONS$3), options);\n          var nativePannerNode = createNativePannerNode(nativeContext, mergedOptions);\n          var isOffline = isNativeOfflineAudioContext(nativeContext);\n          var pannerNodeRenderer = isOffline ? createPannerNodeRenderer() : null;\n          _this = _callSuper$2(this, PannerNode, [context, false, nativePannerNode, pannerNodeRenderer]);\n          _this._nativePannerNode = nativePannerNode;\n          // Bug #74: Safari does not export the correct values for maxValue and minValue.\n          _this._orientationX = createAudioParam(_this, isOffline, nativePannerNode.orientationX, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n          _this._orientationY = createAudioParam(_this, isOffline, nativePannerNode.orientationY, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n          _this._orientationZ = createAudioParam(_this, isOffline, nativePannerNode.orientationZ, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n          _this._positionX = createAudioParam(_this, isOffline, nativePannerNode.positionX, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n          _this._positionY = createAudioParam(_this, isOffline, nativePannerNode.positionY, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n          _this._positionZ = createAudioParam(_this, isOffline, nativePannerNode.positionZ, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n          // @todo Determine a meaningful tail-time instead of just using one second.\n          setAudioNodeTailTime(_this, 1);\n          return _this;\n        }\n        _inherits(PannerNode, _audioNodeConstructor);\n        return _createClass(PannerNode, [{\n          key: \"coneInnerAngle\",\n          get: function get() {\n            return this._nativePannerNode.coneInnerAngle;\n          },\n          set: function set(value) {\n            this._nativePannerNode.coneInnerAngle = value;\n          }\n        }, {\n          key: \"coneOuterAngle\",\n          get: function get() {\n            return this._nativePannerNode.coneOuterAngle;\n          },\n          set: function set(value) {\n            this._nativePannerNode.coneOuterAngle = value;\n          }\n        }, {\n          key: \"coneOuterGain\",\n          get: function get() {\n            return this._nativePannerNode.coneOuterGain;\n          },\n          set: function set(value) {\n            this._nativePannerNode.coneOuterGain = value;\n          }\n        }, {\n          key: \"distanceModel\",\n          get: function get() {\n            return this._nativePannerNode.distanceModel;\n          },\n          set: function set(value) {\n            this._nativePannerNode.distanceModel = value;\n          }\n        }, {\n          key: \"maxDistance\",\n          get: function get() {\n            return this._nativePannerNode.maxDistance;\n          },\n          set: function set(value) {\n            this._nativePannerNode.maxDistance = value;\n          }\n        }, {\n          key: \"orientationX\",\n          get: function get() {\n            return this._orientationX;\n          }\n        }, {\n          key: \"orientationY\",\n          get: function get() {\n            return this._orientationY;\n          }\n        }, {\n          key: \"orientationZ\",\n          get: function get() {\n            return this._orientationZ;\n          }\n        }, {\n          key: \"panningModel\",\n          get: function get() {\n            return this._nativePannerNode.panningModel;\n          },\n          set: function set(value) {\n            this._nativePannerNode.panningModel = value;\n          }\n        }, {\n          key: \"positionX\",\n          get: function get() {\n            return this._positionX;\n          }\n        }, {\n          key: \"positionY\",\n          get: function get() {\n            return this._positionY;\n          }\n        }, {\n          key: \"positionZ\",\n          get: function get() {\n            return this._positionZ;\n          }\n        }, {\n          key: \"refDistance\",\n          get: function get() {\n            return this._nativePannerNode.refDistance;\n          },\n          set: function set(value) {\n            this._nativePannerNode.refDistance = value;\n          }\n        }, {\n          key: \"rolloffFactor\",\n          get: function get() {\n            return this._nativePannerNode.rolloffFactor;\n          },\n          set: function set(value) {\n            this._nativePannerNode.rolloffFactor = value;\n          }\n        }]);\n      }(audioNodeConstructor);\n    };\n\n    function ownKeys$6(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\n    function _objectSpread$6(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$6(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$6(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n    var createPannerNodeRendererFactory = function createPannerNodeRendererFactory(connectAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeGainNode, createNativePannerNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext) {\n      return function () {\n        var renderedNativeAudioNodes = new WeakMap();\n        var renderedBufferPromise = null;\n        var createAudioNode = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(proxy, nativeOfflineAudioContext) {\n            var nativeGainNode, nativePannerNode, commonAudioNodeOptions, commonNativePannerNodeOptions, nativePannerNodeIsOwnedByContext, options, partialOfflineAudioContext, nativeChannelMergerNode, renderedBuffer, inputGainNode, channelDatas, i, lastOrientation, lastPosition, gateGainNode, partialPannerNode, _i, orientation, positon, currentTime;\n            return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n              while (1) switch (_context3.prev = _context3.next) {\n                case 0:\n                  nativeGainNode = null;\n                  nativePannerNode = getNativeAudioNode(proxy);\n                  commonAudioNodeOptions = {\n                    channelCount: nativePannerNode.channelCount,\n                    channelCountMode: nativePannerNode.channelCountMode,\n                    channelInterpretation: nativePannerNode.channelInterpretation\n                  };\n                  commonNativePannerNodeOptions = _objectSpread$6(_objectSpread$6({}, commonAudioNodeOptions), {}, {\n                    coneInnerAngle: nativePannerNode.coneInnerAngle,\n                    coneOuterAngle: nativePannerNode.coneOuterAngle,\n                    coneOuterGain: nativePannerNode.coneOuterGain,\n                    distanceModel: nativePannerNode.distanceModel,\n                    maxDistance: nativePannerNode.maxDistance,\n                    panningModel: nativePannerNode.panningModel,\n                    refDistance: nativePannerNode.refDistance,\n                    rolloffFactor: nativePannerNode.rolloffFactor\n                  }); // If the initially used nativePannerNode was not constructed on the same OfflineAudioContext it needs to be created again.\n                  nativePannerNodeIsOwnedByContext = isOwnedByContext(nativePannerNode, nativeOfflineAudioContext); // Bug #124: Safari does not support modifying the orientation and the position with AudioParams.\n                  if ('bufferSize' in nativePannerNode) {\n                    nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, _objectSpread$6(_objectSpread$6({}, commonAudioNodeOptions), {}, {\n                      gain: 1\n                    }));\n                  } else if (!nativePannerNodeIsOwnedByContext) {\n                    options = _objectSpread$6(_objectSpread$6({}, commonNativePannerNodeOptions), {}, {\n                      orientationX: nativePannerNode.orientationX.value,\n                      orientationY: nativePannerNode.orientationY.value,\n                      orientationZ: nativePannerNode.orientationZ.value,\n                      positionX: nativePannerNode.positionX.value,\n                      positionY: nativePannerNode.positionY.value,\n                      positionZ: nativePannerNode.positionZ.value\n                    });\n                    nativePannerNode = createNativePannerNode(nativeOfflineAudioContext, options);\n                  }\n                  renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeGainNode === null ? nativePannerNode : nativeGainNode);\n                  if (!(nativeGainNode !== null)) {\n                    _context3.next = 31;\n                    break;\n                  }\n                  if (!(renderedBufferPromise === null)) {\n                    _context3.next = 15;\n                    break;\n                  }\n                  if (!(nativeOfflineAudioContextConstructor === null)) {\n                    _context3.next = 11;\n                    break;\n                  }\n                  throw new Error('Missing the native OfflineAudioContext constructor.');\n                case 11:\n                  partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(6,\n                  // Bug #17: Safari does not yet expose the length.\n                  proxy.context.length, nativeOfflineAudioContext.sampleRate);\n                  nativeChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {\n                    channelCount: 1,\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'speakers',\n                    numberOfInputs: 6\n                  });\n                  nativeChannelMergerNode.connect(partialOfflineAudioContext.destination);\n                  renderedBufferPromise = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                    var nativeConstantSourceNodes, i;\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) switch (_context2.prev = _context2.next) {\n                        case 0:\n                          _context2.next = 2;\n                          return Promise.all([proxy.orientationX, proxy.orientationY, proxy.orientationZ, proxy.positionX, proxy.positionY, proxy.positionZ].map(/*#__PURE__*/function () {\n                            var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(audioParam, index) {\n                              var nativeConstantSourceNode;\n                              return _regeneratorRuntime.wrap(function _callee$(_context) {\n                                while (1) switch (_context.prev = _context.next) {\n                                  case 0:\n                                    nativeConstantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {\n                                      channelCount: 1,\n                                      channelCountMode: 'explicit',\n                                      channelInterpretation: 'discrete',\n                                      offset: index === 0 ? 1 : 0\n                                    });\n                                    _context.next = 3;\n                                    return renderAutomation(partialOfflineAudioContext, audioParam, nativeConstantSourceNode.offset);\n                                  case 3:\n                                    return _context.abrupt(\"return\", nativeConstantSourceNode);\n                                  case 4:\n                                  case \"end\":\n                                    return _context.stop();\n                                }\n                              }, _callee);\n                            }));\n                            return function (_x3, _x4) {\n                              return _ref3.apply(this, arguments);\n                            };\n                          }()));\n                        case 2:\n                          nativeConstantSourceNodes = _context2.sent;\n                          for (i = 0; i < 6; i += 1) {\n                            nativeConstantSourceNodes[i].connect(nativeChannelMergerNode, 0, i);\n                            nativeConstantSourceNodes[i].start(0);\n                          }\n                          return _context2.abrupt(\"return\", renderNativeOfflineAudioContext(partialOfflineAudioContext));\n                        case 5:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }, _callee2);\n                  }))();\n                case 15:\n                  _context3.next = 17;\n                  return renderedBufferPromise;\n                case 17:\n                  renderedBuffer = _context3.sent;\n                  inputGainNode = createNativeGainNode(nativeOfflineAudioContext, _objectSpread$6(_objectSpread$6({}, commonAudioNodeOptions), {}, {\n                    gain: 1\n                  }));\n                  _context3.next = 21;\n                  return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, inputGainNode);\n                case 21:\n                  channelDatas = [];\n                  for (i = 0; i < renderedBuffer.numberOfChannels; i += 1) {\n                    channelDatas.push(renderedBuffer.getChannelData(i));\n                  }\n                  lastOrientation = [channelDatas[0][0], channelDatas[1][0], channelDatas[2][0]];\n                  lastPosition = [channelDatas[3][0], channelDatas[4][0], channelDatas[5][0]];\n                  gateGainNode = createNativeGainNode(nativeOfflineAudioContext, _objectSpread$6(_objectSpread$6({}, commonAudioNodeOptions), {}, {\n                    gain: 1\n                  }));\n                  partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, _objectSpread$6(_objectSpread$6({}, commonNativePannerNodeOptions), {}, {\n                    orientationX: lastOrientation[0],\n                    orientationY: lastOrientation[1],\n                    orientationZ: lastOrientation[2],\n                    positionX: lastPosition[0],\n                    positionY: lastPosition[1],\n                    positionZ: lastPosition[2]\n                  }));\n                  inputGainNode.connect(gateGainNode).connect(partialPannerNode.inputs[0]);\n                  partialPannerNode.connect(nativeGainNode);\n                  for (_i = 128; _i < renderedBuffer.length; _i += 128) {\n                    orientation = [channelDatas[0][_i], channelDatas[1][_i], channelDatas[2][_i]];\n                    positon = [channelDatas[3][_i], channelDatas[4][_i], channelDatas[5][_i]];\n                    if (orientation.some(function (value, index) {\n                      return value !== lastOrientation[index];\n                    }) || positon.some(function (value, index) {\n                      return value !== lastPosition[index];\n                    })) {\n                      lastOrientation = orientation;\n                      lastPosition = positon;\n                      currentTime = _i / nativeOfflineAudioContext.sampleRate;\n                      gateGainNode.gain.setValueAtTime(0, currentTime);\n                      gateGainNode = createNativeGainNode(nativeOfflineAudioContext, _objectSpread$6(_objectSpread$6({}, commonAudioNodeOptions), {}, {\n                        gain: 0\n                      }));\n                      partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, _objectSpread$6(_objectSpread$6({}, commonNativePannerNodeOptions), {}, {\n                        orientationX: lastOrientation[0],\n                        orientationY: lastOrientation[1],\n                        orientationZ: lastOrientation[2],\n                        positionX: lastPosition[0],\n                        positionY: lastPosition[1],\n                        positionZ: lastPosition[2]\n                      }));\n                      gateGainNode.gain.setValueAtTime(1, currentTime);\n                      inputGainNode.connect(gateGainNode).connect(partialPannerNode.inputs[0]);\n                      partialPannerNode.connect(nativeGainNode);\n                    }\n                  }\n                  return _context3.abrupt(\"return\", nativeGainNode);\n                case 31:\n                  if (nativePannerNodeIsOwnedByContext) {\n                    _context3.next = 46;\n                    break;\n                  }\n                  _context3.next = 34;\n                  return renderAutomation(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX);\n                case 34:\n                  _context3.next = 36;\n                  return renderAutomation(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY);\n                case 36:\n                  _context3.next = 38;\n                  return renderAutomation(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ);\n                case 38:\n                  _context3.next = 40;\n                  return renderAutomation(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX);\n                case 40:\n                  _context3.next = 42;\n                  return renderAutomation(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY);\n                case 42:\n                  _context3.next = 44;\n                  return renderAutomation(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ);\n                case 44:\n                  _context3.next = 58;\n                  break;\n                case 46:\n                  _context3.next = 48;\n                  return connectAudioParam(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX);\n                case 48:\n                  _context3.next = 50;\n                  return connectAudioParam(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY);\n                case 50:\n                  _context3.next = 52;\n                  return connectAudioParam(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ);\n                case 52:\n                  _context3.next = 54;\n                  return connectAudioParam(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX);\n                case 54:\n                  _context3.next = 56;\n                  return connectAudioParam(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY);\n                case 56:\n                  _context3.next = 58;\n                  return connectAudioParam(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ);\n                case 58:\n                  if (!isNativeAudioNodeFaker(nativePannerNode)) {\n                    _context3.next = 63;\n                    break;\n                  }\n                  _context3.next = 61;\n                  return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode.inputs[0]);\n                case 61:\n                  _context3.next = 65;\n                  break;\n                case 63:\n                  _context3.next = 65;\n                  return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode);\n                case 65:\n                  return _context3.abrupt(\"return\", nativePannerNode);\n                case 66:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }, _callee3);\n          }));\n          return function createAudioNode(_x, _x2) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n        return {\n          render: function render(proxy, nativeOfflineAudioContext) {\n            var renderedNativeGainNodeOrNativePannerNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n            if (renderedNativeGainNodeOrNativePannerNode !== undefined) {\n              return Promise.resolve(renderedNativeGainNodeOrNativePannerNode);\n            }\n            return createAudioNode(proxy, nativeOfflineAudioContext);\n          }\n        };\n      };\n    };\n\n    function ownKeys$5(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\n    function _objectSpread$5(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$5(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$5(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n    var DEFAULT_OPTIONS$2 = {\n      disableNormalization: false\n    };\n    var createPeriodicWaveConstructor = function createPeriodicWaveConstructor(createNativePeriodicWave, getNativeContext, periodicWaveStore, sanitizePeriodicWaveOptions) {\n      return /*#__PURE__*/function () {\n        function PeriodicWave(context, options) {\n          _classCallCheck(this, PeriodicWave);\n          var nativeContext = getNativeContext(context);\n          var mergedOptions = sanitizePeriodicWaveOptions(_objectSpread$5(_objectSpread$5({}, DEFAULT_OPTIONS$2), options));\n          var periodicWave = createNativePeriodicWave(nativeContext, mergedOptions);\n          periodicWaveStore.add(periodicWave);\n          // This does violate all good pratices but it is used here to simplify the handling of periodic waves.\n          return periodicWave;\n        }\n        return _createClass(PeriodicWave, null, [{\n          key: Symbol.hasInstance,\n          value: function value(instance) {\n            return instance !== null && _typeof(instance) === 'object' && Object.getPrototypeOf(instance) === PeriodicWave.prototype || periodicWaveStore.has(instance);\n          }\n        }]);\n      }();\n    };\n\n    var createRenderAutomation = function createRenderAutomation(getAudioParamRenderer, renderInputsOfAudioParam) {\n      return function (nativeOfflineAudioContext, audioParam, nativeAudioParam) {\n        var audioParamRenderer = getAudioParamRenderer(audioParam);\n        audioParamRenderer.replay(nativeAudioParam);\n        return renderInputsOfAudioParam(audioParam, nativeOfflineAudioContext, nativeAudioParam);\n      };\n    };\n\n    var createRenderInputsOfAudioNode = function createRenderInputsOfAudioNode(getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle) {\n      return /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(audioNode, nativeOfflineAudioContext, nativeAudioNode) {\n          var audioNodeConnections;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) switch (_context2.prev = _context2.next) {\n              case 0:\n                audioNodeConnections = getAudioNodeConnections(audioNode);\n                _context2.next = 3;\n                return Promise.all(audioNodeConnections.activeInputs.map(function (connections, input) {\n                  return Array.from(connections).map(/*#__PURE__*/function () {\n                    var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n                      var _ref4, source, output, audioNodeRenderer, renderedNativeAudioNode, destination;\n                      return _regeneratorRuntime.wrap(function _callee$(_context) {\n                        while (1) switch (_context.prev = _context.next) {\n                          case 0:\n                            _ref4 = _slicedToArray(_ref2, 2), source = _ref4[0], output = _ref4[1];\n                            audioNodeRenderer = getAudioNodeRenderer(source);\n                            _context.next = 4;\n                            return audioNodeRenderer.render(source, nativeOfflineAudioContext);\n                          case 4:\n                            renderedNativeAudioNode = _context.sent;\n                            destination = audioNode.context.destination;\n                            if (!isPartOfACycle(source) && (audioNode !== destination || !isPartOfACycle(audioNode))) {\n                              renderedNativeAudioNode.connect(nativeAudioNode, output, input);\n                            }\n                          case 7:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }, _callee);\n                    }));\n                    return function (_x4) {\n                      return _ref3.apply(this, arguments);\n                    };\n                  }());\n                }).reduce(function (allRenderingPromises, renderingPromises) {\n                  return [].concat(_toConsumableArray(allRenderingPromises), _toConsumableArray(renderingPromises));\n                }, []));\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }, _callee2);\n        }));\n        return function (_x, _x2, _x3) {\n          return _ref.apply(this, arguments);\n        };\n      }();\n    };\n\n    var createRenderInputsOfAudioParam = function createRenderInputsOfAudioParam(getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle) {\n      return /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(audioParam, nativeOfflineAudioContext, nativeAudioParam) {\n          var audioParamConnections;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) switch (_context2.prev = _context2.next) {\n              case 0:\n                audioParamConnections = getAudioParamConnections(audioParam);\n                _context2.next = 3;\n                return Promise.all(Array.from(audioParamConnections.activeInputs).map(/*#__PURE__*/function () {\n                  var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n                    var _ref4, source, output, audioNodeRenderer, renderedNativeAudioNode;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) switch (_context.prev = _context.next) {\n                        case 0:\n                          _ref4 = _slicedToArray(_ref2, 2), source = _ref4[0], output = _ref4[1];\n                          audioNodeRenderer = getAudioNodeRenderer(source);\n                          _context.next = 4;\n                          return audioNodeRenderer.render(source, nativeOfflineAudioContext);\n                        case 4:\n                          renderedNativeAudioNode = _context.sent;\n                          if (!isPartOfACycle(source)) {\n                            renderedNativeAudioNode.connect(nativeAudioParam, output);\n                          }\n                        case 6:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }, _callee);\n                  }));\n                  return function (_x4) {\n                    return _ref3.apply(this, arguments);\n                  };\n                }()));\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }, _callee2);\n        }));\n        return function (_x, _x2, _x3) {\n          return _ref.apply(this, arguments);\n        };\n      }();\n    };\n\n    var createRenderNativeOfflineAudioContext = function createRenderNativeOfflineAudioContext(cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, testOfflineAudioContextCurrentTimeSupport) {\n      return function (nativeOfflineAudioContext) {\n        // Bug #21: Safari does not support promises yet.\n        if (cacheTestResult(testPromiseSupport, function () {\n          return testPromiseSupport(nativeOfflineAudioContext);\n        })) {\n          // Bug #158: Chrome and Edge do not advance currentTime if it is not accessed while rendering the audio.\n          return Promise.resolve(cacheTestResult(testOfflineAudioContextCurrentTimeSupport, testOfflineAudioContextCurrentTimeSupport)).then(function (isOfflineAudioContextCurrentTimeSupported) {\n            if (!isOfflineAudioContextCurrentTimeSupported) {\n              var scriptProcessorNode = createNativeScriptProcessorNode(nativeOfflineAudioContext, 512, 0, 1);\n              nativeOfflineAudioContext.oncomplete = function () {\n                scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation\n                scriptProcessorNode.disconnect();\n              };\n              scriptProcessorNode.onaudioprocess = function () {\n                return nativeOfflineAudioContext.currentTime;\n              }; // tslint:disable-line:deprecation\n              scriptProcessorNode.connect(nativeOfflineAudioContext.destination);\n            }\n            return nativeOfflineAudioContext.startRendering();\n          });\n        }\n        return new Promise(function (resolve) {\n          // Bug #48: Safari does not render an OfflineAudioContext without any connected node.\n          var gainNode = createNativeGainNode(nativeOfflineAudioContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            gain: 0\n          });\n          nativeOfflineAudioContext.oncomplete = function (event) {\n            gainNode.disconnect();\n            resolve(event.renderedBuffer);\n          };\n          gainNode.connect(nativeOfflineAudioContext.destination);\n          nativeOfflineAudioContext.startRendering();\n        });\n      };\n    };\n\n    var createSetActiveAudioWorkletNodeInputs = function createSetActiveAudioWorkletNodeInputs(activeAudioWorkletNodeInputsStore) {\n      return function (nativeAudioWorkletNode, activeInputs) {\n        activeAudioWorkletNodeInputsStore.set(nativeAudioWorkletNode, activeInputs);\n      };\n    };\n\n    var createSetAudioNodeTailTime = function createSetAudioNodeTailTime(audioNodeTailTimeStore) {\n      return function (audioNode, tailTime) {\n        return audioNodeTailTimeStore.set(audioNode, tailTime);\n      };\n    };\n\n    var createStartRendering = function createStartRendering(audioBufferStore, cacheTestResult, getAudioNodeRenderer, getUnrenderedAudioWorkletNodes, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) {\n      return function (destination, nativeOfflineAudioContext) {\n        return getAudioNodeRenderer(destination).render(destination, nativeOfflineAudioContext)\n        /*\n         * Bug #86 & #87: Invoking the renderer of an AudioWorkletNode might be necessary if it has no direct or indirect connection to the\n         * destination.\n         */.then(function () {\n          return Promise.all(Array.from(getUnrenderedAudioWorkletNodes(nativeOfflineAudioContext)).map(function (audioWorkletNode) {\n            return getAudioNodeRenderer(audioWorkletNode).render(audioWorkletNode, nativeOfflineAudioContext);\n          }));\n        }).then(function () {\n          return renderNativeOfflineAudioContext(nativeOfflineAudioContext);\n        }).then(function (audioBuffer) {\n          // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n          // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n          if (typeof audioBuffer.copyFromChannel !== 'function') {\n            wrapAudioBufferCopyChannelMethods(audioBuffer);\n            wrapAudioBufferGetChannelDataMethod(audioBuffer);\n            // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.\n          } else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, function () {\n            return testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer);\n          })) {\n            wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n          }\n          audioBufferStore.add(audioBuffer);\n          return audioBuffer;\n        });\n      };\n    };\n\n    function ownKeys$4(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\n    function _objectSpread$4(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$4(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$4(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n    function _callSuper$1(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct$1() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n    function _isNativeReflectConstruct$1() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct$1 = function _isNativeReflectConstruct() { return !!t; })(); }\n    var DEFAULT_OPTIONS$1 = {\n      channelCount: 2,\n      /*\n       * Bug #105: The channelCountMode should be 'clamped-max' according to the spec but is set to 'explicit' to achieve consistent\n       * behavior.\n       */\n      channelCountMode: 'explicit',\n      channelInterpretation: 'speakers',\n      pan: 0\n    };\n    var createStereoPannerNodeConstructor = function createStereoPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext) {\n      return /*#__PURE__*/function (_audioNodeConstructor) {\n        function StereoPannerNode(context, options) {\n          var _this;\n          _classCallCheck(this, StereoPannerNode);\n          var nativeContext = getNativeContext(context);\n          var mergedOptions = _objectSpread$4(_objectSpread$4({}, DEFAULT_OPTIONS$1), options);\n          var nativeStereoPannerNode = createNativeStereoPannerNode(nativeContext, mergedOptions);\n          var isOffline = isNativeOfflineAudioContext(nativeContext);\n          var stereoPannerNodeRenderer = isOffline ? createStereoPannerNodeRenderer() : null;\n          _this = _callSuper$1(this, StereoPannerNode, [context, false, nativeStereoPannerNode, stereoPannerNodeRenderer]);\n          _this._pan = createAudioParam(_this, isOffline, nativeStereoPannerNode.pan);\n          return _this;\n        }\n        _inherits(StereoPannerNode, _audioNodeConstructor);\n        return _createClass(StereoPannerNode, [{\n          key: \"pan\",\n          get: function get() {\n            return this._pan;\n          }\n        }]);\n      }(audioNodeConstructor);\n    };\n\n    var createStereoPannerNodeRendererFactory = function createStereoPannerNodeRendererFactory(connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) {\n      return function () {\n        var renderedNativeStereoPannerNodes = new WeakMap();\n        var createStereoPannerNode = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(proxy, nativeOfflineAudioContext) {\n            var nativeStereoPannerNode, nativeStereoPannerNodeIsOwnedByContext, options;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  nativeStereoPannerNode = getNativeAudioNode(proxy);\n                  /*\n                   * If the initially used nativeStereoPannerNode was not constructed on the same OfflineAudioContext it needs to be created\n                   * again.\n                   */\n                  nativeStereoPannerNodeIsOwnedByContext = isOwnedByContext(nativeStereoPannerNode, nativeOfflineAudioContext);\n                  if (!nativeStereoPannerNodeIsOwnedByContext) {\n                    options = {\n                      channelCount: nativeStereoPannerNode.channelCount,\n                      channelCountMode: nativeStereoPannerNode.channelCountMode,\n                      channelInterpretation: nativeStereoPannerNode.channelInterpretation,\n                      pan: nativeStereoPannerNode.pan.value\n                    };\n                    nativeStereoPannerNode = createNativeStereoPannerNode(nativeOfflineAudioContext, options);\n                  }\n                  renderedNativeStereoPannerNodes.set(nativeOfflineAudioContext, nativeStereoPannerNode);\n                  if (nativeStereoPannerNodeIsOwnedByContext) {\n                    _context.next = 9;\n                    break;\n                  }\n                  _context.next = 7;\n                  return renderAutomation(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);\n                case 7:\n                  _context.next = 11;\n                  break;\n                case 9:\n                  _context.next = 11;\n                  return connectAudioParam(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);\n                case 11:\n                  if (!isNativeAudioNodeFaker(nativeStereoPannerNode)) {\n                    _context.next = 16;\n                    break;\n                  }\n                  _context.next = 14;\n                  return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode.inputs[0]);\n                case 14:\n                  _context.next = 18;\n                  break;\n                case 16:\n                  _context.next = 18;\n                  return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode);\n                case 18:\n                  return _context.abrupt(\"return\", nativeStereoPannerNode);\n                case 19:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _callee);\n          }));\n          return function createStereoPannerNode(_x, _x2) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n        return {\n          render: function render(proxy, nativeOfflineAudioContext) {\n            var renderedNativeStereoPannerNode = renderedNativeStereoPannerNodes.get(nativeOfflineAudioContext);\n            if (renderedNativeStereoPannerNode !== undefined) {\n              return Promise.resolve(renderedNativeStereoPannerNode);\n            }\n            return createStereoPannerNode(proxy, nativeOfflineAudioContext);\n          }\n        };\n      };\n    };\n\n    // Bug #33: Safari exposes an AudioBuffer but it can't be used as a constructor.\n    var createTestAudioBufferConstructorSupport = function createTestAudioBufferConstructorSupport(nativeAudioBufferConstructor) {\n      return function () {\n        if (nativeAudioBufferConstructor === null) {\n          return false;\n        }\n        try {\n          new nativeAudioBufferConstructor({\n            length: 1,\n            sampleRate: 44100\n          }); // tslint:disable-line:no-unused-expression\n        } catch (_unused) {\n          return false;\n        }\n        return true;\n      };\n    };\n\n    /*\n     * Firefox up to version 67 didn't fully support the copyFromChannel() and copyToChannel() methods. Therefore testing one of those methods\n     * is enough to know if the other one is supported as well.\n     */\n    var createTestAudioBufferCopyChannelMethodsSubarraySupport = function createTestAudioBufferCopyChannelMethodsSubarraySupport(nativeOfflineAudioContextConstructor) {\n      return function () {\n        if (nativeOfflineAudioContextConstructor === null) {\n          return false;\n        }\n        var nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n        var nativeAudioBuffer = nativeOfflineAudioContext.createBuffer(1, 1, 44100);\n        // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n        if (nativeAudioBuffer.copyToChannel === undefined) {\n          return true;\n        }\n        var source = new Float32Array(2);\n        try {\n          nativeAudioBuffer.copyFromChannel(source, 0, 0);\n        } catch (_unused) {\n          return false;\n        }\n        return true;\n      };\n    };\n\n    var createTestAudioContextCloseMethodSupport = function createTestAudioContextCloseMethodSupport(nativeAudioContextConstructor) {\n      return function () {\n        if (nativeAudioContextConstructor === null) {\n          return false;\n        }\n        // Try to check the prototype before constructing the AudioContext.\n        if (nativeAudioContextConstructor.prototype !== undefined && nativeAudioContextConstructor.prototype.close !== undefined) {\n          return true;\n        }\n        var audioContext = new nativeAudioContextConstructor();\n        var isAudioContextClosable = audioContext.close !== undefined;\n        try {\n          audioContext.close();\n        } catch (_unused) {\n          // Ignore errors.\n        }\n        return isAudioContextClosable;\n      };\n    };\n\n    /**\n     * Edge up to version 14, Firefox up to version 52, Safari up to version 9 and maybe other browsers\n     * did not refuse to decode invalid parameters with a TypeError.\n     */\n    var createTestAudioContextDecodeAudioDataMethodTypeErrorSupport = function createTestAudioContextDecodeAudioDataMethodTypeErrorSupport(nativeOfflineAudioContextConstructor) {\n      return function () {\n        if (nativeOfflineAudioContextConstructor === null) {\n          return Promise.resolve(false);\n        }\n        var offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n        // Bug #21: Safari does not support promises yet.\n        return new Promise(function (resolve) {\n          var isPending = true;\n          var resolvePromise = function resolvePromise(err) {\n            if (isPending) {\n              isPending = false;\n              offlineAudioContext.startRendering();\n              resolve(err instanceof TypeError);\n            }\n          };\n          var promise;\n          // Bug #26: Safari throws a synchronous error.\n          try {\n            promise = offlineAudioContext\n            // Bug #1: Safari requires a successCallback.\n            .decodeAudioData(null, function () {\n              // Ignore the success callback.\n            }, resolvePromise);\n          } catch (err) {\n            resolvePromise(err);\n          }\n          // Bug #21: Safari does not support promises yet.\n          if (promise !== undefined) {\n            // Bug #6: Chrome, Edge and Firefox do not call the errorCallback.\n            promise[\"catch\"](resolvePromise);\n          }\n        });\n      };\n    };\n\n    var createTestAudioContextOptionsSupport = function createTestAudioContextOptionsSupport(nativeAudioContextConstructor) {\n      return function () {\n        if (nativeAudioContextConstructor === null) {\n          return false;\n        }\n        var audioContext;\n        try {\n          audioContext = new nativeAudioContextConstructor({\n            latencyHint: 'balanced'\n          });\n        } catch (_unused) {\n          return false;\n        }\n        audioContext.close();\n        return true;\n      };\n    };\n\n    // Safari up to version 12.0 (but not v12.1) didn't return the destination in case it was an AudioNode.\n    var createTestAudioNodeConnectMethodSupport = function createTestAudioNodeConnectMethodSupport(nativeOfflineAudioContextConstructor) {\n      return function () {\n        if (nativeOfflineAudioContextConstructor === null) {\n          return false;\n        }\n        var nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n        var nativeGainNode = nativeOfflineAudioContext.createGain();\n        var isSupported = nativeGainNode.connect(nativeGainNode) === nativeGainNode;\n        nativeGainNode.disconnect(nativeGainNode);\n        return isSupported;\n      };\n    };\n\n    /**\n     * Chrome version 66 and 67 did not call the process() function of an AudioWorkletProcessor if it had no outputs. AudioWorklet support was\n     * enabled by default in version 66.\n     */\n    var createTestAudioWorkletProcessorNoOutputsSupport = function createTestAudioWorkletProcessorNoOutputsSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor) {\n      return /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var blob, messageChannel, offlineAudioContext, url, isCallingProcess, audioWorkletNode, oscillator;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!(nativeAudioWorkletNodeConstructor === null)) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\", true);\n            case 2:\n              if (!(nativeOfflineAudioContextConstructor === null)) {\n                _context.next = 4;\n                break;\n              }\n              return _context.abrupt(\"return\", false);\n            case 4:\n              blob = new Blob(['let c,p;class A extends AudioWorkletProcessor{constructor(){super();this.port.onmessage=(e)=>{p=e.data;p.onmessage=()=>{p.postMessage(c);p.close()};this.port.postMessage(0)}}process(){c=1}}registerProcessor(\"a\",A)'], {\n                type: 'application/javascript; charset=utf-8'\n              });\n              messageChannel = new MessageChannel(); // Bug #141: Safari does not support creating an OfflineAudioContext with less than 44100 Hz.\n              offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 44100);\n              url = URL.createObjectURL(blob);\n              isCallingProcess = false;\n              _context.prev = 9;\n              _context.next = 12;\n              return offlineAudioContext.audioWorklet.addModule(url);\n            case 12:\n              audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', {\n                numberOfOutputs: 0\n              });\n              oscillator = offlineAudioContext.createOscillator();\n              _context.next = 16;\n              return new Promise(function (resolve) {\n                audioWorkletNode.port.onmessage = function () {\n                  return resolve();\n                };\n                audioWorkletNode.port.postMessage(messageChannel.port2, [messageChannel.port2]);\n              });\n            case 16:\n              audioWorkletNode.port.onmessage = function () {\n                return isCallingProcess = true;\n              };\n              oscillator.connect(audioWorkletNode);\n              oscillator.start(0);\n              _context.next = 21;\n              return offlineAudioContext.startRendering();\n            case 21:\n              _context.next = 23;\n              return new Promise(function (resolve) {\n                messageChannel.port1.onmessage = function (_ref2) {\n                  var data = _ref2.data;\n                  return resolve(data === 1);\n                };\n                messageChannel.port1.postMessage(0);\n              });\n            case 23:\n              isCallingProcess = _context.sent;\n              _context.next = 28;\n              break;\n            case 26:\n              _context.prev = 26;\n              _context.t0 = _context[\"catch\"](9);\n            case 28:\n              _context.prev = 28;\n              messageChannel.port1.close();\n              URL.revokeObjectURL(url);\n              return _context.finish(28);\n            case 32:\n              return _context.abrupt(\"return\", isCallingProcess);\n            case 33:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[9, 26, 28, 32]]);\n      }));\n    };\n\n    // Bug #179: Firefox does not allow to transfer any buffer which has been passed to the process() method as an argument.\n    var createTestAudioWorkletProcessorPostMessageSupport = function createTestAudioWorkletProcessorPostMessageSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor) {\n      return /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var blob, offlineAudioContext, url, isEmittingMessageEvents, isEmittingProcessorErrorEvents, audioWorkletNode, oscillator;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!(nativeAudioWorkletNodeConstructor === null)) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\", true);\n            case 2:\n              if (!(nativeOfflineAudioContextConstructor === null)) {\n                _context.next = 4;\n                break;\n              }\n              return _context.abrupt(\"return\", false);\n            case 4:\n              blob = new Blob(['class A extends AudioWorkletProcessor{process(i){this.port.postMessage(i,[i[0][0].buffer])}}registerProcessor(\"a\",A)'], {\n                type: 'application/javascript; charset=utf-8'\n              }); // Bug #141: Safari does not support creating an OfflineAudioContext with less than 44100 Hz.\n              offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 44100);\n              url = URL.createObjectURL(blob);\n              isEmittingMessageEvents = false;\n              isEmittingProcessorErrorEvents = false;\n              _context.prev = 9;\n              _context.next = 12;\n              return offlineAudioContext.audioWorklet.addModule(url);\n            case 12:\n              audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', {\n                numberOfOutputs: 0\n              });\n              oscillator = offlineAudioContext.createOscillator();\n              audioWorkletNode.port.onmessage = function () {\n                return isEmittingMessageEvents = true;\n              };\n              audioWorkletNode.onprocessorerror = function () {\n                return isEmittingProcessorErrorEvents = true;\n              };\n              oscillator.connect(audioWorkletNode);\n              oscillator.start(0);\n              _context.next = 20;\n              return offlineAudioContext.startRendering();\n            case 20:\n              _context.next = 22;\n              return new Promise(function (resolve) {\n                return setTimeout(resolve);\n              });\n            case 22:\n              _context.next = 26;\n              break;\n            case 24:\n              _context.prev = 24;\n              _context.t0 = _context[\"catch\"](9);\n            case 26:\n              _context.prev = 26;\n              URL.revokeObjectURL(url);\n              return _context.finish(26);\n            case 29:\n              return _context.abrupt(\"return\", isEmittingMessageEvents && !isEmittingProcessorErrorEvents);\n            case 30:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[9, 24, 26, 29]]);\n      }));\n    };\n\n    /**\n     * Firefox up to version 69 did not throw an error when setting a different channelCount or channelCountMode.\n     */\n    var createTestChannelMergerNodeChannelCountSupport = function createTestChannelMergerNodeChannelCountSupport(nativeOfflineAudioContextConstructor) {\n      return function () {\n        if (nativeOfflineAudioContextConstructor === null) {\n          return false;\n        }\n        var offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n        var nativeChannelMergerNode = offlineAudioContext.createChannelMerger();\n        /**\n         * Bug #15: Safari does not return the default properties. It still needs to be patched. This test is supposed to test the support\n         * in other browsers.\n         */\n        if (nativeChannelMergerNode.channelCountMode === 'max') {\n          return true;\n        }\n        try {\n          nativeChannelMergerNode.channelCount = 2;\n        } catch (_unused) {\n          return true;\n        }\n        return false;\n      };\n    };\n\n    var createTestConstantSourceNodeAccurateSchedulingSupport = function createTestConstantSourceNodeAccurateSchedulingSupport(nativeOfflineAudioContextConstructor) {\n      return function () {\n        if (nativeOfflineAudioContextConstructor === null) {\n          return false;\n        }\n        var nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n        // Bug #62: Safari does not support ConstantSourceNodes.\n        if (nativeOfflineAudioContext.createConstantSource === undefined) {\n          return true;\n        }\n        var nativeConstantSourceNode = nativeOfflineAudioContext.createConstantSource();\n        /*\n         * @todo This is using bug #75 to detect bug #70. That works because both bugs were unique to\n         * the implementation of Firefox right now, but it could probably be done in a better way.\n         */\n        return nativeConstantSourceNode.offset.maxValue !== Number.POSITIVE_INFINITY;\n      };\n    };\n\n    // Opera up to version 57 did not allow to reassign the buffer of a ConvolverNode.\n    var createTestConvolverNodeBufferReassignabilitySupport = function createTestConvolverNodeBufferReassignabilitySupport(nativeOfflineAudioContextConstructor) {\n      return function () {\n        if (nativeOfflineAudioContextConstructor === null) {\n          return false;\n        }\n        var offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n        var nativeConvolverNode = offlineAudioContext.createConvolver();\n        nativeConvolverNode.buffer = offlineAudioContext.createBuffer(1, 1, offlineAudioContext.sampleRate);\n        try {\n          nativeConvolverNode.buffer = offlineAudioContext.createBuffer(1, 1, offlineAudioContext.sampleRate);\n        } catch (_unused) {\n          return false;\n        }\n        return true;\n      };\n    };\n\n    // Chrome up to version v80, Edge up to version v80 and Opera up to version v67 did not allow to set the channelCount property of a ConvolverNode to 1. They also did not allow to set the channelCountMode to 'explicit'.\n    var createTestConvolverNodeChannelCountSupport = function createTestConvolverNodeChannelCountSupport(nativeOfflineAudioContextConstructor) {\n      return function () {\n        if (nativeOfflineAudioContextConstructor === null) {\n          return false;\n        }\n        var offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n        var nativeConvolverNode = offlineAudioContext.createConvolver();\n        try {\n          nativeConvolverNode.channelCount = 1;\n        } catch (_unused) {\n          return false;\n        }\n        return true;\n      };\n    };\n\n    var createTestIsSecureContextSupport = function createTestIsSecureContextSupport(window) {\n      return function () {\n        return window !== null && window.hasOwnProperty('isSecureContext');\n      };\n    };\n\n    // Firefox up to version 68 did not throw an error when creating a MediaStreamAudioSourceNode with a mediaStream that had no audio track.\n    var createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport = function createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport(nativeAudioContextConstructor) {\n      return function () {\n        if (nativeAudioContextConstructor === null) {\n          return false;\n        }\n        var audioContext = new nativeAudioContextConstructor();\n        try {\n          audioContext.createMediaStreamSource(new MediaStream());\n          return false;\n        } catch (err) {\n          return true;\n        } finally {\n          audioContext.close();\n        }\n      };\n    };\n\n    var createTestOfflineAudioContextCurrentTimeSupport = function createTestOfflineAudioContextCurrentTimeSupport(createNativeGainNode, nativeOfflineAudioContextConstructor) {\n      return function () {\n        if (nativeOfflineAudioContextConstructor === null) {\n          return Promise.resolve(false);\n        }\n        var nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n        // Bug #48: Safari does not render an OfflineAudioContext without any connected node.\n        var gainNode = createNativeGainNode(nativeOfflineAudioContext, {\n          channelCount: 1,\n          channelCountMode: 'explicit',\n          channelInterpretation: 'discrete',\n          gain: 0\n        });\n        // Bug #21: Safari does not support promises yet.\n        return new Promise(function (resolve) {\n          nativeOfflineAudioContext.oncomplete = function () {\n            gainNode.disconnect();\n            resolve(nativeOfflineAudioContext.currentTime !== 0);\n          };\n          nativeOfflineAudioContext.startRendering();\n        });\n      };\n    };\n\n    /**\n     * Firefox up to version 62 did not kick off the processing of the StereoPannerNode if the value of pan was zero.\n     */\n    var createTestStereoPannerNodeDefaultValueSupport = function createTestStereoPannerNodeDefaultValueSupport(nativeOfflineAudioContextConstructor) {\n      return function () {\n        if (nativeOfflineAudioContextConstructor === null) {\n          return Promise.resolve(false);\n        }\n        var nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n        /*\n         * Bug #105: Safari does not support the StereoPannerNode. Therefore the returned value should normally be false but the faker does\n         * support the tested behaviour.\n         */\n        if (nativeOfflineAudioContext.createStereoPanner === undefined) {\n          return Promise.resolve(true);\n        }\n        // Bug #62: Safari does not support ConstantSourceNodes.\n        if (nativeOfflineAudioContext.createConstantSource === undefined) {\n          return Promise.resolve(true);\n        }\n        var constantSourceNode = nativeOfflineAudioContext.createConstantSource();\n        var stereoPanner = nativeOfflineAudioContext.createStereoPanner();\n        constantSourceNode.channelCount = 1;\n        constantSourceNode.offset.value = 1;\n        stereoPanner.channelCount = 1;\n        constantSourceNode.start();\n        constantSourceNode.connect(stereoPanner).connect(nativeOfflineAudioContext.destination);\n        return nativeOfflineAudioContext.startRendering().then(function (buffer) {\n          return buffer.getChannelData(0)[0] !== 1;\n        });\n      };\n    };\n\n    var createUnknownError = function createUnknownError() {\n      return new DOMException('', 'UnknownError');\n    };\n\n    function ownKeys$3(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\n    function _objectSpread$3(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$3(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$3(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n    function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n    function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\n    var DEFAULT_OPTIONS = {\n      channelCount: 2,\n      channelCountMode: 'max',\n      channelInterpretation: 'speakers',\n      curve: null,\n      oversample: 'none'\n    };\n    var createWaveShaperNodeConstructor = function createWaveShaperNodeConstructor(audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) {\n      return /*#__PURE__*/function (_audioNodeConstructor) {\n        function WaveShaperNode(context, options) {\n          var _this;\n          _classCallCheck(this, WaveShaperNode);\n          var nativeContext = getNativeContext(context);\n          var mergedOptions = _objectSpread$3(_objectSpread$3({}, DEFAULT_OPTIONS), options);\n          var nativeWaveShaperNode = createNativeWaveShaperNode(nativeContext, mergedOptions);\n          var isOffline = isNativeOfflineAudioContext(nativeContext);\n          var waveShaperNodeRenderer = isOffline ? createWaveShaperNodeRenderer() : null;\n          // @todo Add a mechanism to only switch a WaveShaperNode to active while it is connected.\n          _this = _callSuper(this, WaveShaperNode, [context, true, nativeWaveShaperNode, waveShaperNodeRenderer]);\n          _this._isCurveNullified = false;\n          _this._nativeWaveShaperNode = nativeWaveShaperNode;\n          // @todo Determine a meaningful tail-time instead of just using one second.\n          setAudioNodeTailTime(_this, 1);\n          return _this;\n        }\n        _inherits(WaveShaperNode, _audioNodeConstructor);\n        return _createClass(WaveShaperNode, [{\n          key: \"curve\",\n          get: function get() {\n            if (this._isCurveNullified) {\n              return null;\n            }\n            return this._nativeWaveShaperNode.curve;\n          },\n          set: function set(value) {\n            // Bug #103: Safari does not allow to set the curve to null.\n            if (value === null) {\n              this._isCurveNullified = true;\n              this._nativeWaveShaperNode.curve = new Float32Array([0, 0]);\n            } else {\n              // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n              // Bug #104: Chrome and Edge will throw an InvalidAccessError when the curve has less than two samples.\n              if (value.length < 2) {\n                throw createInvalidStateError();\n              }\n              this._isCurveNullified = false;\n              this._nativeWaveShaperNode.curve = value;\n            }\n          }\n        }, {\n          key: \"oversample\",\n          get: function get() {\n            return this._nativeWaveShaperNode.oversample;\n          },\n          set: function set(value) {\n            this._nativeWaveShaperNode.oversample = value;\n          }\n        }]);\n      }(audioNodeConstructor);\n    };\n\n    var createWaveShaperNodeRendererFactory = function createWaveShaperNodeRendererFactory(createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode) {\n      return function () {\n        var renderedNativeWaveShaperNodes = new WeakMap();\n        var createWaveShaperNode = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(proxy, nativeOfflineAudioContext) {\n            var nativeWaveShaperNode, nativeWaveShaperNodeIsOwnedByContext, options;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  nativeWaveShaperNode = getNativeAudioNode(proxy); // If the initially used nativeWaveShaperNode was not constructed on the same OfflineAudioContext it needs to be created again.\n                  nativeWaveShaperNodeIsOwnedByContext = isOwnedByContext(nativeWaveShaperNode, nativeOfflineAudioContext);\n                  if (!nativeWaveShaperNodeIsOwnedByContext) {\n                    options = {\n                      channelCount: nativeWaveShaperNode.channelCount,\n                      channelCountMode: nativeWaveShaperNode.channelCountMode,\n                      channelInterpretation: nativeWaveShaperNode.channelInterpretation,\n                      curve: nativeWaveShaperNode.curve,\n                      oversample: nativeWaveShaperNode.oversample\n                    };\n                    nativeWaveShaperNode = createNativeWaveShaperNode(nativeOfflineAudioContext, options);\n                  }\n                  renderedNativeWaveShaperNodes.set(nativeOfflineAudioContext, nativeWaveShaperNode);\n                  if (!isNativeAudioNodeFaker(nativeWaveShaperNode)) {\n                    _context.next = 9;\n                    break;\n                  }\n                  _context.next = 7;\n                  return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode.inputs[0]);\n                case 7:\n                  _context.next = 11;\n                  break;\n                case 9:\n                  _context.next = 11;\n                  return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode);\n                case 11:\n                  return _context.abrupt(\"return\", nativeWaveShaperNode);\n                case 12:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _callee);\n          }));\n          return function createWaveShaperNode(_x, _x2) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n        return {\n          render: function render(proxy, nativeOfflineAudioContext) {\n            var renderedNativeWaveShaperNode = renderedNativeWaveShaperNodes.get(nativeOfflineAudioContext);\n            if (renderedNativeWaveShaperNode !== undefined) {\n              return Promise.resolve(renderedNativeWaveShaperNode);\n            }\n            return createWaveShaperNode(proxy, nativeOfflineAudioContext);\n          }\n        };\n      };\n    };\n\n    var createWindow = function createWindow() {\n      return typeof window === 'undefined' ? null : window;\n    };\n\n    var createWrapAudioBufferCopyChannelMethods = function createWrapAudioBufferCopyChannelMethods(convertNumberToUnsignedLong, createIndexSizeError) {\n      return function (audioBuffer) {\n        audioBuffer.copyFromChannel = function (destination, channelNumberAsNumber) {\n          var bufferOffsetAsNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n          var bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n          var channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n          if (channelNumber >= audioBuffer.numberOfChannels) {\n            throw createIndexSizeError();\n          }\n          var audioBufferLength = audioBuffer.length;\n          var channelData = audioBuffer.getChannelData(channelNumber);\n          var destinationLength = destination.length;\n          for (var i = bufferOffset < 0 ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < destinationLength; i += 1) {\n            destination[i] = channelData[i + bufferOffset];\n          }\n        };\n        audioBuffer.copyToChannel = function (source, channelNumberAsNumber) {\n          var bufferOffsetAsNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n          var bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n          var channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n          if (channelNumber >= audioBuffer.numberOfChannels) {\n            throw createIndexSizeError();\n          }\n          var audioBufferLength = audioBuffer.length;\n          var channelData = audioBuffer.getChannelData(channelNumber);\n          var sourceLength = source.length;\n          for (var i = bufferOffset < 0 ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < sourceLength; i += 1) {\n            channelData[i + bufferOffset] = source[i];\n          }\n        };\n      };\n    };\n\n    var createWrapAudioBufferCopyChannelMethodsOutOfBounds = function createWrapAudioBufferCopyChannelMethodsOutOfBounds(convertNumberToUnsignedLong) {\n      return function (audioBuffer) {\n        audioBuffer.copyFromChannel = function (copyFromChannel) {\n          return function (destination, channelNumberAsNumber) {\n            var bufferOffsetAsNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n            var bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n            var channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n            if (bufferOffset < audioBuffer.length) {\n              return copyFromChannel.call(audioBuffer, destination, channelNumber, bufferOffset);\n            }\n          };\n        }(audioBuffer.copyFromChannel);\n        audioBuffer.copyToChannel = function (copyToChannel) {\n          return function (source, channelNumberAsNumber) {\n            var bufferOffsetAsNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n            var bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n            var channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n            if (bufferOffset < audioBuffer.length) {\n              return copyToChannel.call(audioBuffer, source, channelNumber, bufferOffset);\n            }\n          };\n        }(audioBuffer.copyToChannel);\n      };\n    };\n\n    var createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer = function createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer(overwriteAccessors) {\n      return function (nativeAudioBufferSourceNode, nativeContext) {\n        var nullifiedBuffer = nativeContext.createBuffer(1, 1, 44100);\n        if (nativeAudioBufferSourceNode.buffer === null) {\n          nativeAudioBufferSourceNode.buffer = nullifiedBuffer;\n        }\n        overwriteAccessors(nativeAudioBufferSourceNode, 'buffer', function (get) {\n          return function () {\n            var value = get.call(nativeAudioBufferSourceNode);\n            return value === nullifiedBuffer ? null : value;\n          };\n        }, function (set) {\n          return function (value) {\n            return set.call(nativeAudioBufferSourceNode, value === null ? nullifiedBuffer : value);\n          };\n        });\n      };\n    };\n\n    var createWrapChannelMergerNode = function createWrapChannelMergerNode(createInvalidStateError, monitorConnections) {\n      return function (nativeContext, channelMergerNode) {\n        // Bug #15: Safari does not return the default properties.\n        channelMergerNode.channelCount = 1;\n        channelMergerNode.channelCountMode = 'explicit';\n        // Bug #16: Safari does not throw an error when setting a different channelCount or channelCountMode.\n        Object.defineProperty(channelMergerNode, 'channelCount', {\n          get: function get() {\n            return 1;\n          },\n          set: function set() {\n            throw createInvalidStateError();\n          }\n        });\n        Object.defineProperty(channelMergerNode, 'channelCountMode', {\n          get: function get() {\n            return 'explicit';\n          },\n          set: function set() {\n            throw createInvalidStateError();\n          }\n        });\n        // Bug #20: Safari requires a connection of any kind to treat the input signal correctly.\n        var audioBufferSourceNode = nativeContext.createBufferSource();\n        var whenConnected = function whenConnected() {\n          var length = channelMergerNode.numberOfInputs;\n          for (var i = 0; i < length; i += 1) {\n            audioBufferSourceNode.connect(channelMergerNode, 0, i);\n          }\n        };\n        var whenDisconnected = function whenDisconnected() {\n          return audioBufferSourceNode.disconnect(channelMergerNode);\n        };\n        monitorConnections(channelMergerNode, whenConnected, whenDisconnected);\n      };\n    };\n\n    var getFirstSample = function getFirstSample(audioBuffer, buffer, channelNumber) {\n      // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n      if (audioBuffer.copyFromChannel === undefined) {\n        return audioBuffer.getChannelData(channelNumber)[0];\n      }\n      audioBuffer.copyFromChannel(buffer, channelNumber);\n      return buffer[0];\n    };\n\n    var isDCCurve = function isDCCurve(curve) {\n      if (curve === null) {\n        return false;\n      }\n      var length = curve.length;\n      if (length % 2 !== 0) {\n        return curve[Math.floor(length / 2)] !== 0;\n      }\n      return curve[length / 2 - 1] + curve[length / 2] !== 0;\n    };\n\n    var overwriteAccessors = function overwriteAccessors(object, property, createGetter, createSetter) {\n      var prototype = object;\n      while (!prototype.hasOwnProperty(property)) {\n        prototype = Object.getPrototypeOf(prototype);\n      }\n      var _Object$getOwnPropert = Object.getOwnPropertyDescriptor(prototype, property),\n        get = _Object$getOwnPropert.get,\n        set = _Object$getOwnPropert.set;\n      Object.defineProperty(object, property, {\n        get: createGetter(get),\n        set: createSetter(set)\n      });\n    };\n\n    function ownKeys$2(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\n    function _objectSpread$2(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n    var sanitizeAudioWorkletNodeOptions = function sanitizeAudioWorkletNodeOptions(options) {\n      return _objectSpread$2(_objectSpread$2({}, options), {}, {\n        outputChannelCount: options.outputChannelCount !== undefined ? options.outputChannelCount : options.numberOfInputs === 1 && options.numberOfOutputs === 1 ?\n        /*\n         * Bug #61: This should be the computedNumberOfChannels, but unfortunately that is almost impossible to fake. That's why\n         * the channelCountMode is required to be 'explicit' as long as there is not a native implementation in every browser. That\n         * makes sure the computedNumberOfChannels is equivilant to the channelCount which makes it much easier to compute.\n         */\n        [options.channelCount] : Array.from({\n          length: options.numberOfOutputs\n        }, function () {\n          return 1;\n        })\n      });\n    };\n\n    function ownKeys$1(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\n    function _objectSpread$1(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n    var sanitizeChannelSplitterOptions = function sanitizeChannelSplitterOptions(options) {\n      return _objectSpread$1(_objectSpread$1({}, options), {}, {\n        channelCount: options.numberOfOutputs\n      });\n    };\n\n    function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\n    function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\n    var sanitizePeriodicWaveOptions = function sanitizePeriodicWaveOptions(options) {\n      var imag = options.imag,\n        real = options.real;\n      if (imag === undefined) {\n        if (real === undefined) {\n          return _objectSpread(_objectSpread({}, options), {}, {\n            imag: [0, 0],\n            real: [0, 0]\n          });\n        }\n        return _objectSpread(_objectSpread({}, options), {}, {\n          imag: Array.from(real, function () {\n            return 0;\n          }),\n          real: real\n        });\n      }\n      if (real === undefined) {\n        return _objectSpread(_objectSpread({}, options), {}, {\n          imag: imag,\n          real: Array.from(imag, function () {\n            return 0;\n          })\n        });\n      }\n      return _objectSpread(_objectSpread({}, options), {}, {\n        imag: imag,\n        real: real\n      });\n    };\n\n    var _setValueAtTimeUntilPossible = function setValueAtTimeUntilPossible(audioParam, value, startTime) {\n      try {\n        audioParam.setValueAtTime(value, startTime);\n      } catch (err) {\n        if (err.code !== 9) {\n          throw err;\n        }\n        _setValueAtTimeUntilPossible(audioParam, value, startTime + 1e-7);\n      }\n    };\n\n    var testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport = function testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport(nativeContext) {\n      var nativeAudioBufferSourceNode = nativeContext.createBufferSource();\n      nativeAudioBufferSourceNode.start();\n      try {\n        nativeAudioBufferSourceNode.start();\n      } catch (_unused) {\n        return true;\n      }\n      return false;\n    };\n\n    var testAudioBufferSourceNodeStartMethodOffsetClampingSupport = function testAudioBufferSourceNodeStartMethodOffsetClampingSupport(nativeContext) {\n      var nativeAudioBufferSourceNode = nativeContext.createBufferSource();\n      var nativeAudioBuffer = nativeContext.createBuffer(1, 1, 44100);\n      nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;\n      try {\n        nativeAudioBufferSourceNode.start(0, 1);\n      } catch (_unused) {\n        return false;\n      }\n      return true;\n    };\n\n    var testAudioBufferSourceNodeStopMethodNullifiedBufferSupport = function testAudioBufferSourceNodeStopMethodNullifiedBufferSupport(nativeContext) {\n      var nativeAudioBufferSourceNode = nativeContext.createBufferSource();\n      nativeAudioBufferSourceNode.start();\n      try {\n        nativeAudioBufferSourceNode.stop();\n      } catch (_unused) {\n        return false;\n      }\n      return true;\n    };\n\n    var testAudioScheduledSourceNodeStartMethodNegativeParametersSupport = function testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext) {\n      var nativeAudioBufferSourceNode = nativeContext.createOscillator();\n      try {\n        nativeAudioBufferSourceNode.start(-1);\n      } catch (err) {\n        return err instanceof RangeError;\n      }\n      return false;\n    };\n\n    var testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport = function testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext) {\n      var nativeAudioBuffer = nativeContext.createBuffer(1, 1, 44100);\n      var nativeAudioBufferSourceNode = nativeContext.createBufferSource();\n      nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;\n      nativeAudioBufferSourceNode.start();\n      nativeAudioBufferSourceNode.stop();\n      try {\n        nativeAudioBufferSourceNode.stop();\n        return true;\n      } catch (_unused) {\n        return false;\n      }\n    };\n\n    var testAudioScheduledSourceNodeStopMethodNegativeParametersSupport = function testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext) {\n      var nativeAudioBufferSourceNode = nativeContext.createOscillator();\n      try {\n        nativeAudioBufferSourceNode.stop(-1);\n      } catch (err) {\n        return err instanceof RangeError;\n      }\n      return false;\n    };\n\n    var testAudioWorkletNodeOptionsClonability = function testAudioWorkletNodeOptionsClonability(audioWorkletNodeOptions) {\n      var _MessageChannel = new MessageChannel(),\n        port1 = _MessageChannel.port1,\n        port2 = _MessageChannel.port2;\n      try {\n        // This will throw an error if the audioWorkletNodeOptions are not clonable.\n        port1.postMessage(audioWorkletNodeOptions);\n      } finally {\n        port1.close();\n        port2.close();\n      }\n    };\n\n    /*\n     * Bug #122: Edge up to version v18 did not allow to construct a DOMException'. It also had a couple more bugs but since this is easy to\n     * test it's used here as a placeholder.\n     *\n     * Bug #27: Edge up to version v18 did reject an invalid arrayBuffer passed to decodeAudioData() with a DOMException.\n     *\n     * Bug #50: Edge up to version v18 did not allow to create AudioNodes on a closed context.\n     *\n     * Bug #57: Edge up to version v18 did not throw an error when assigning the type of an OscillatorNode to 'custom'.\n     *\n     * Bug #63: Edge up to version v18 did not expose the mediaElement property of a MediaElementAudioSourceNode.\n     *\n     * Bug #64: Edge up to version v18 did not support the MediaStreamAudioDestinationNode.\n     *\n     * Bug #71: Edge up to version v18 did not allow to set the buffer of an AudioBufferSourceNode to null.\n     *\n     * Bug #93: Edge up to version v18 did set the sampleRate of an AudioContext to zero when it was closed.\n     *\n     * Bug #101: Edge up to version v18 refused to execute decodeAudioData() on a closed context.\n     *\n     * Bug #106: Edge up to version v18 did not expose the maxValue and minValue properties of the pan AudioParam of a StereoPannerNode.\n     *\n     * Bug #110: Edge up to version v18 did not expose the maxValue and minValue properties of the attack, knee, ratio, release and threshold AudioParams of a DynamicsCompressorNode.\n     *\n     * Bug #123: Edge up to version v18 did not support HRTF as the panningModel for a PannerNode.\n     *\n     * Bug #145: Edge up to version v18 did throw an IndexSizeError when an OfflineAudioContext was created with a sampleRate of zero.\n     *\n     * Bug #161: Edge up to version v18 did not expose the maxValue and minValue properties of the delayTime AudioParam of a DelayNode.\n     */\n    var testDomExceptionConstructorSupport = function testDomExceptionConstructorSupport() {\n      try {\n        new DOMException(); // tslint:disable-line:no-unused-expression\n      } catch (_unused) {\n        return false;\n      }\n      return true;\n    };\n\n    // Safari at version 11 did not support transferables.\n    var testTransferablesSupport = function testTransferablesSupport() {\n      return new Promise(function (resolve) {\n        var arrayBuffer = new ArrayBuffer(0);\n        var _MessageChannel = new MessageChannel(),\n          port1 = _MessageChannel.port1,\n          port2 = _MessageChannel.port2;\n        port1.onmessage = function (_ref) {\n          var data = _ref.data;\n          return resolve(data !== null);\n        };\n        port2.postMessage(arrayBuffer, [arrayBuffer]);\n      });\n    };\n\n    var wrapAudioBufferSourceNodeStartMethodOffsetClamping = function wrapAudioBufferSourceNodeStartMethodOffsetClamping(nativeAudioBufferSourceNode) {\n      nativeAudioBufferSourceNode.start = function (start) {\n        return function () {\n          var when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n          var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n          var duration = arguments.length > 2 ? arguments[2] : undefined;\n          var buffer = nativeAudioBufferSourceNode.buffer;\n          // Bug #154: Safari does not clamp the offset if it is equal to or greater than the duration of the buffer.\n          var clampedOffset = buffer === null ? offset : Math.min(buffer.duration, offset);\n          // Bug #155: Safari does not handle the offset correctly if it would cause the buffer to be not be played at all.\n          if (buffer !== null && clampedOffset > buffer.duration - 0.5 / nativeAudioBufferSourceNode.context.sampleRate) {\n            start.call(nativeAudioBufferSourceNode, when, 0, 0);\n          } else {\n            start.call(nativeAudioBufferSourceNode, when, clampedOffset, duration);\n          }\n        };\n      }(nativeAudioBufferSourceNode.start);\n    };\n\n    var wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls = function wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeAudioScheduledSourceNode, nativeContext) {\n      var nativeGainNode = nativeContext.createGain();\n      nativeAudioScheduledSourceNode.connect(nativeGainNode);\n      var disconnectGainNode = function (disconnect) {\n        return function () {\n          // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.\n          disconnect.call(nativeAudioScheduledSourceNode, nativeGainNode);\n          nativeAudioScheduledSourceNode.removeEventListener('ended', disconnectGainNode);\n        };\n      }(nativeAudioScheduledSourceNode.disconnect);\n      nativeAudioScheduledSourceNode.addEventListener('ended', disconnectGainNode);\n      interceptConnections(nativeAudioScheduledSourceNode, nativeGainNode);\n      nativeAudioScheduledSourceNode.stop = function (stop) {\n        var isStopped = false;\n        return function () {\n          var when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n          if (isStopped) {\n            try {\n              stop.call(nativeAudioScheduledSourceNode, when);\n            } catch (_unused) {\n              nativeGainNode.gain.setValueAtTime(0, when);\n            }\n          } else {\n            stop.call(nativeAudioScheduledSourceNode, when);\n            isStopped = true;\n          }\n        };\n      }(nativeAudioScheduledSourceNode.stop);\n    };\n\n    var wrapEventListener = function wrapEventListener(target, eventListener) {\n      return function (event) {\n        var descriptor = {\n          value: target\n        };\n        Object.defineProperties(event, {\n          currentTarget: descriptor,\n          target: descriptor\n        });\n        if (typeof eventListener === 'function') {\n          return eventListener.call(target, event);\n        }\n        return eventListener.handleEvent.call(target, event);\n      };\n    };\n\n    var addActiveInputConnectionToAudioNode = createAddActiveInputConnectionToAudioNode(insertElementInSet);\n    var addPassiveInputConnectionToAudioNode = createAddPassiveInputConnectionToAudioNode(insertElementInSet);\n    var deleteActiveInputConnectionToAudioNode = createDeleteActiveInputConnectionToAudioNode(pickElementFromSet);\n    var audioNodeTailTimeStore = new WeakMap();\n    var getAudioNodeTailTime = createGetAudioNodeTailTime(audioNodeTailTimeStore);\n    var cacheTestResult = createCacheTestResult(new Map(), new WeakMap());\n    var window$1 = createWindow();\n    var createNativeAnalyserNode = createNativeAnalyserNodeFactory(cacheTestResult, createIndexSizeError);\n    var getAudioNodeRenderer = createGetAudioNodeRenderer(getAudioNodeConnections);\n    var renderInputsOfAudioNode = createRenderInputsOfAudioNode(getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle);\n    var createAnalyserNodeRenderer = createAnalyserNodeRendererFactory(createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode);\n    var getNativeContext = createGetNativeContext(CONTEXT_STORE);\n    var nativeOfflineAudioContextConstructor = createNativeOfflineAudioContextConstructor(window$1);\n    var isNativeOfflineAudioContext = createIsNativeOfflineAudioContext(nativeOfflineAudioContextConstructor);\n    var audioParamAudioNodeStore = new WeakMap();\n    var eventTargetConstructor = createEventTargetConstructor(wrapEventListener);\n    var nativeAudioContextConstructor = createNativeAudioContextConstructor(window$1);\n    var isNativeAudioContext = createIsNativeAudioContext(nativeAudioContextConstructor);\n    var isNativeAudioNode = createIsNativeAudioNode(window$1);\n    var isNativeAudioParam = createIsNativeAudioParam(window$1);\n    var nativeAudioWorkletNodeConstructor = createNativeAudioWorkletNodeConstructor(window$1);\n    var audioNodeConstructor = createAudioNodeConstructor(createAddAudioNodeConnections(AUDIO_NODE_CONNECTIONS_STORE), createAddConnectionToAudioNode(addActiveInputConnectionToAudioNode, addPassiveInputConnectionToAudioNode, connectNativeAudioNodeToNativeAudioNode, deleteActiveInputConnectionToAudioNode, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getAudioNodeTailTime, getEventListenersOfAudioNode, getNativeAudioNode, insertElementInSet, isActiveAudioNode, isPartOfACycle, isPassiveAudioNode), cacheTestResult, createIncrementCycleCounterFactory(CYCLE_COUNTERS, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, isActiveAudioNode), createIndexSizeError, createInvalidAccessError, createNotSupportedError, createDecrementCycleCounter(connectNativeAudioNodeToNativeAudioNode, CYCLE_COUNTERS, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, getNativeContext, isActiveAudioNode, isNativeOfflineAudioContext), createDetectCycles(audioParamAudioNodeStore, getAudioNodeConnections, getValueForKey), eventTargetConstructor, getNativeContext, isNativeAudioContext, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor);\n    var analyserNodeConstructor = createAnalyserNodeConstructor(audioNodeConstructor, createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext);\n    var audioBufferStore = new WeakSet();\n    var nativeAudioBufferConstructor = createNativeAudioBufferConstructor(window$1);\n    var convertNumberToUnsignedLong = createConvertNumberToUnsignedLong(new Uint32Array(1));\n    var wrapAudioBufferCopyChannelMethods = createWrapAudioBufferCopyChannelMethods(convertNumberToUnsignedLong, createIndexSizeError);\n    var wrapAudioBufferCopyChannelMethodsOutOfBounds = createWrapAudioBufferCopyChannelMethodsOutOfBounds(convertNumberToUnsignedLong);\n    var audioBufferConstructor = createAudioBufferConstructor(audioBufferStore, cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, createTestAudioBufferConstructorSupport(nativeAudioBufferConstructor), wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\n    var addSilentConnection = createAddSilentConnection(createNativeGainNode);\n    var renderInputsOfAudioParam = createRenderInputsOfAudioParam(getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle);\n    var connectAudioParam = createConnectAudioParam(renderInputsOfAudioParam);\n    var createNativeAudioBufferSourceNode = createNativeAudioBufferSourceNodeFactory(addSilentConnection, cacheTestResult, testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, testAudioBufferSourceNodeStartMethodOffsetClampingSupport, testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClamping, createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer(overwriteAccessors), wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);\n    var renderAutomation = createRenderAutomation(createGetAudioParamRenderer(getAudioParamConnections), renderInputsOfAudioParam);\n    var createAudioBufferSourceNodeRenderer = createAudioBufferSourceNodeRendererFactory(connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\n    var createAudioParam = createAudioParamFactory(createAddAudioParamConnections(AUDIO_PARAM_CONNECTIONS_STORE), audioParamAudioNodeStore, AUDIO_PARAM_STORE, createAudioParamRenderer, automationEvents.createCancelAndHoldAutomationEvent, automationEvents.createCancelScheduledValuesAutomationEvent, automationEvents.createExponentialRampToValueAutomationEvent, automationEvents.createLinearRampToValueAutomationEvent, automationEvents.createSetTargetAutomationEvent, automationEvents.createSetValueAutomationEvent, automationEvents.createSetValueCurveAutomationEvent, nativeAudioContextConstructor, _setValueAtTimeUntilPossible);\n    var audioBufferSourceNodeConstructor = createAudioBufferSourceNodeConstructor(audioNodeConstructor, createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\n    var audioDestinationNodeConstructor = createAudioDestinationNodeConstructor(audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNodeFactory(createNativeGainNode, overwriteAccessors), getNativeContext, isNativeOfflineAudioContext, renderInputsOfAudioNode);\n    var createBiquadFilterNodeRenderer = createBiquadFilterNodeRendererFactory(connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\n    var setAudioNodeTailTime = createSetAudioNodeTailTime(audioNodeTailTimeStore);\n    var biquadFilterNodeConstructor = createBiquadFilterNodeConstructor(audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\n    var monitorConnections = createMonitorConnections(insertElementInSet, isNativeAudioNode);\n    var wrapChannelMergerNode = createWrapChannelMergerNode(createInvalidStateError, monitorConnections);\n    var createNativeChannelMergerNode = createNativeChannelMergerNodeFactory(nativeAudioContextConstructor, wrapChannelMergerNode);\n    var createChannelMergerNodeRenderer = createChannelMergerNodeRendererFactory(createNativeChannelMergerNode, getNativeAudioNode, renderInputsOfAudioNode);\n    var channelMergerNodeConstructor = createChannelMergerNodeConstructor(audioNodeConstructor, createChannelMergerNodeRenderer, createNativeChannelMergerNode, getNativeContext, isNativeOfflineAudioContext);\n    var createChannelSplitterNodeRenderer = createChannelSplitterNodeRendererFactory(createNativeChannelSplitterNode, getNativeAudioNode, renderInputsOfAudioNode);\n    var channelSplitterNodeConstructor = createChannelSplitterNodeConstructor(audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext, sanitizeChannelSplitterOptions);\n    var createNativeConstantSourceNodeFaker = createNativeConstantSourceNodeFakerFactory(addSilentConnection, createNativeAudioBufferSourceNode, createNativeGainNode, monitorConnections);\n    var createNativeConstantSourceNode = createNativeConstantSourceNodeFactory(addSilentConnection, cacheTestResult, createNativeConstantSourceNodeFaker, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport);\n    var createConstantSourceNodeRenderer = createConstantSourceNodeRendererFactory(connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\n    var constantSourceNodeConstructor = createConstantSourceNodeConstructor(audioNodeConstructor, createAudioParam, createConstantSourceNodeRenderer, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\n    var createNativeConvolverNode = createNativeConvolverNodeFactory(createNotSupportedError, overwriteAccessors);\n    var createConvolverNodeRenderer = createConvolverNodeRendererFactory(createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode);\n    var convolverNodeConstructor = createConvolverNodeConstructor(audioNodeConstructor, createConvolverNodeRenderer, createNativeConvolverNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\n    var createDelayNodeRenderer = createDelayNodeRendererFactory(connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\n    var delayNodeConstructor = createDelayNodeConstructor(audioNodeConstructor, createAudioParam, createDelayNodeRenderer, createNativeDelayNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\n    var createNativeDynamicsCompressorNode = createNativeDynamicsCompressorNodeFactory(createNotSupportedError);\n    var createDynamicsCompressorNodeRenderer = createDynamicsCompressorNodeRendererFactory(connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\n    var dynamicsCompressorNodeConstructor = createDynamicsCompressorNodeConstructor(audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\n    var createGainNodeRenderer = createGainNodeRendererFactory(connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\n    var gainNodeConstructor = createGainNodeConstructor(audioNodeConstructor, createAudioParam, createGainNodeRenderer, createNativeGainNode, getNativeContext, isNativeOfflineAudioContext);\n    var createNativeIIRFilterNodeFaker = createNativeIIRFilterNodeFakerFactory(createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError);\n    var renderNativeOfflineAudioContext = createRenderNativeOfflineAudioContext(cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, createTestOfflineAudioContextCurrentTimeSupport(createNativeGainNode, nativeOfflineAudioContextConstructor));\n    var createIIRFilterNodeRenderer = createIIRFilterNodeRendererFactory(createNativeAudioBufferSourceNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\n    var createNativeIIRFilterNode = createNativeIIRFilterNodeFactory(createNativeIIRFilterNodeFaker);\n    var iIRFilterNodeConstructor = createIIRFilterNodeConstructor(audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\n    var createAudioListener = createAudioListenerFactory(createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, createNotSupportedError, getFirstSample, isNativeOfflineAudioContext, overwriteAccessors);\n    var unrenderedAudioWorkletNodeStore = new WeakMap();\n    var minimalBaseAudioContextConstructor = createMinimalBaseAudioContextConstructor(audioDestinationNodeConstructor, createAudioListener, eventTargetConstructor, isNativeOfflineAudioContext, unrenderedAudioWorkletNodeStore, wrapEventListener);\n    var createNativeOscillatorNode = createNativeOscillatorNodeFactory(addSilentConnection, cacheTestResult, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);\n    var createOscillatorNodeRenderer = createOscillatorNodeRendererFactory(connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\n    var oscillatorNodeConstructor = createOscillatorNodeConstructor(audioNodeConstructor, createAudioParam, createNativeOscillatorNode, createOscillatorNodeRenderer, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\n    var createConnectedNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNodeFactory(createNativeAudioBufferSourceNode);\n    var createNativeWaveShaperNodeFaker = createNativeWaveShaperNodeFakerFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeGainNode, isDCCurve, monitorConnections);\n    var createNativeWaveShaperNode = createNativeWaveShaperNodeFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeWaveShaperNodeFaker, isDCCurve, monitorConnections, nativeAudioContextConstructor, overwriteAccessors);\n    var createNativePannerNodeFaker = createNativePannerNodeFakerFactory(connectNativeAudioNodeToNativeAudioNode, createInvalidStateError, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError, disconnectNativeAudioNodeFromNativeAudioNode, getFirstSample, monitorConnections);\n    var createNativePannerNode = createNativePannerNodeFactory(createNativePannerNodeFaker);\n    var createPannerNodeRenderer = createPannerNodeRendererFactory(connectAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeGainNode, createNativePannerNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\n    var pannerNodeConstructor = createPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativePannerNode, createPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\n    var createNativePeriodicWave = createNativePeriodicWaveFactory(createIndexSizeError);\n    var periodicWaveConstructor = createPeriodicWaveConstructor(createNativePeriodicWave, getNativeContext, new WeakSet(), sanitizePeriodicWaveOptions);\n    var nativeStereoPannerNodeFakerFactory = createNativeStereoPannerNodeFakerFactory(createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError, monitorConnections);\n    var createNativeStereoPannerNode = createNativeStereoPannerNodeFactory(nativeStereoPannerNodeFakerFactory, createNotSupportedError);\n    var createStereoPannerNodeRenderer = createStereoPannerNodeRendererFactory(connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\n    var stereoPannerNodeConstructor = createStereoPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext);\n    var createWaveShaperNodeRenderer = createWaveShaperNodeRendererFactory(createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode);\n    var waveShaperNodeConstructor = createWaveShaperNodeConstructor(audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\n    var isSecureContext = createIsSecureContext(window$1);\n    var exposeCurrentFrameAndCurrentTime = createExposeCurrentFrameAndCurrentTime(window$1);\n    var backupOfflineAudioContextStore = new WeakMap();\n    var getOrCreateBackupOfflineAudioContext = createGetOrCreateBackupOfflineAudioContext(backupOfflineAudioContextStore, nativeOfflineAudioContextConstructor);\n    // The addAudioWorkletModule() function is only available in a SecureContext.\n    var addAudioWorkletModule = isSecureContext ? createAddAudioWorkletModule(cacheTestResult, createNotSupportedError, createEvaluateSource(window$1), exposeCurrentFrameAndCurrentTime, createFetchSource(createAbortError), getNativeContext, getOrCreateBackupOfflineAudioContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, new WeakMap(), new WeakMap(), createTestAudioWorkletProcessorPostMessageSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor),\n    // @todo window is guaranteed to be defined because isSecureContext checks that as well.\n    window$1) : undefined;\n    var isNativeContext = createIsNativeContext(isNativeAudioContext, isNativeOfflineAudioContext);\n    var decodeAudioData = createDecodeAudioData(audioBufferStore, cacheTestResult, createDataCloneError, createEncodingError, new WeakSet(), getNativeContext, isNativeContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\n    var baseAudioContextConstructor = createBaseAudioContextConstructor(addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor);\n    var mediaElementAudioSourceNodeConstructor = createMediaElementAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaElementAudioSourceNode, getNativeContext, isNativeOfflineAudioContext);\n    var mediaStreamAudioDestinationNodeConstructor = createMediaStreamAudioDestinationNodeConstructor(audioNodeConstructor, createNativeMediaStreamAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext);\n    var mediaStreamAudioSourceNodeConstructor = createMediaStreamAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamAudioSourceNode, getNativeContext, isNativeOfflineAudioContext);\n    var createNativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNodeFactory(createInvalidStateError, isNativeOfflineAudioContext);\n    var mediaStreamTrackAudioSourceNodeConstructor = createMediaStreamTrackAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamTrackAudioSourceNode, getNativeContext);\n    var audioContextConstructor = createAudioContextConstructor(baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioDestinationNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor);\n    var getUnrenderedAudioWorkletNodes = createGetUnrenderedAudioWorkletNodes(unrenderedAudioWorkletNodeStore);\n    var addUnrenderedAudioWorkletNode = createAddUnrenderedAudioWorkletNode(getUnrenderedAudioWorkletNodes);\n    var connectMultipleOutputs = createConnectMultipleOutputs(createIndexSizeError);\n    var deleteUnrenderedAudioWorkletNode = createDeleteUnrenderedAudioWorkletNode(getUnrenderedAudioWorkletNodes);\n    var disconnectMultipleOutputs = createDisconnectMultipleOutputs(createIndexSizeError);\n    var activeAudioWorkletNodeInputsStore = new WeakMap();\n    var getActiveAudioWorkletNodeInputs = createGetActiveAudioWorkletNodeInputs(activeAudioWorkletNodeInputsStore, getValueForKey);\n    var createNativeAudioWorkletNodeFaker = createNativeAudioWorkletNodeFakerFactory(connectMultipleOutputs, createIndexSizeError, createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getActiveAudioWorkletNodeInputs, monitorConnections);\n    var createNativeAudioWorkletNode = createNativeAudioWorkletNodeFactory(createInvalidStateError, createNativeAudioWorkletNodeFaker, createNativeGainNode, createNotSupportedError, monitorConnections);\n    var createAudioWorkletNodeRenderer = createAudioWorkletNodeRendererFactory(connectAudioParam, connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, deleteUnrenderedAudioWorkletNode, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getNativeAudioNode, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\n    var getBackupOfflineAudioContext = createGetBackupOfflineAudioContext(backupOfflineAudioContextStore);\n    var setActiveAudioWorkletNodeInputs = createSetActiveAudioWorkletNodeInputs(activeAudioWorkletNodeInputsStore);\n    // The AudioWorkletNode constructor is only available in a SecureContext.\n    var audioWorkletNodeConstructor = isSecureContext ? createAudioWorkletNodeConstructor(addUnrenderedAudioWorkletNode, audioNodeConstructor, createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, getAudioNodeConnections, getBackupOfflineAudioContext, getNativeContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, sanitizeAudioWorkletNodeOptions, setActiveAudioWorkletNodeInputs, testAudioWorkletNodeOptionsClonability, wrapEventListener) : undefined;\n    var minimalAudioContextConstructor = createMinimalAudioContextConstructor(createInvalidStateError, createNotSupportedError, createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor);\n    var createNativeOfflineAudioContext = createCreateNativeOfflineAudioContext(createNotSupportedError, nativeOfflineAudioContextConstructor);\n    var startRendering = createStartRendering(audioBufferStore, cacheTestResult, getAudioNodeRenderer, getUnrenderedAudioWorkletNodes, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\n    var minimalOfflineAudioContextConstructor = createMinimalOfflineAudioContextConstructor(cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering);\n    var offlineAudioContextConstructor = createOfflineAudioContextConstructor(baseAudioContextConstructor, cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, startRendering);\n    var isAnyAudioContext = createIsAnyAudioContext(CONTEXT_STORE, isNativeAudioContext);\n    var isAnyAudioNode = createIsAnyAudioNode(AUDIO_NODE_STORE, isNativeAudioNode);\n    var isAnyAudioParam = createIsAnyAudioParam(AUDIO_PARAM_STORE, isNativeAudioParam);\n    var isAnyOfflineAudioContext = createIsAnyOfflineAudioContext(CONTEXT_STORE, isNativeOfflineAudioContext);\n    var isSupported = function isSupported() {\n      return createIsSupportedPromise(cacheTestResult, createTestAudioBufferCopyChannelMethodsSubarraySupport(nativeOfflineAudioContextConstructor), createTestAudioContextCloseMethodSupport(nativeAudioContextConstructor), createTestAudioContextDecodeAudioDataMethodTypeErrorSupport(nativeOfflineAudioContextConstructor), createTestAudioContextOptionsSupport(nativeAudioContextConstructor), createTestAudioNodeConnectMethodSupport(nativeOfflineAudioContextConstructor), createTestAudioWorkletProcessorNoOutputsSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor), createTestChannelMergerNodeChannelCountSupport(nativeOfflineAudioContextConstructor), createTestConstantSourceNodeAccurateSchedulingSupport(nativeOfflineAudioContextConstructor), createTestConvolverNodeBufferReassignabilitySupport(nativeOfflineAudioContextConstructor), createTestConvolverNodeChannelCountSupport(nativeOfflineAudioContextConstructor), testDomExceptionConstructorSupport, createTestIsSecureContextSupport(window$1), createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport(nativeAudioContextConstructor), createTestStereoPannerNodeDefaultValueSupport(nativeOfflineAudioContextConstructor), testTransferablesSupport);\n    };\n\n    exports.AnalyserNode = analyserNodeConstructor;\n    exports.AudioBuffer = audioBufferConstructor;\n    exports.AudioBufferSourceNode = audioBufferSourceNodeConstructor;\n    exports.AudioContext = audioContextConstructor;\n    exports.AudioWorkletNode = audioWorkletNodeConstructor;\n    exports.BiquadFilterNode = biquadFilterNodeConstructor;\n    exports.ChannelMergerNode = channelMergerNodeConstructor;\n    exports.ChannelSplitterNode = channelSplitterNodeConstructor;\n    exports.ConstantSourceNode = constantSourceNodeConstructor;\n    exports.ConvolverNode = convolverNodeConstructor;\n    exports.DelayNode = delayNodeConstructor;\n    exports.DynamicsCompressorNode = dynamicsCompressorNodeConstructor;\n    exports.GainNode = gainNodeConstructor;\n    exports.IIRFilterNode = iIRFilterNodeConstructor;\n    exports.MediaElementAudioSourceNode = mediaElementAudioSourceNodeConstructor;\n    exports.MediaStreamAudioDestinationNode = mediaStreamAudioDestinationNodeConstructor;\n    exports.MediaStreamAudioSourceNode = mediaStreamAudioSourceNodeConstructor;\n    exports.MediaStreamTrackAudioSourceNode = mediaStreamTrackAudioSourceNodeConstructor;\n    exports.MinimalAudioContext = minimalAudioContextConstructor;\n    exports.MinimalOfflineAudioContext = minimalOfflineAudioContextConstructor;\n    exports.OfflineAudioContext = offlineAudioContextConstructor;\n    exports.OscillatorNode = oscillatorNodeConstructor;\n    exports.PannerNode = pannerNodeConstructor;\n    exports.PeriodicWave = periodicWaveConstructor;\n    exports.StereoPannerNode = stereoPannerNodeConstructor;\n    exports.WaveShaperNode = waveShaperNodeConstructor;\n    exports.addAudioWorkletModule = addAudioWorkletModule;\n    exports.decodeAudioData = decodeAudioData;\n    exports.isAnyAudioContext = isAnyAudioContext;\n    exports.isAnyAudioNode = isAnyAudioNode;\n    exports.isAnyAudioParam = isAnyAudioParam;\n    exports.isAnyOfflineAudioContext = isAnyOfflineAudioContext;\n    exports.isSupported = isSupported;\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/standardized-audio-context/build/es5/bundle.js\n");

/***/ })

};
;